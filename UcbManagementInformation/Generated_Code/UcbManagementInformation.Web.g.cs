//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UcbManagementInformation
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using UcbManagementInformation.Server.DataAccess;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new MCUser User
        {
            get
            {
                return ((MCUser)(base.User));
            }
        }
    }
}
namespace UcbManagementInformation.Server.DataAccess
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Alert' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class Alert : Entity
    {
        
        private EntityCollection<AlertUser> _alertUsers;
        
        private Guid _code;
        
        private Nullable<DateTime> _completedDate;
        
        private string _createdBy;
        
        private DateTime _createdDate;
        
        private string _message;
        
        private string _name;
        
        private Nullable<Guid> _relatedEntityCode;
        
        private byte[] _rowIdentifier;
        
        private string _status;
        
        private Nullable<DateTime> _triggerDateTime;
        
        private string _triggerField;
        
        private string _triggerKeyField;
        
        private string _triggerKeyValue;
        
        private string _triggerOperator;
        
        private string _triggerTable;
        
        private string _triggerValue;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnCompletedDateChanging(Nullable<DateTime> value);
        partial void OnCompletedDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnMessageChanging(string value);
        partial void OnMessageChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRelatedEntityCodeChanging(Nullable<Guid> value);
        partial void OnRelatedEntityCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTriggerDateTimeChanging(Nullable<DateTime> value);
        partial void OnTriggerDateTimeChanged();
        partial void OnTriggerFieldChanging(string value);
        partial void OnTriggerFieldChanged();
        partial void OnTriggerKeyFieldChanging(string value);
        partial void OnTriggerKeyFieldChanged();
        partial void OnTriggerKeyValueChanging(string value);
        partial void OnTriggerKeyValueChanged();
        partial void OnTriggerOperatorChanging(string value);
        partial void OnTriggerOperatorChanged();
        partial void OnTriggerTableChanging(string value);
        partial void OnTriggerTableChanged();
        partial void OnTriggerValueChanging(string value);
        partial void OnTriggerValueChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Alert"/> class.
        /// </summary>
        public Alert()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="AlertUser"/> entity instances.
        /// </summary>
        [Association("FK_AlertUser_Alert", "Code", "AlertCode")]
        public EntityCollection<AlertUser> AlertUsers
        {
            get
            {
                if ((this._alertUsers == null))
                {
                    this._alertUsers = new EntityCollection<AlertUser>(this, "AlertUsers", this.FilterAlertUsers, this.AttachAlertUsers, this.DetachAlertUsers);
                }
                return this._alertUsers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompletedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> CompletedDate
        {
            get
            {
                return this._completedDate;
            }
            set
            {
                if ((this._completedDate != value))
                {
                    this.OnCompletedDateChanging(value);
                    this.RaiseDataMemberChanging("CompletedDate");
                    this.ValidateProperty("CompletedDate", value);
                    this._completedDate = value;
                    this.RaiseDataMemberChanged("CompletedDate");
                    this.OnCompletedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedBy' value.
        /// </summary>
        [DataMember()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Message' value.
        /// </summary>
        [DataMember()]
        public string Message
        {
            get
            {
                return this._message;
            }
            set
            {
                if ((this._message != value))
                {
                    this.OnMessageChanging(value);
                    this.RaiseDataMemberChanging("Message");
                    this.ValidateProperty("Message", value);
                    this._message = value;
                    this.RaiseDataMemberChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RelatedEntityCode' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> RelatedEntityCode
        {
            get
            {
                return this._relatedEntityCode;
            }
            set
            {
                if ((this._relatedEntityCode != value))
                {
                    this.OnRelatedEntityCodeChanging(value);
                    this.RaiseDataMemberChanging("RelatedEntityCode");
                    this.ValidateProperty("RelatedEntityCode", value);
                    this._relatedEntityCode = value;
                    this.RaiseDataMemberChanged("RelatedEntityCode");
                    this.OnRelatedEntityCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerDateTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TriggerDateTime
        {
            get
            {
                return this._triggerDateTime;
            }
            set
            {
                if ((this._triggerDateTime != value))
                {
                    this.OnTriggerDateTimeChanging(value);
                    this.RaiseDataMemberChanging("TriggerDateTime");
                    this.ValidateProperty("TriggerDateTime", value);
                    this._triggerDateTime = value;
                    this.RaiseDataMemberChanged("TriggerDateTime");
                    this.OnTriggerDateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerField' value.
        /// </summary>
        [DataMember()]
        public string TriggerField
        {
            get
            {
                return this._triggerField;
            }
            set
            {
                if ((this._triggerField != value))
                {
                    this.OnTriggerFieldChanging(value);
                    this.RaiseDataMemberChanging("TriggerField");
                    this.ValidateProperty("TriggerField", value);
                    this._triggerField = value;
                    this.RaiseDataMemberChanged("TriggerField");
                    this.OnTriggerFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerKeyField' value.
        /// </summary>
        [DataMember()]
        public string TriggerKeyField
        {
            get
            {
                return this._triggerKeyField;
            }
            set
            {
                if ((this._triggerKeyField != value))
                {
                    this.OnTriggerKeyFieldChanging(value);
                    this.RaiseDataMemberChanging("TriggerKeyField");
                    this.ValidateProperty("TriggerKeyField", value);
                    this._triggerKeyField = value;
                    this.RaiseDataMemberChanged("TriggerKeyField");
                    this.OnTriggerKeyFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerKeyValue' value.
        /// </summary>
        [DataMember()]
        public string TriggerKeyValue
        {
            get
            {
                return this._triggerKeyValue;
            }
            set
            {
                if ((this._triggerKeyValue != value))
                {
                    this.OnTriggerKeyValueChanging(value);
                    this.RaiseDataMemberChanging("TriggerKeyValue");
                    this.ValidateProperty("TriggerKeyValue", value);
                    this._triggerKeyValue = value;
                    this.RaiseDataMemberChanged("TriggerKeyValue");
                    this.OnTriggerKeyValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerOperator' value.
        /// </summary>
        [DataMember()]
        public string TriggerOperator
        {
            get
            {
                return this._triggerOperator;
            }
            set
            {
                if ((this._triggerOperator != value))
                {
                    this.OnTriggerOperatorChanging(value);
                    this.RaiseDataMemberChanging("TriggerOperator");
                    this.ValidateProperty("TriggerOperator", value);
                    this._triggerOperator = value;
                    this.RaiseDataMemberChanged("TriggerOperator");
                    this.OnTriggerOperatorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerTable' value.
        /// </summary>
        [DataMember()]
        public string TriggerTable
        {
            get
            {
                return this._triggerTable;
            }
            set
            {
                if ((this._triggerTable != value))
                {
                    this.OnTriggerTableChanging(value);
                    this.RaiseDataMemberChanging("TriggerTable");
                    this.ValidateProperty("TriggerTable", value);
                    this._triggerTable = value;
                    this.RaiseDataMemberChanged("TriggerTable");
                    this.OnTriggerTableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TriggerValue' value.
        /// </summary>
        [DataMember()]
        public string TriggerValue
        {
            get
            {
                return this._triggerValue;
            }
            set
            {
                if ((this._triggerValue != value))
                {
                    this.OnTriggerValueChanging(value);
                    this.RaiseDataMemberChanging("TriggerValue");
                    this.ValidateProperty("TriggerValue", value);
                    this._triggerValue = value;
                    this.RaiseDataMemberChanged("TriggerValue");
                    this.OnTriggerValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private void AttachAlertUsers(AlertUser entity)
        {
            entity.Alert = this;
        }
        
        private void DetachAlertUsers(AlertUser entity)
        {
            entity.Alert = null;
        }
        
        private bool FilterAlertUsers(AlertUser entity)
        {
            return (entity.AlertCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'AlertUser' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class AlertUser : Entity
    {
        
        private Nullable<DateTime> _acknowledgedDate;
        
        private EntityRef<Alert> _alert;
        
        private Guid _alertCode;
        
        private Guid _code;
        
        private byte[] _rowIdentifier;
        
        private EntityRef<MCUser> _user;
        
        private Guid _userCode;
        
        private string _userMessageStatus;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAcknowledgedDateChanging(Nullable<DateTime> value);
        partial void OnAcknowledgedDateChanged();
        partial void OnAlertCodeChanging(Guid value);
        partial void OnAlertCodeChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnUserCodeChanging(Guid value);
        partial void OnUserCodeChanged();
        partial void OnUserMessageStatusChanging(string value);
        partial void OnUserMessageStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertUser"/> class.
        /// </summary>
        public AlertUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AcknowledgedDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> AcknowledgedDate
        {
            get
            {
                return this._acknowledgedDate;
            }
            set
            {
                if ((this._acknowledgedDate != value))
                {
                    this.OnAcknowledgedDateChanging(value);
                    this.RaiseDataMemberChanging("AcknowledgedDate");
                    this.ValidateProperty("AcknowledgedDate", value);
                    this._acknowledgedDate = value;
                    this.RaiseDataMemberChanged("AcknowledgedDate");
                    this.OnAcknowledgedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Alert"/> entity.
        /// </summary>
        [Association("FK_AlertUser_Alert", "AlertCode", "Code", IsForeignKey=true)]
        public Alert Alert
        {
            get
            {
                if ((this._alert == null))
                {
                    this._alert = new EntityRef<Alert>(this, "Alert", this.FilterAlert);
                }
                return this._alert.Entity;
            }
            set
            {
                Alert previous = this.Alert;
                if ((previous != value))
                {
                    this.ValidateProperty("Alert", value);
                    if ((previous != null))
                    {
                        this._alert.Entity = null;
                        previous.AlertUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AlertCode = value.Code;
                    }
                    else
                    {
                        this.AlertCode = default(Guid);
                    }
                    this._alert.Entity = value;
                    if ((value != null))
                    {
                        value.AlertUsers.Add(this);
                    }
                    this.RaisePropertyChanged("Alert");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AlertCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid AlertCode
        {
            get
            {
                return this._alertCode;
            }
            set
            {
                if ((this._alertCode != value))
                {
                    this.OnAlertCodeChanging(value);
                    this.RaiseDataMemberChanging("AlertCode");
                    this.ValidateProperty("AlertCode", value);
                    this._alertCode = value;
                    this.RaiseDataMemberChanged("AlertCode");
                    this.OnAlertCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MCUser"/> entity.
        /// </summary>
        [Association("FK_AlertUser_User", "UserCode", "Code", IsForeignKey=true)]
        public MCUser User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<MCUser>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                MCUser previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.AlertUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserCode = value.Code;
                    }
                    else
                    {
                        this.UserCode = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.AlertUsers.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserCode
        {
            get
            {
                return this._userCode;
            }
            set
            {
                if ((this._userCode != value))
                {
                    this.OnUserCodeChanging(value);
                    this.RaiseDataMemberChanging("UserCode");
                    this.ValidateProperty("UserCode", value);
                    this._userCode = value;
                    this.RaiseDataMemberChanged("UserCode");
                    this.OnUserCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserMessageStatus' value.
        /// </summary>
        [DataMember()]
        public string UserMessageStatus
        {
            get
            {
                return this._userMessageStatus;
            }
            set
            {
                if ((this._userMessageStatus != value))
                {
                    this.OnUserMessageStatusChanging(value);
                    this.RaiseDataMemberChanging("UserMessageStatus");
                    this.ValidateProperty("UserMessageStatus", value);
                    this._userMessageStatus = value;
                    this.RaiseDataMemberChanged("UserMessageStatus");
                    this.OnUserMessageStatusChanged();
                }
            }
        }
        
        private bool FilterAlert(Alert entity)
        {
            return (entity.Code == this.AlertCode);
        }
        
        private bool FilterUser(MCUser entity)
        {
            return (entity.Code == this.UserCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataCategory' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataCategory : Entity
    {
        
        private Guid _code;
        
        private EntityCollection<DataItem> _dataItems;
        
        private EntityRef<DataModel> _dataModel;
        
        private Guid _dataModelCode;
        
        private string _name;
        
        private byte[] _rowIdentifier;
        
        private int _sortField;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataModelCodeChanging(Guid value);
        partial void OnDataModelCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSortFieldChanging(int value);
        partial void OnSortFieldChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataCategory"/> class.
        /// </summary>
        public DataCategory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataItem"/> entity instances.
        /// </summary>
        [Association("FK_DataItem_DataCategory", "Code", "DataCategoryCode")]
        public EntityCollection<DataItem> DataItems
        {
            get
            {
                if ((this._dataItems == null))
                {
                    this._dataItems = new EntityCollection<DataItem>(this, "DataItems", this.FilterDataItems, this.AttachDataItems, this.DetachDataItems);
                }
                return this._dataItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataModel"/> entity.
        /// </summary>
        [Association("FK_DataCategory_DataModel", "DataModelCode", "Code", IsForeignKey=true)]
        public DataModel DataModel
        {
            get
            {
                if ((this._dataModel == null))
                {
                    this._dataModel = new EntityRef<DataModel>(this, "DataModel", this.FilterDataModel);
                }
                return this._dataModel.Entity;
            }
            set
            {
                DataModel previous = this.DataModel;
                if ((previous != value))
                {
                    this.ValidateProperty("DataModel", value);
                    if ((previous != null))
                    {
                        this._dataModel.Entity = null;
                        previous.DataCategories.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataModelCode = value.Code;
                    }
                    else
                    {
                        this.DataModelCode = default(Guid);
                    }
                    this._dataModel.Entity = value;
                    if ((value != null))
                    {
                        value.DataCategories.Add(this);
                    }
                    this.RaisePropertyChanged("DataModel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataModelCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataModelCode
        {
            get
            {
                return this._dataModelCode;
            }
            set
            {
                if ((this._dataModelCode != value))
                {
                    this.OnDataModelCodeChanging(value);
                    this.RaiseDataMemberChanging("DataModelCode");
                    this.ValidateProperty("DataModelCode", value);
                    this._dataModelCode = value;
                    this.RaiseDataMemberChanged("DataModelCode");
                    this.OnDataModelCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortField' value.
        /// </summary>
        [DataMember()]
        public int SortField
        {
            get
            {
                return this._sortField;
            }
            set
            {
                if ((this._sortField != value))
                {
                    this.OnSortFieldChanging(value);
                    this.RaiseDataMemberChanging("SortField");
                    this.ValidateProperty("SortField", value);
                    this._sortField = value;
                    this.RaiseDataMemberChanged("SortField");
                    this.OnSortFieldChanged();
                }
            }
        }
        
        private void AttachDataItems(DataItem entity)
        {
            entity.DataCategory = this;
        }
        
        private void DetachDataItems(DataItem entity)
        {
            entity.DataCategory = null;
        }
        
        private bool FilterDataItems(DataItem entity)
        {
            return (entity.DataCategoryCode == this.Code);
        }
        
        private bool FilterDataModel(DataModel entity)
        {
            return (entity.Code == this.DataModelCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataItem' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataItem : Entity
    {
        
        private string _caption;
        
        private Guid _code;
        
        private EntityRef<DataCategory> _dataCategory;
        
        private Guid _dataCategoryCode;
        
        private EntityRef<DataTable> _dataTable;
        
        private Guid _dataTableCode;
        
        private string _dataType;
        
        private string _description;
        
        private int _groupingLevel;
        
        private bool _isCommonTableGrouping;
        
        private bool _isField;
        
        private bool _isGroup;
        
        private bool _isGroupIDPresent;
        
        private bool _isLink;
        
        private bool _isSummable;
        
        private bool _isValueType;
        
        private string _linkAssociatedField;
        
        private string _locationOnSystem;
        
        private string _name;
        
        private EntityCollection<ReportItem> _reportItems;
        
        private byte[] _rowIdentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCaptionChanging(string value);
        partial void OnCaptionChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataCategoryCodeChanging(Guid value);
        partial void OnDataCategoryCodeChanged();
        partial void OnDataTableCodeChanging(Guid value);
        partial void OnDataTableCodeChanged();
        partial void OnDataTypeChanging(string value);
        partial void OnDataTypeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGroupingLevelChanging(int value);
        partial void OnGroupingLevelChanged();
        partial void OnIsCommonTableGroupingChanging(bool value);
        partial void OnIsCommonTableGroupingChanged();
        partial void OnIsFieldChanging(bool value);
        partial void OnIsFieldChanged();
        partial void OnIsGroupChanging(bool value);
        partial void OnIsGroupChanged();
        partial void OnIsGroupIDPresentChanging(bool value);
        partial void OnIsGroupIDPresentChanged();
        partial void OnIsLinkChanging(bool value);
        partial void OnIsLinkChanged();
        partial void OnIsSummableChanging(bool value);
        partial void OnIsSummableChanged();
        partial void OnIsValueTypeChanging(bool value);
        partial void OnIsValueTypeChanged();
        partial void OnLinkAssociatedFieldChanging(string value);
        partial void OnLinkAssociatedFieldChanged();
        partial void OnLocationOnSystemChanging(string value);
        partial void OnLocationOnSystemChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataItem"/> class.
        /// </summary>
        public DataItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Caption' value.
        /// </summary>
        [DataMember()]
        public string Caption
        {
            get
            {
                return this._caption;
            }
            set
            {
                if ((this._caption != value))
                {
                    this.OnCaptionChanging(value);
                    this.RaiseDataMemberChanging("Caption");
                    this.ValidateProperty("Caption", value);
                    this._caption = value;
                    this.RaiseDataMemberChanged("Caption");
                    this.OnCaptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataCategory"/> entity.
        /// </summary>
        [Association("FK_DataItem_DataCategory", "DataCategoryCode", "Code", IsForeignKey=true)]
        public DataCategory DataCategory
        {
            get
            {
                if ((this._dataCategory == null))
                {
                    this._dataCategory = new EntityRef<DataCategory>(this, "DataCategory", this.FilterDataCategory);
                }
                return this._dataCategory.Entity;
            }
            set
            {
                DataCategory previous = this.DataCategory;
                if ((previous != value))
                {
                    this.ValidateProperty("DataCategory", value);
                    if ((previous != null))
                    {
                        this._dataCategory.Entity = null;
                        previous.DataItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataCategoryCode = value.Code;
                    }
                    else
                    {
                        this.DataCategoryCode = default(Guid);
                    }
                    this._dataCategory.Entity = value;
                    if ((value != null))
                    {
                        value.DataItems.Add(this);
                    }
                    this.RaisePropertyChanged("DataCategory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataCategoryCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataCategoryCode
        {
            get
            {
                return this._dataCategoryCode;
            }
            set
            {
                if ((this._dataCategoryCode != value))
                {
                    this.OnDataCategoryCodeChanging(value);
                    this.RaiseDataMemberChanging("DataCategoryCode");
                    this.ValidateProperty("DataCategoryCode", value);
                    this._dataCategoryCode = value;
                    this.RaiseDataMemberChanged("DataCategoryCode");
                    this.OnDataCategoryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataTable"/> entity.
        /// </summary>
        [Association("FK_DataItem_DataTable", "DataTableCode", "Code", IsForeignKey=true)]
        public DataTable DataTable
        {
            get
            {
                if ((this._dataTable == null))
                {
                    this._dataTable = new EntityRef<DataTable>(this, "DataTable", this.FilterDataTable);
                }
                return this._dataTable.Entity;
            }
            set
            {
                DataTable previous = this.DataTable;
                if ((previous != value))
                {
                    this.ValidateProperty("DataTable", value);
                    if ((previous != null))
                    {
                        this._dataTable.Entity = null;
                        previous.DataItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataTableCode = value.Code;
                    }
                    else
                    {
                        this.DataTableCode = default(Guid);
                    }
                    this._dataTable.Entity = value;
                    if ((value != null))
                    {
                        value.DataItems.Add(this);
                    }
                    this.RaisePropertyChanged("DataTable");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataTableCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataTableCode
        {
            get
            {
                return this._dataTableCode;
            }
            set
            {
                if ((this._dataTableCode != value))
                {
                    this.OnDataTableCodeChanging(value);
                    this.RaiseDataMemberChanging("DataTableCode");
                    this.ValidateProperty("DataTableCode", value);
                    this._dataTableCode = value;
                    this.RaiseDataMemberChanged("DataTableCode");
                    this.OnDataTableCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataType' value.
        /// </summary>
        [DataMember()]
        public string DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                if ((this._dataType != value))
                {
                    this.OnDataTypeChanging(value);
                    this.RaiseDataMemberChanging("DataType");
                    this.ValidateProperty("DataType", value);
                    this._dataType = value;
                    this.RaiseDataMemberChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupingLevel' value.
        /// </summary>
        [DataMember()]
        public int GroupingLevel
        {
            get
            {
                return this._groupingLevel;
            }
            set
            {
                if ((this._groupingLevel != value))
                {
                    this.OnGroupingLevelChanging(value);
                    this.RaiseDataMemberChanging("GroupingLevel");
                    this.ValidateProperty("GroupingLevel", value);
                    this._groupingLevel = value;
                    this.RaiseDataMemberChanged("GroupingLevel");
                    this.OnGroupingLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsCommonTableGrouping' value.
        /// </summary>
        [DataMember()]
        public bool IsCommonTableGrouping
        {
            get
            {
                return this._isCommonTableGrouping;
            }
            set
            {
                if ((this._isCommonTableGrouping != value))
                {
                    this.OnIsCommonTableGroupingChanging(value);
                    this.RaiseDataMemberChanging("IsCommonTableGrouping");
                    this.ValidateProperty("IsCommonTableGrouping", value);
                    this._isCommonTableGrouping = value;
                    this.RaiseDataMemberChanged("IsCommonTableGrouping");
                    this.OnIsCommonTableGroupingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsField' value.
        /// </summary>
        [DataMember()]
        public bool IsField
        {
            get
            {
                return this._isField;
            }
            set
            {
                if ((this._isField != value))
                {
                    this.OnIsFieldChanging(value);
                    this.RaiseDataMemberChanging("IsField");
                    this.ValidateProperty("IsField", value);
                    this._isField = value;
                    this.RaiseDataMemberChanged("IsField");
                    this.OnIsFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsGroup' value.
        /// </summary>
        [DataMember()]
        public bool IsGroup
        {
            get
            {
                return this._isGroup;
            }
            set
            {
                if ((this._isGroup != value))
                {
                    this.OnIsGroupChanging(value);
                    this.RaiseDataMemberChanging("IsGroup");
                    this.ValidateProperty("IsGroup", value);
                    this._isGroup = value;
                    this.RaiseDataMemberChanged("IsGroup");
                    this.OnIsGroupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsGroupIDPresent' value.
        /// </summary>
        [DataMember()]
        public bool IsGroupIDPresent
        {
            get
            {
                return this._isGroupIDPresent;
            }
            set
            {
                if ((this._isGroupIDPresent != value))
                {
                    this.OnIsGroupIDPresentChanging(value);
                    this.RaiseDataMemberChanging("IsGroupIDPresent");
                    this.ValidateProperty("IsGroupIDPresent", value);
                    this._isGroupIDPresent = value;
                    this.RaiseDataMemberChanged("IsGroupIDPresent");
                    this.OnIsGroupIDPresentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsLink' value.
        /// </summary>
        [DataMember()]
        public bool IsLink
        {
            get
            {
                return this._isLink;
            }
            set
            {
                if ((this._isLink != value))
                {
                    this.OnIsLinkChanging(value);
                    this.RaiseDataMemberChanging("IsLink");
                    this.ValidateProperty("IsLink", value);
                    this._isLink = value;
                    this.RaiseDataMemberChanged("IsLink");
                    this.OnIsLinkChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSummable' value.
        /// </summary>
        [DataMember()]
        public bool IsSummable
        {
            get
            {
                return this._isSummable;
            }
            set
            {
                if ((this._isSummable != value))
                {
                    this.OnIsSummableChanging(value);
                    this.RaiseDataMemberChanging("IsSummable");
                    this.ValidateProperty("IsSummable", value);
                    this._isSummable = value;
                    this.RaiseDataMemberChanged("IsSummable");
                    this.OnIsSummableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsValueType' value.
        /// </summary>
        [DataMember()]
        public bool IsValueType
        {
            get
            {
                return this._isValueType;
            }
            set
            {
                if ((this._isValueType != value))
                {
                    this.OnIsValueTypeChanging(value);
                    this.RaiseDataMemberChanging("IsValueType");
                    this.ValidateProperty("IsValueType", value);
                    this._isValueType = value;
                    this.RaiseDataMemberChanged("IsValueType");
                    this.OnIsValueTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LinkAssociatedField' value.
        /// </summary>
        [DataMember()]
        public string LinkAssociatedField
        {
            get
            {
                return this._linkAssociatedField;
            }
            set
            {
                if ((this._linkAssociatedField != value))
                {
                    this.OnLinkAssociatedFieldChanging(value);
                    this.RaiseDataMemberChanging("LinkAssociatedField");
                    this.ValidateProperty("LinkAssociatedField", value);
                    this._linkAssociatedField = value;
                    this.RaiseDataMemberChanged("LinkAssociatedField");
                    this.OnLinkAssociatedFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationOnSystem' value.
        /// </summary>
        [DataMember()]
        public string LocationOnSystem
        {
            get
            {
                return this._locationOnSystem;
            }
            set
            {
                if ((this._locationOnSystem != value))
                {
                    this.OnLocationOnSystemChanging(value);
                    this.RaiseDataMemberChanging("LocationOnSystem");
                    this.ValidateProperty("LocationOnSystem", value);
                    this._locationOnSystem = value;
                    this.RaiseDataMemberChanged("LocationOnSystem");
                    this.OnLocationOnSystemChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportItem"/> entity instances.
        /// </summary>
        [Association("FK_ReportItem_DataItem", "Code", "DataItemCode")]
        public EntityCollection<ReportItem> ReportItems
        {
            get
            {
                if ((this._reportItems == null))
                {
                    this._reportItems = new EntityCollection<ReportItem>(this, "ReportItems", this.FilterReportItems, this.AttachReportItems, this.DetachReportItems);
                }
                return this._reportItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        private bool FilterDataCategory(DataCategory entity)
        {
            return (entity.Code == this.DataCategoryCode);
        }
        
        private bool FilterDataTable(DataTable entity)
        {
            return (entity.Code == this.DataTableCode);
        }
        
        private void AttachReportItems(ReportItem entity)
        {
            entity.DataItem = this;
        }
        
        private void DetachReportItems(ReportItem entity)
        {
            entity.DataItem = null;
        }
        
        private bool FilterReportItems(ReportItem entity)
        {
            return (entity.DataItemCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataModel' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataModel : Entity
    {
        
        private Guid _code;
        
        private EntityCollection<DataCategory> _dataCategories;
        
        private string _datasourceName;
        
        private EntityCollection<DataTableJoin> _dataTableJoins;
        
        private EntityCollection<DataTable> _dataTables;
        
        private string _description;
        
        private string _name;
        
        private EntityCollection<Report> _reports_1;
        
        private byte[] _rowidentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDatasourceNameChanging(string value);
        partial void OnDatasourceNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRowidentifierChanging(byte[] value);
        partial void OnRowidentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataModel"/> class.
        /// </summary>
        public DataModel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataCategory"/> entity instances.
        /// </summary>
        [Association("FK_DataCategory_DataModel", "Code", "DataModelCode")]
        public EntityCollection<DataCategory> DataCategories
        {
            get
            {
                if ((this._dataCategories == null))
                {
                    this._dataCategories = new EntityCollection<DataCategory>(this, "DataCategories", this.FilterDataCategories, this.AttachDataCategories, this.DetachDataCategories);
                }
                return this._dataCategories;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DatasourceName' value.
        /// </summary>
        [DataMember()]
        public string DatasourceName
        {
            get
            {
                return this._datasourceName;
            }
            set
            {
                if ((this._datasourceName != value))
                {
                    this.OnDatasourceNameChanging(value);
                    this.RaiseDataMemberChanging("DatasourceName");
                    this.ValidateProperty("DatasourceName", value);
                    this._datasourceName = value;
                    this.RaiseDataMemberChanged("DatasourceName");
                    this.OnDatasourceNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataTableJoin"/> entity instances.
        /// </summary>
        [Association("FK_DataTableJoin_DataModel", "Code", "DataModelCode")]
        public EntityCollection<DataTableJoin> DataTableJoins
        {
            get
            {
                if ((this._dataTableJoins == null))
                {
                    this._dataTableJoins = new EntityCollection<DataTableJoin>(this, "DataTableJoins", this.FilterDataTableJoins, this.AttachDataTableJoins, this.DetachDataTableJoins);
                }
                return this._dataTableJoins;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataTable"/> entity instances.
        /// </summary>
        [Association("FK_DataTable_DataModel", "Code", "DataModelCode")]
        public EntityCollection<DataTable> DataTables
        {
            get
            {
                if ((this._dataTables == null))
                {
                    this._dataTables = new EntityCollection<DataTable>(this, "DataTables", this.FilterDataTables, this.AttachDataTables, this.DetachDataTables);
                }
                return this._dataTables;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Report"/> entity instances.
        /// </summary>
        [Association("FK_Report_DataModel1", "Code", "DataModelCode")]
        public EntityCollection<Report> Reports_1
        {
            get
            {
                if ((this._reports_1 == null))
                {
                    this._reports_1 = new EntityCollection<Report>(this, "Reports_1", this.FilterReports_1, this.AttachReports_1, this.DetachReports_1);
                }
                return this._reports_1;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rowidentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] Rowidentifier
        {
            get
            {
                return this._rowidentifier;
            }
            set
            {
                if ((this._rowidentifier != value))
                {
                    this.OnRowidentifierChanging(value);
                    this.RaiseDataMemberChanging("Rowidentifier");
                    this.ValidateProperty("Rowidentifier", value);
                    this._rowidentifier = value;
                    this.RaiseDataMemberChanged("Rowidentifier");
                    this.OnRowidentifierChanged();
                }
            }
        }
        
        private void AttachDataCategories(DataCategory entity)
        {
            entity.DataModel = this;
        }
        
        private void DetachDataCategories(DataCategory entity)
        {
            entity.DataModel = null;
        }
        
        private bool FilterDataCategories(DataCategory entity)
        {
            return (entity.DataModelCode == this.Code);
        }
        
        private void AttachDataTableJoins(DataTableJoin entity)
        {
            entity.DataModel = this;
        }
        
        private void DetachDataTableJoins(DataTableJoin entity)
        {
            entity.DataModel = null;
        }
        
        private bool FilterDataTableJoins(DataTableJoin entity)
        {
            return (entity.DataModelCode == this.Code);
        }
        
        private void AttachDataTables(DataTable entity)
        {
            entity.DataModel = this;
        }
        
        private void DetachDataTables(DataTable entity)
        {
            entity.DataModel = null;
        }
        
        private bool FilterDataTables(DataTable entity)
        {
            return (entity.DataModelCode == this.Code);
        }
        
        private void AttachReports_1(Report entity)
        {
            entity.DataModel_1 = this;
        }
        
        private void DetachReports_1(Report entity)
        {
            entity.DataModel_1 = null;
        }
        
        private bool FilterReports_1(Report entity)
        {
            return (entity.DataModelCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataTable' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataTable : Entity
    {
        
        private Guid _code;
        
        private EntityCollection<DataItem> _dataItems;
        
        private EntityRef<DataModel> _dataModel;
        
        private Guid _dataModelCode;
        
        private EntityCollection<DataTableRelationship> _dataTableRelationships;
        
        private EntityCollection<DataTableRelationship> _dataTableRelationships1;
        
        private string _name;
        
        private byte[] _rowIdentifier;
        
        private string _schemaName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataModelCodeChanging(Guid value);
        partial void OnDataModelCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSchemaNameChanging(string value);
        partial void OnSchemaNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTable"/> class.
        /// </summary>
        public DataTable()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataItem"/> entity instances.
        /// </summary>
        [Association("FK_DataItem_DataTable", "Code", "DataTableCode")]
        public EntityCollection<DataItem> DataItems
        {
            get
            {
                if ((this._dataItems == null))
                {
                    this._dataItems = new EntityCollection<DataItem>(this, "DataItems", this.FilterDataItems, this.AttachDataItems, this.DetachDataItems);
                }
                return this._dataItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataModel"/> entity.
        /// </summary>
        [Association("FK_DataTable_DataModel", "DataModelCode", "Code", IsForeignKey=true)]
        public DataModel DataModel
        {
            get
            {
                if ((this._dataModel == null))
                {
                    this._dataModel = new EntityRef<DataModel>(this, "DataModel", this.FilterDataModel);
                }
                return this._dataModel.Entity;
            }
            set
            {
                DataModel previous = this.DataModel;
                if ((previous != value))
                {
                    this.ValidateProperty("DataModel", value);
                    if ((previous != null))
                    {
                        this._dataModel.Entity = null;
                        previous.DataTables.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataModelCode = value.Code;
                    }
                    else
                    {
                        this.DataModelCode = default(Guid);
                    }
                    this._dataModel.Entity = value;
                    if ((value != null))
                    {
                        value.DataTables.Add(this);
                    }
                    this.RaisePropertyChanged("DataModel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataModelCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataModelCode
        {
            get
            {
                return this._dataModelCode;
            }
            set
            {
                if ((this._dataModelCode != value))
                {
                    this.OnDataModelCodeChanging(value);
                    this.RaiseDataMemberChanging("DataModelCode");
                    this.ValidateProperty("DataModelCode", value);
                    this._dataModelCode = value;
                    this.RaiseDataMemberChanged("DataModelCode");
                    this.OnDataModelCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataTableRelationship"/> entity instances.
        /// </summary>
        [Association("FK_DataTableRelationship_DataTable", "Code", "DataTableFromCode")]
        public EntityCollection<DataTableRelationship> DataTableRelationships
        {
            get
            {
                if ((this._dataTableRelationships == null))
                {
                    this._dataTableRelationships = new EntityCollection<DataTableRelationship>(this, "DataTableRelationships", this.FilterDataTableRelationships, this.AttachDataTableRelationships, this.DetachDataTableRelationships);
                }
                return this._dataTableRelationships;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataTableRelationship"/> entity instances.
        /// </summary>
        [Association("FK_DataTableRelationship_DataTable1", "Code", "DataTableToCode")]
        public EntityCollection<DataTableRelationship> DataTableRelationships1
        {
            get
            {
                if ((this._dataTableRelationships1 == null))
                {
                    this._dataTableRelationships1 = new EntityCollection<DataTableRelationship>(this, "DataTableRelationships1", this.FilterDataTableRelationships1, this.AttachDataTableRelationships1, this.DetachDataTableRelationships1);
                }
                return this._dataTableRelationships1;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SchemaName' value.
        /// </summary>
        [DataMember()]
        public string SchemaName
        {
            get
            {
                return this._schemaName;
            }
            set
            {
                if ((this._schemaName != value))
                {
                    this.OnSchemaNameChanging(value);
                    this.RaiseDataMemberChanging("SchemaName");
                    this.ValidateProperty("SchemaName", value);
                    this._schemaName = value;
                    this.RaiseDataMemberChanged("SchemaName");
                    this.OnSchemaNameChanged();
                }
            }
        }
        
        private void AttachDataItems(DataItem entity)
        {
            entity.DataTable = this;
        }
        
        private void DetachDataItems(DataItem entity)
        {
            entity.DataTable = null;
        }
        
        private bool FilterDataItems(DataItem entity)
        {
            return (entity.DataTableCode == this.Code);
        }
        
        private bool FilterDataModel(DataModel entity)
        {
            return (entity.Code == this.DataModelCode);
        }
        
        private void AttachDataTableRelationships(DataTableRelationship entity)
        {
            entity.DataTable = this;
        }
        
        private void DetachDataTableRelationships(DataTableRelationship entity)
        {
            entity.DataTable = null;
        }
        
        private bool FilterDataTableRelationships(DataTableRelationship entity)
        {
            return (entity.DataTableFromCode == this.Code);
        }
        
        private void AttachDataTableRelationships1(DataTableRelationship entity)
        {
            entity.DataTable1 = this;
        }
        
        private void DetachDataTableRelationships1(DataTableRelationship entity)
        {
            entity.DataTable1 = null;
        }
        
        private bool FilterDataTableRelationships1(DataTableRelationship entity)
        {
            return (entity.DataTableToCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataTableJoin' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataTableJoin : Entity
    {
        
        private Guid _code;
        
        private EntityRef<DataModel> _dataModel;
        
        private Guid _dataModelCode;
        
        private EntityCollection<DataTableRelationshipJoin> _dataTableRelationshipJoins;
        
        private string _defaultJoinType;
        
        private string _fromField;
        
        private string _fromTable;
        
        private bool _isOneToOne;
        
        private EntityCollection<ReportDataTableJoin> _reportDataTableJoins;
        
        private byte[] _rowIdentifier;
        
        private string _toField;
        
        private string _toTable;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataModelCodeChanging(Guid value);
        partial void OnDataModelCodeChanged();
        partial void OnDefaultJoinTypeChanging(string value);
        partial void OnDefaultJoinTypeChanged();
        partial void OnFromFieldChanging(string value);
        partial void OnFromFieldChanged();
        partial void OnFromTableChanging(string value);
        partial void OnFromTableChanged();
        partial void OnIsOneToOneChanging(bool value);
        partial void OnIsOneToOneChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnToFieldChanging(string value);
        partial void OnToFieldChanged();
        partial void OnToTableChanging(string value);
        partial void OnToTableChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableJoin"/> class.
        /// </summary>
        public DataTableJoin()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataModel"/> entity.
        /// </summary>
        [Association("FK_DataTableJoin_DataModel", "DataModelCode", "Code", IsForeignKey=true)]
        public DataModel DataModel
        {
            get
            {
                if ((this._dataModel == null))
                {
                    this._dataModel = new EntityRef<DataModel>(this, "DataModel", this.FilterDataModel);
                }
                return this._dataModel.Entity;
            }
            set
            {
                DataModel previous = this.DataModel;
                if ((previous != value))
                {
                    this.ValidateProperty("DataModel", value);
                    if ((previous != null))
                    {
                        this._dataModel.Entity = null;
                        previous.DataTableJoins.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataModelCode = value.Code;
                    }
                    else
                    {
                        this.DataModelCode = default(Guid);
                    }
                    this._dataModel.Entity = value;
                    if ((value != null))
                    {
                        value.DataTableJoins.Add(this);
                    }
                    this.RaisePropertyChanged("DataModel");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataModelCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataModelCode
        {
            get
            {
                return this._dataModelCode;
            }
            set
            {
                if ((this._dataModelCode != value))
                {
                    this.OnDataModelCodeChanging(value);
                    this.RaiseDataMemberChanging("DataModelCode");
                    this.ValidateProperty("DataModelCode", value);
                    this._dataModelCode = value;
                    this.RaiseDataMemberChanged("DataModelCode");
                    this.OnDataModelCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataTableRelationshipJoin"/> entity instances.
        /// </summary>
        [Association("FK_DataTableRelationshipJoin_DataTableJoin", "Code", "DataTableJoinCode")]
        public EntityCollection<DataTableRelationshipJoin> DataTableRelationshipJoins
        {
            get
            {
                if ((this._dataTableRelationshipJoins == null))
                {
                    this._dataTableRelationshipJoins = new EntityCollection<DataTableRelationshipJoin>(this, "DataTableRelationshipJoins", this.FilterDataTableRelationshipJoins, this.AttachDataTableRelationshipJoins, this.DetachDataTableRelationshipJoins);
                }
                return this._dataTableRelationshipJoins;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultJoinType' value.
        /// </summary>
        [DataMember()]
        public string DefaultJoinType
        {
            get
            {
                return this._defaultJoinType;
            }
            set
            {
                if ((this._defaultJoinType != value))
                {
                    this.OnDefaultJoinTypeChanging(value);
                    this.RaiseDataMemberChanging("DefaultJoinType");
                    this.ValidateProperty("DefaultJoinType", value);
                    this._defaultJoinType = value;
                    this.RaiseDataMemberChanged("DefaultJoinType");
                    this.OnDefaultJoinTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FromField' value.
        /// </summary>
        [DataMember()]
        public string FromField
        {
            get
            {
                return this._fromField;
            }
            set
            {
                if ((this._fromField != value))
                {
                    this.OnFromFieldChanging(value);
                    this.RaiseDataMemberChanging("FromField");
                    this.ValidateProperty("FromField", value);
                    this._fromField = value;
                    this.RaiseDataMemberChanged("FromField");
                    this.OnFromFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FromTable' value.
        /// </summary>
        [DataMember()]
        public string FromTable
        {
            get
            {
                return this._fromTable;
            }
            set
            {
                if ((this._fromTable != value))
                {
                    this.OnFromTableChanging(value);
                    this.RaiseDataMemberChanging("FromTable");
                    this.ValidateProperty("FromTable", value);
                    this._fromTable = value;
                    this.RaiseDataMemberChanged("FromTable");
                    this.OnFromTableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOneToOne' value.
        /// </summary>
        [DataMember()]
        public bool IsOneToOne
        {
            get
            {
                return this._isOneToOne;
            }
            set
            {
                if ((this._isOneToOne != value))
                {
                    this.OnIsOneToOneChanging(value);
                    this.RaiseDataMemberChanging("IsOneToOne");
                    this.ValidateProperty("IsOneToOne", value);
                    this._isOneToOne = value;
                    this.RaiseDataMemberChanged("IsOneToOne");
                    this.OnIsOneToOneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportDataTableJoin"/> entity instances.
        /// </summary>
        [Association("FK_ReportDataTableJoin_DataTableJoin", "Code", "DataTableJoinCode")]
        public EntityCollection<ReportDataTableJoin> ReportDataTableJoins
        {
            get
            {
                if ((this._reportDataTableJoins == null))
                {
                    this._reportDataTableJoins = new EntityCollection<ReportDataTableJoin>(this, "ReportDataTableJoins", this.FilterReportDataTableJoins, this.AttachReportDataTableJoins, this.DetachReportDataTableJoins);
                }
                return this._reportDataTableJoins;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ToField' value.
        /// </summary>
        [DataMember()]
        public string ToField
        {
            get
            {
                return this._toField;
            }
            set
            {
                if ((this._toField != value))
                {
                    this.OnToFieldChanging(value);
                    this.RaiseDataMemberChanging("ToField");
                    this.ValidateProperty("ToField", value);
                    this._toField = value;
                    this.RaiseDataMemberChanged("ToField");
                    this.OnToFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ToTable' value.
        /// </summary>
        [DataMember()]
        public string ToTable
        {
            get
            {
                return this._toTable;
            }
            set
            {
                if ((this._toTable != value))
                {
                    this.OnToTableChanging(value);
                    this.RaiseDataMemberChanging("ToTable");
                    this.ValidateProperty("ToTable", value);
                    this._toTable = value;
                    this.RaiseDataMemberChanged("ToTable");
                    this.OnToTableChanged();
                }
            }
        }
        
        private bool FilterDataModel(DataModel entity)
        {
            return (entity.Code == this.DataModelCode);
        }
        
        private void AttachDataTableRelationshipJoins(DataTableRelationshipJoin entity)
        {
            entity.DataTableJoin = this;
        }
        
        private void DetachDataTableRelationshipJoins(DataTableRelationshipJoin entity)
        {
            entity.DataTableJoin = null;
        }
        
        private bool FilterDataTableRelationshipJoins(DataTableRelationshipJoin entity)
        {
            return (entity.DataTableJoinCode == this.Code);
        }
        
        private void AttachReportDataTableJoins(ReportDataTableJoin entity)
        {
            entity.DataTableJoin = this;
        }
        
        private void DetachReportDataTableJoins(ReportDataTableJoin entity)
        {
            entity.DataTableJoin = null;
        }
        
        private bool FilterReportDataTableJoins(ReportDataTableJoin entity)
        {
            return (entity.DataTableJoinCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataTableRelationship' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataTableRelationship : Entity
    {
        
        private Guid _code;
        
        private EntityRef<DataTable> _dataTable;
        
        private EntityRef<DataTable> _dataTable1;
        
        private Guid _dataTableFromCode;
        
        private EntityCollection<DataTableRelationshipJoin> _dataTableRelationshipJoins;
        
        private Guid _dataTableToCode;
        
        private string _joinInfo;
        
        private byte[] _rowIdentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataTableFromCodeChanging(Guid value);
        partial void OnDataTableFromCodeChanged();
        partial void OnDataTableToCodeChanging(Guid value);
        partial void OnDataTableToCodeChanged();
        partial void OnJoinInfoChanging(string value);
        partial void OnJoinInfoChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableRelationship"/> class.
        /// </summary>
        public DataTableRelationship()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataTable"/> entity.
        /// </summary>
        [Association("FK_DataTableRelationship_DataTable", "DataTableFromCode", "Code", IsForeignKey=true)]
        public DataTable DataTable
        {
            get
            {
                if ((this._dataTable == null))
                {
                    this._dataTable = new EntityRef<DataTable>(this, "DataTable", this.FilterDataTable);
                }
                return this._dataTable.Entity;
            }
            set
            {
                DataTable previous = this.DataTable;
                if ((previous != value))
                {
                    this.ValidateProperty("DataTable", value);
                    if ((previous != null))
                    {
                        this._dataTable.Entity = null;
                        previous.DataTableRelationships.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataTableFromCode = value.Code;
                    }
                    else
                    {
                        this.DataTableFromCode = default(Guid);
                    }
                    this._dataTable.Entity = value;
                    if ((value != null))
                    {
                        value.DataTableRelationships.Add(this);
                    }
                    this.RaisePropertyChanged("DataTable");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataTable"/> entity.
        /// </summary>
        [Association("FK_DataTableRelationship_DataTable1", "DataTableToCode", "Code", IsForeignKey=true)]
        public DataTable DataTable1
        {
            get
            {
                if ((this._dataTable1 == null))
                {
                    this._dataTable1 = new EntityRef<DataTable>(this, "DataTable1", this.FilterDataTable1);
                }
                return this._dataTable1.Entity;
            }
            set
            {
                DataTable previous = this.DataTable1;
                if ((previous != value))
                {
                    this.ValidateProperty("DataTable1", value);
                    if ((previous != null))
                    {
                        this._dataTable1.Entity = null;
                        previous.DataTableRelationships1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataTableToCode = value.Code;
                    }
                    else
                    {
                        this.DataTableToCode = default(Guid);
                    }
                    this._dataTable1.Entity = value;
                    if ((value != null))
                    {
                        value.DataTableRelationships1.Add(this);
                    }
                    this.RaisePropertyChanged("DataTable1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataTableFromCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataTableFromCode
        {
            get
            {
                return this._dataTableFromCode;
            }
            set
            {
                if ((this._dataTableFromCode != value))
                {
                    this.OnDataTableFromCodeChanging(value);
                    this.RaiseDataMemberChanging("DataTableFromCode");
                    this.ValidateProperty("DataTableFromCode", value);
                    this._dataTableFromCode = value;
                    this.RaiseDataMemberChanged("DataTableFromCode");
                    this.OnDataTableFromCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="DataTableRelationshipJoin"/> entity instances.
        /// </summary>
        [Association("FK_DataTableRelationshipJoin_DataTableRelationship", "Code", "DataTableRelationshipCode")]
        public EntityCollection<DataTableRelationshipJoin> DataTableRelationshipJoins
        {
            get
            {
                if ((this._dataTableRelationshipJoins == null))
                {
                    this._dataTableRelationshipJoins = new EntityCollection<DataTableRelationshipJoin>(this, "DataTableRelationshipJoins", this.FilterDataTableRelationshipJoins, this.AttachDataTableRelationshipJoins, this.DetachDataTableRelationshipJoins);
                }
                return this._dataTableRelationshipJoins;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataTableToCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataTableToCode
        {
            get
            {
                return this._dataTableToCode;
            }
            set
            {
                if ((this._dataTableToCode != value))
                {
                    this.OnDataTableToCodeChanging(value);
                    this.RaiseDataMemberChanging("DataTableToCode");
                    this.ValidateProperty("DataTableToCode", value);
                    this._dataTableToCode = value;
                    this.RaiseDataMemberChanged("DataTableToCode");
                    this.OnDataTableToCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JoinInfo' value.
        /// </summary>
        [DataMember()]
        public string JoinInfo
        {
            get
            {
                return this._joinInfo;
            }
            set
            {
                if ((this._joinInfo != value))
                {
                    this.OnJoinInfoChanging(value);
                    this.RaiseDataMemberChanging("JoinInfo");
                    this.ValidateProperty("JoinInfo", value);
                    this._joinInfo = value;
                    this.RaiseDataMemberChanged("JoinInfo");
                    this.OnJoinInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        private bool FilterDataTable(DataTable entity)
        {
            return (entity.Code == this.DataTableFromCode);
        }
        
        private bool FilterDataTable1(DataTable entity)
        {
            return (entity.Code == this.DataTableToCode);
        }
        
        private void AttachDataTableRelationshipJoins(DataTableRelationshipJoin entity)
        {
            entity.DataTableRelationship = this;
        }
        
        private void DetachDataTableRelationshipJoins(DataTableRelationshipJoin entity)
        {
            entity.DataTableRelationship = null;
        }
        
        private bool FilterDataTableRelationshipJoins(DataTableRelationshipJoin entity)
        {
            return (entity.DataTableRelationshipCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'DataTableRelationshipJoin' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class DataTableRelationshipJoin : Entity
    {
        
        private Guid _code;
        
        private EntityRef<DataTableJoin> _dataTableJoin;
        
        private Guid _dataTableJoinCode;
        
        private EntityRef<DataTableRelationship> _dataTableRelationship;
        
        private Guid _dataTableRelationshipCode;
        
        private byte[] _rowIdentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataTableJoinCodeChanging(Guid value);
        partial void OnDataTableJoinCodeChanged();
        partial void OnDataTableRelationshipCodeChanging(Guid value);
        partial void OnDataTableRelationshipCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableRelationshipJoin"/> class.
        /// </summary>
        public DataTableRelationshipJoin()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataTableJoin"/> entity.
        /// </summary>
        [Association("FK_DataTableRelationshipJoin_DataTableJoin", "DataTableJoinCode", "Code", IsForeignKey=true)]
        public DataTableJoin DataTableJoin
        {
            get
            {
                if ((this._dataTableJoin == null))
                {
                    this._dataTableJoin = new EntityRef<DataTableJoin>(this, "DataTableJoin", this.FilterDataTableJoin);
                }
                return this._dataTableJoin.Entity;
            }
            set
            {
                DataTableJoin previous = this.DataTableJoin;
                if ((previous != value))
                {
                    this.ValidateProperty("DataTableJoin", value);
                    if ((previous != null))
                    {
                        this._dataTableJoin.Entity = null;
                        previous.DataTableRelationshipJoins.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataTableJoinCode = value.Code;
                    }
                    else
                    {
                        this.DataTableJoinCode = default(Guid);
                    }
                    this._dataTableJoin.Entity = value;
                    if ((value != null))
                    {
                        value.DataTableRelationshipJoins.Add(this);
                    }
                    this.RaisePropertyChanged("DataTableJoin");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataTableJoinCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataTableJoinCode
        {
            get
            {
                return this._dataTableJoinCode;
            }
            set
            {
                if ((this._dataTableJoinCode != value))
                {
                    this.OnDataTableJoinCodeChanging(value);
                    this.RaiseDataMemberChanging("DataTableJoinCode");
                    this.ValidateProperty("DataTableJoinCode", value);
                    this._dataTableJoinCode = value;
                    this.RaiseDataMemberChanged("DataTableJoinCode");
                    this.OnDataTableJoinCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataTableRelationship"/> entity.
        /// </summary>
        [Association("FK_DataTableRelationshipJoin_DataTableRelationship", "DataTableRelationshipCode", "Code", IsForeignKey=true)]
        public DataTableRelationship DataTableRelationship
        {
            get
            {
                if ((this._dataTableRelationship == null))
                {
                    this._dataTableRelationship = new EntityRef<DataTableRelationship>(this, "DataTableRelationship", this.FilterDataTableRelationship);
                }
                return this._dataTableRelationship.Entity;
            }
            set
            {
                DataTableRelationship previous = this.DataTableRelationship;
                if ((previous != value))
                {
                    this.ValidateProperty("DataTableRelationship", value);
                    if ((previous != null))
                    {
                        this._dataTableRelationship.Entity = null;
                        previous.DataTableRelationshipJoins.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataTableRelationshipCode = value.Code;
                    }
                    else
                    {
                        this.DataTableRelationshipCode = default(Guid);
                    }
                    this._dataTableRelationship.Entity = value;
                    if ((value != null))
                    {
                        value.DataTableRelationshipJoins.Add(this);
                    }
                    this.RaisePropertyChanged("DataTableRelationship");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataTableRelationshipCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataTableRelationshipCode
        {
            get
            {
                return this._dataTableRelationshipCode;
            }
            set
            {
                if ((this._dataTableRelationshipCode != value))
                {
                    this.OnDataTableRelationshipCodeChanging(value);
                    this.RaiseDataMemberChanging("DataTableRelationshipCode");
                    this.ValidateProperty("DataTableRelationshipCode", value);
                    this._dataTableRelationshipCode = value;
                    this.RaiseDataMemberChanged("DataTableRelationshipCode");
                    this.OnDataTableRelationshipCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        private bool FilterDataTableJoin(DataTableJoin entity)
        {
            return (entity.Code == this.DataTableJoinCode);
        }
        
        private bool FilterDataTableRelationship(DataTableRelationship entity)
        {
            return (entity.Code == this.DataTableRelationshipCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Filter' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class Filter : Entity
    {
        
        private Guid _code;
        
        private string _filterValue;
        
        private string _operand;
        
        private EntityRef<ReportItem> _reportItem;
        
        private Guid _reportItemCode;
        
        private byte[] _rowIdentifier;
        
        private int _sortField;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnFilterValueChanging(string value);
        partial void OnFilterValueChanged();
        partial void OnOperandChanging(string value);
        partial void OnOperandChanged();
        partial void OnReportItemCodeChanging(Guid value);
        partial void OnReportItemCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSortFieldChanging(int value);
        partial void OnSortFieldChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Filter"/> class.
        /// </summary>
        public Filter()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FilterValue' value.
        /// </summary>
        [DataMember()]
        public string FilterValue
        {
            get
            {
                return this._filterValue;
            }
            set
            {
                if ((this._filterValue != value))
                {
                    this.OnFilterValueChanging(value);
                    this.RaiseDataMemberChanging("FilterValue");
                    this.ValidateProperty("FilterValue", value);
                    this._filterValue = value;
                    this.RaiseDataMemberChanged("FilterValue");
                    this.OnFilterValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Operand' value.
        /// </summary>
        [DataMember()]
        public string Operand
        {
            get
            {
                return this._operand;
            }
            set
            {
                if ((this._operand != value))
                {
                    this.OnOperandChanging(value);
                    this.RaiseDataMemberChanging("Operand");
                    this.ValidateProperty("Operand", value);
                    this._operand = value;
                    this.RaiseDataMemberChanged("Operand");
                    this.OnOperandChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportItem"/> entity.
        /// </summary>
        [Association("FK_Filter_ReportItem", "ReportItemCode", "Code", IsForeignKey=true)]
        public ReportItem ReportItem
        {
            get
            {
                if ((this._reportItem == null))
                {
                    this._reportItem = new EntityRef<ReportItem>(this, "ReportItem", this.FilterReportItem);
                }
                return this._reportItem.Entity;
            }
            set
            {
                ReportItem previous = this.ReportItem;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportItem", value);
                    if ((previous != null))
                    {
                        this._reportItem.Entity = null;
                        previous.Filters.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportItemCode = value.Code;
                    }
                    else
                    {
                        this.ReportItemCode = default(Guid);
                    }
                    this._reportItem.Entity = value;
                    if ((value != null))
                    {
                        value.Filters.Add(this);
                    }
                    this.RaisePropertyChanged("ReportItem");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportItemCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportItemCode
        {
            get
            {
                return this._reportItemCode;
            }
            set
            {
                if ((this._reportItemCode != value))
                {
                    this.OnReportItemCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportItemCode");
                    this.ValidateProperty("ReportItemCode", value);
                    this._reportItemCode = value;
                    this.RaiseDataMemberChanged("ReportItemCode");
                    this.OnReportItemCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortField' value.
        /// </summary>
        [DataMember()]
        public int SortField
        {
            get
            {
                return this._sortField;
            }
            set
            {
                if ((this._sortField != value))
                {
                    this.OnSortFieldChanging(value);
                    this.RaiseDataMemberChanging("SortField");
                    this.ValidateProperty("SortField", value);
                    this._sortField = value;
                    this.RaiseDataMemberChanged("SortField");
                    this.OnSortFieldChanged();
                }
            }
        }
        
        private bool FilterReportItem(ReportItem entity)
        {
            return (entity.Code == this.ReportItemCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'InputFileError' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class InputFileError : Entity
    {
        
        private string _category;
        
        private Guid _code;
        
        private Nullable<int> _errorLevel;
        
        private string _errorMessage;
        
        private EntityRef<InputFileHistory> _inputFileHistory;
        
        private Guid _inputFileHistoryCode;
        
        private Nullable<DateTime> _recordDateTime;
        
        private string _recordKey;
        
        private byte[] _rowIdentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnErrorLevelChanging(Nullable<int> value);
        partial void OnErrorLevelChanged();
        partial void OnErrorMessageChanging(string value);
        partial void OnErrorMessageChanged();
        partial void OnInputFileHistoryCodeChanging(Guid value);
        partial void OnInputFileHistoryCodeChanged();
        partial void OnRecordDateTimeChanging(Nullable<DateTime> value);
        partial void OnRecordDateTimeChanged();
        partial void OnRecordKeyChanging(string value);
        partial void OnRecordKeyChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileError"/> class.
        /// </summary>
        public InputFileError()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Category' value.
        /// </summary>
        [DataMember()]
        public string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    this.OnCategoryChanging(value);
                    this.RaiseDataMemberChanging("Category");
                    this.ValidateProperty("Category", value);
                    this._category = value;
                    this.RaiseDataMemberChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorLevel' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ErrorLevel
        {
            get
            {
                return this._errorLevel;
            }
            set
            {
                if ((this._errorLevel != value))
                {
                    this.OnErrorLevelChanging(value);
                    this.RaiseDataMemberChanging("ErrorLevel");
                    this.ValidateProperty("ErrorLevel", value);
                    this._errorLevel = value;
                    this.RaiseDataMemberChanged("ErrorLevel");
                    this.OnErrorLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorMessage' value.
        /// </summary>
        [DataMember()]
        public string ErrorMessage
        {
            get
            {
                return this._errorMessage;
            }
            set
            {
                if ((this._errorMessage != value))
                {
                    this.OnErrorMessageChanging(value);
                    this.RaiseDataMemberChanging("ErrorMessage");
                    this.ValidateProperty("ErrorMessage", value);
                    this._errorMessage = value;
                    this.RaiseDataMemberChanged("ErrorMessage");
                    this.OnErrorMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="InputFileHistory"/> entity.
        /// </summary>
        [Association("FK_InputFileErrors_InputFileHistory", "InputFileHistoryCode", "Code", IsForeignKey=true)]
        public InputFileHistory InputFileHistory
        {
            get
            {
                if ((this._inputFileHistory == null))
                {
                    this._inputFileHistory = new EntityRef<InputFileHistory>(this, "InputFileHistory", this.FilterInputFileHistory);
                }
                return this._inputFileHistory.Entity;
            }
            set
            {
                InputFileHistory previous = this.InputFileHistory;
                if ((previous != value))
                {
                    this.ValidateProperty("InputFileHistory", value);
                    if ((previous != null))
                    {
                        this._inputFileHistory.Entity = null;
                        previous.InputFileErrors.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InputFileHistoryCode = value.Code;
                    }
                    else
                    {
                        this.InputFileHistoryCode = default(Guid);
                    }
                    this._inputFileHistory.Entity = value;
                    if ((value != null))
                    {
                        value.InputFileErrors.Add(this);
                    }
                    this.RaisePropertyChanged("InputFileHistory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InputFileHistoryCode' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public Guid InputFileHistoryCode
        {
            get
            {
                return this._inputFileHistoryCode;
            }
            set
            {
                if ((this._inputFileHistoryCode != value))
                {
                    this.OnInputFileHistoryCodeChanging(value);
                    this.RaiseDataMemberChanging("InputFileHistoryCode");
                    this.ValidateProperty("InputFileHistoryCode", value);
                    this._inputFileHistoryCode = value;
                    this.RaiseDataMemberChanged("InputFileHistoryCode");
                    this.OnInputFileHistoryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordDateTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> RecordDateTime
        {
            get
            {
                return this._recordDateTime;
            }
            set
            {
                if ((this._recordDateTime != value))
                {
                    this.OnRecordDateTimeChanging(value);
                    this.RaiseDataMemberChanging("RecordDateTime");
                    this.ValidateProperty("RecordDateTime", value);
                    this._recordDateTime = value;
                    this.RaiseDataMemberChanged("RecordDateTime");
                    this.OnRecordDateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordKey' value.
        /// </summary>
        [DataMember()]
        public string RecordKey
        {
            get
            {
                return this._recordKey;
            }
            set
            {
                if ((this._recordKey != value))
                {
                    this.OnRecordKeyChanging(value);
                    this.RaiseDataMemberChanging("RecordKey");
                    this.ValidateProperty("RecordKey", value);
                    this._recordKey = value;
                    this.RaiseDataMemberChanged("RecordKey");
                    this.OnRecordKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        private bool FilterInputFileHistory(InputFileHistory entity)
        {
            return (entity.Code == this.InputFileHistoryCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._code, this._inputFileHistoryCode);
        }
    }
    
    /// <summary>
    /// The 'InputFileHistory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class InputFileHistory : Entity
    {
        
        private Guid _code;
        
        private string _filename;
        
        private string _fileType;
        
        private EntityCollection<InputFileError> _inputFileErrors;
        
        private string _loadedBy;
        
        private DateTime _loadedDate;
        
        private int _numberOfErrorRecords;
        
        private int _numberOfInformationalRecords;
        
        private int _numberOfRecords;
        
        private int _numberOfValidRecords;
        
        private int _numberOfWarningRecords;
        
        private string _providerOrganisationKeyValue;
        
        private EntityCollection<ProviderOrganisation> _providerOrganisations;
        
        private byte[] _rowIdentifier;
        
        private string _status;
        
        private DateTime _transferDate;
        
        private int _uploadDecision;
        
        private EntityCollection<UploadMonitor> _uploadMonitors;
        
        private Nullable<DateTime> _validatedLoadDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnFilenameChanging(string value);
        partial void OnFilenameChanged();
        partial void OnFileTypeChanging(string value);
        partial void OnFileTypeChanged();
        partial void OnLoadedByChanging(string value);
        partial void OnLoadedByChanged();
        partial void OnLoadedDateChanging(DateTime value);
        partial void OnLoadedDateChanged();
        partial void OnNumberOfErrorRecordsChanging(int value);
        partial void OnNumberOfErrorRecordsChanged();
        partial void OnNumberOfInformationalRecordsChanging(int value);
        partial void OnNumberOfInformationalRecordsChanged();
        partial void OnNumberOfRecordsChanging(int value);
        partial void OnNumberOfRecordsChanged();
        partial void OnNumberOfValidRecordsChanging(int value);
        partial void OnNumberOfValidRecordsChanged();
        partial void OnNumberOfWarningRecordsChanging(int value);
        partial void OnNumberOfWarningRecordsChanged();
        partial void OnProviderOrganisationKeyValueChanging(string value);
        partial void OnProviderOrganisationKeyValueChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTransferDateChanging(DateTime value);
        partial void OnTransferDateChanged();
        partial void OnUploadDecisionChanging(int value);
        partial void OnUploadDecisionChanged();
        partial void OnValidatedLoadDateChanging(Nullable<DateTime> value);
        partial void OnValidatedLoadDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileHistory"/> class.
        /// </summary>
        public InputFileHistory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Filename' value.
        /// </summary>
        [DataMember()]
        public string Filename
        {
            get
            {
                return this._filename;
            }
            set
            {
                if ((this._filename != value))
                {
                    this.OnFilenameChanging(value);
                    this.RaiseDataMemberChanging("Filename");
                    this.ValidateProperty("Filename", value);
                    this._filename = value;
                    this.RaiseDataMemberChanged("Filename");
                    this.OnFilenameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileType' value.
        /// </summary>
        [DataMember()]
        public string FileType
        {
            get
            {
                return this._fileType;
            }
            set
            {
                if ((this._fileType != value))
                {
                    this.OnFileTypeChanging(value);
                    this.RaiseDataMemberChanging("FileType");
                    this.ValidateProperty("FileType", value);
                    this._fileType = value;
                    this.RaiseDataMemberChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="InputFileError"/> entity instances.
        /// </summary>
        [Association("FK_InputFileErrors_InputFileHistory", "Code", "InputFileHistoryCode")]
        public EntityCollection<InputFileError> InputFileErrors
        {
            get
            {
                if ((this._inputFileErrors == null))
                {
                    this._inputFileErrors = new EntityCollection<InputFileError>(this, "InputFileErrors", this.FilterInputFileErrors, this.AttachInputFileErrors, this.DetachInputFileErrors);
                }
                return this._inputFileErrors;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoadedBy' value.
        /// </summary>
        [DataMember()]
        public string LoadedBy
        {
            get
            {
                return this._loadedBy;
            }
            set
            {
                if ((this._loadedBy != value))
                {
                    this.OnLoadedByChanging(value);
                    this.RaiseDataMemberChanging("LoadedBy");
                    this.ValidateProperty("LoadedBy", value);
                    this._loadedBy = value;
                    this.RaiseDataMemberChanged("LoadedBy");
                    this.OnLoadedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LoadedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime LoadedDate
        {
            get
            {
                return this._loadedDate;
            }
            set
            {
                if ((this._loadedDate != value))
                {
                    this.OnLoadedDateChanging(value);
                    this.RaiseDataMemberChanging("LoadedDate");
                    this.ValidateProperty("LoadedDate", value);
                    this._loadedDate = value;
                    this.RaiseDataMemberChanged("LoadedDate");
                    this.OnLoadedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfErrorRecords' value.
        /// </summary>
        [DataMember()]
        public int NumberOfErrorRecords
        {
            get
            {
                return this._numberOfErrorRecords;
            }
            set
            {
                if ((this._numberOfErrorRecords != value))
                {
                    this.OnNumberOfErrorRecordsChanging(value);
                    this.RaiseDataMemberChanging("NumberOfErrorRecords");
                    this.ValidateProperty("NumberOfErrorRecords", value);
                    this._numberOfErrorRecords = value;
                    this.RaiseDataMemberChanged("NumberOfErrorRecords");
                    this.OnNumberOfErrorRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfInformationalRecords' value.
        /// </summary>
        [DataMember()]
        public int NumberOfInformationalRecords
        {
            get
            {
                return this._numberOfInformationalRecords;
            }
            set
            {
                if ((this._numberOfInformationalRecords != value))
                {
                    this.OnNumberOfInformationalRecordsChanging(value);
                    this.RaiseDataMemberChanging("NumberOfInformationalRecords");
                    this.ValidateProperty("NumberOfInformationalRecords", value);
                    this._numberOfInformationalRecords = value;
                    this.RaiseDataMemberChanged("NumberOfInformationalRecords");
                    this.OnNumberOfInformationalRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfRecords' value.
        /// </summary>
        [DataMember()]
        public int NumberOfRecords
        {
            get
            {
                return this._numberOfRecords;
            }
            set
            {
                if ((this._numberOfRecords != value))
                {
                    this.OnNumberOfRecordsChanging(value);
                    this.RaiseDataMemberChanging("NumberOfRecords");
                    this.ValidateProperty("NumberOfRecords", value);
                    this._numberOfRecords = value;
                    this.RaiseDataMemberChanged("NumberOfRecords");
                    this.OnNumberOfRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfValidRecords' value.
        /// </summary>
        [DataMember()]
        public int NumberOfValidRecords
        {
            get
            {
                return this._numberOfValidRecords;
            }
            set
            {
                if ((this._numberOfValidRecords != value))
                {
                    this.OnNumberOfValidRecordsChanging(value);
                    this.RaiseDataMemberChanging("NumberOfValidRecords");
                    this.ValidateProperty("NumberOfValidRecords", value);
                    this._numberOfValidRecords = value;
                    this.RaiseDataMemberChanged("NumberOfValidRecords");
                    this.OnNumberOfValidRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfWarningRecords' value.
        /// </summary>
        [DataMember()]
        public int NumberOfWarningRecords
        {
            get
            {
                return this._numberOfWarningRecords;
            }
            set
            {
                if ((this._numberOfWarningRecords != value))
                {
                    this.OnNumberOfWarningRecordsChanging(value);
                    this.RaiseDataMemberChanging("NumberOfWarningRecords");
                    this.ValidateProperty("NumberOfWarningRecords", value);
                    this._numberOfWarningRecords = value;
                    this.RaiseDataMemberChanged("NumberOfWarningRecords");
                    this.OnNumberOfWarningRecordsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProviderOrganisationKeyValue' value.
        /// </summary>
        [DataMember()]
        public string ProviderOrganisationKeyValue
        {
            get
            {
                return this._providerOrganisationKeyValue;
            }
            set
            {
                if ((this._providerOrganisationKeyValue != value))
                {
                    this.OnProviderOrganisationKeyValueChanging(value);
                    this.RaiseDataMemberChanging("ProviderOrganisationKeyValue");
                    this.ValidateProperty("ProviderOrganisationKeyValue", value);
                    this._providerOrganisationKeyValue = value;
                    this.RaiseDataMemberChanged("ProviderOrganisationKeyValue");
                    this.OnProviderOrganisationKeyValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ProviderOrganisation"/> entity instances.
        /// </summary>
        [Association("FK_ProviderOrganisation_InputFileHistory", "Code", "CurrentValidatedFileCode")]
        public EntityCollection<ProviderOrganisation> ProviderOrganisations
        {
            get
            {
                if ((this._providerOrganisations == null))
                {
                    this._providerOrganisations = new EntityCollection<ProviderOrganisation>(this, "ProviderOrganisations", this.FilterProviderOrganisations, this.AttachProviderOrganisations, this.DetachProviderOrganisations);
                }
                return this._providerOrganisations;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransferDate' value.
        /// </summary>
        [DataMember()]
        public DateTime TransferDate
        {
            get
            {
                return this._transferDate;
            }
            set
            {
                if ((this._transferDate != value))
                {
                    this.OnTransferDateChanging(value);
                    this.RaiseDataMemberChanging("TransferDate");
                    this.ValidateProperty("TransferDate", value);
                    this._transferDate = value;
                    this.RaiseDataMemberChanged("TransferDate");
                    this.OnTransferDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UploadDecision' value.
        /// </summary>
        [DataMember()]
        public int UploadDecision
        {
            get
            {
                return this._uploadDecision;
            }
            set
            {
                if ((this._uploadDecision != value))
                {
                    this.OnUploadDecisionChanging(value);
                    this.RaiseDataMemberChanging("UploadDecision");
                    this.ValidateProperty("UploadDecision", value);
                    this._uploadDecision = value;
                    this.RaiseDataMemberChanged("UploadDecision");
                    this.OnUploadDecisionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UploadMonitor"/> entity instances.
        /// </summary>
        [Association("FK_UploadMonitor_InputFileHistory", "Code", "InputFileCode")]
        public EntityCollection<UploadMonitor> UploadMonitors
        {
            get
            {
                if ((this._uploadMonitors == null))
                {
                    this._uploadMonitors = new EntityCollection<UploadMonitor>(this, "UploadMonitors", this.FilterUploadMonitors, this.AttachUploadMonitors, this.DetachUploadMonitors);
                }
                return this._uploadMonitors;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ValidatedLoadDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ValidatedLoadDate
        {
            get
            {
                return this._validatedLoadDate;
            }
            set
            {
                if ((this._validatedLoadDate != value))
                {
                    this.OnValidatedLoadDateChanging(value);
                    this.RaiseDataMemberChanging("ValidatedLoadDate");
                    this.ValidateProperty("ValidatedLoadDate", value);
                    this._validatedLoadDate = value;
                    this.RaiseDataMemberChanged("ValidatedLoadDate");
                    this.OnValidatedLoadDateChanged();
                }
            }
        }
        
        private void AttachInputFileErrors(InputFileError entity)
        {
            entity.InputFileHistory = this;
        }
        
        private void DetachInputFileErrors(InputFileError entity)
        {
            entity.InputFileHistory = null;
        }
        
        private bool FilterInputFileErrors(InputFileError entity)
        {
            return (entity.InputFileHistoryCode == this.Code);
        }
        
        private void AttachProviderOrganisations(ProviderOrganisation entity)
        {
            entity.InputFileHistory = this;
        }
        
        private void DetachProviderOrganisations(ProviderOrganisation entity)
        {
            entity.InputFileHistory = null;
        }
        
        private bool FilterProviderOrganisations(ProviderOrganisation entity)
        {
            return (entity.CurrentValidatedFileCode == this.Code);
        }
        
        private void AttachUploadMonitors(UploadMonitor entity)
        {
            entity.InputFileHistory = this;
        }
        
        private void DetachUploadMonitors(UploadMonitor entity)
        {
            entity.InputFileHistory = null;
        }
        
        private bool FilterUploadMonitors(UploadMonitor entity)
        {
            return (entity.InputFileCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'MCRole' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class MCRole : Entity
    {
        
        private Guid _code;
        
        private string _name;
        
        private byte[] _rowIdentifier;
        
        private EntityCollection<MCUserRole> _userRoles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MCRole"/> class.
        /// </summary>
        public MCRole()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MCUserRole"/> entity instances.
        /// </summary>
        [Association("FK_UserRole_Role", "Code", "RoleCode")]
        public EntityCollection<MCUserRole> UserRoles
        {
            get
            {
                if ((this._userRoles == null))
                {
                    this._userRoles = new EntityCollection<MCUserRole>(this, "UserRoles", this.FilterUserRoles, this.AttachUserRoles, this.DetachUserRoles);
                }
                return this._userRoles;
            }
        }
        
        private void AttachUserRoles(MCUserRole entity)
        {
            entity.Role = this;
        }
        
        private void DetachUserRoles(MCUserRole entity)
        {
            entity.Role = null;
        }
        
        private bool FilterUserRoles(MCUserRole entity)
        {
            return (entity.RoleCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'MCUser' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class MCUser : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private EntityCollection<AlertUser> _alertUsers;
        
        private Guid _code;
        
        private string _email;
        
        private string _forename;
        
        private string _name = string.Empty;
        
        private string _password;
        
        private IEnumerable<string> _roles;
        
        private byte[] _rowIdentifier;
        
        private string _surname;
        
        private EntityCollection<UserReportGroup> _userReportGroups;
        
        private EntityCollection<MCUserRole> _userRoles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnForenameChanging(string value);
        partial void OnForenameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSurnameChanging(string value);
        partial void OnSurnameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MCUser"/> class.
        /// </summary>
        public MCUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="AlertUser"/> entity instances.
        /// </summary>
        [Association("FK_AlertUser_User", "Code", "UserCode")]
        public EntityCollection<AlertUser> AlertUsers
        {
            get
            {
                if ((this._alertUsers == null))
                {
                    this._alertUsers = new EntityCollection<AlertUser>(this, "AlertUsers", this.FilterAlertUsers, this.AttachAlertUsers, this.DetachAlertUsers);
                }
                return this._alertUsers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Forename' value.
        /// </summary>
        [DataMember()]
        public string Forename
        {
            get
            {
                return this._forename;
            }
            set
            {
                if ((this._forename != value))
                {
                    this.OnForenameChanging(value);
                    this.RaiseDataMemberChanging("Forename");
                    this.ValidateProperty("Forename", value);
                    this._forename = value;
                    this.RaiseDataMemberChanged("Forename");
                    this.OnForenameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.RaiseDataMemberChanging("Roles");
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaiseDataMemberChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Surname' value.
        /// </summary>
        [DataMember()]
        public string Surname
        {
            get
            {
                return this._surname;
            }
            set
            {
                if ((this._surname != value))
                {
                    this.OnSurnameChanging(value);
                    this.RaiseDataMemberChanging("Surname");
                    this.ValidateProperty("Surname", value);
                    this._surname = value;
                    this.RaiseDataMemberChanged("Surname");
                    this.OnSurnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserReportGroup"/> entity instances.
        /// </summary>
        [Association("FK_UserReportGroup_User", "Code", "UserCode")]
        public EntityCollection<UserReportGroup> UserReportGroups
        {
            get
            {
                if ((this._userReportGroups == null))
                {
                    this._userReportGroups = new EntityCollection<UserReportGroup>(this, "UserReportGroups", this.FilterUserReportGroups, this.AttachUserReportGroups, this.DetachUserReportGroups);
                }
                return this._userReportGroups;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MCUserRole"/> entity instances.
        /// </summary>
        [Association("FK_UserRole_User", "Code", "UserCode")]
        public EntityCollection<MCUserRole> UserRoles
        {
            get
            {
                if ((this._userRoles == null))
                {
                    this._userRoles = new EntityCollection<MCUserRole>(this, "UserRoles", this.FilterUserRoles, this.AttachUserRoles, this.DetachUserRoles);
                }
                return this._userRoles;
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        private void AttachAlertUsers(AlertUser entity)
        {
            entity.User = this;
        }
        
        private void DetachAlertUsers(AlertUser entity)
        {
            entity.User = null;
        }
        
        private bool FilterAlertUsers(AlertUser entity)
        {
            return (entity.UserCode == this.Code);
        }
        
        private void AttachUserReportGroups(UserReportGroup entity)
        {
            entity.User = this;
        }
        
        private void DetachUserReportGroups(UserReportGroup entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserReportGroups(UserReportGroup entity)
        {
            return (entity.UserCode == this.Code);
        }
        
        private void AttachUserRoles(MCUserRole entity)
        {
            entity.User = this;
        }
        
        private void DetachUserRoles(MCUserRole entity)
        {
            entity.User = null;
        }
        
        private bool FilterUserRoles(MCUserRole entity)
        {
            return (entity.UserCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._name == null))
            {
                return null;
            }
            return EntityKey.Create(this._code, this._name);
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The 'MCUserRole' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class MCUserRole : Entity
    {
        
        private Guid _code;
        
        private EntityRef<MCRole> _role;
        
        private Guid _roleCode;
        
        private byte[] _rowIdentifier;
        
        private EntityRef<MCUser> _user;
        
        private Guid _userCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnRoleCodeChanging(Guid value);
        partial void OnRoleCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnUserCodeChanging(Guid value);
        partial void OnUserCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MCUserRole"/> class.
        /// </summary>
        public MCUserRole()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MCRole"/> entity.
        /// </summary>
        [Association("FK_UserRole_Role", "RoleCode", "Code", IsForeignKey=true)]
        public MCRole Role
        {
            get
            {
                if ((this._role == null))
                {
                    this._role = new EntityRef<MCRole>(this, "Role", this.FilterRole);
                }
                return this._role.Entity;
            }
            set
            {
                MCRole previous = this.Role;
                if ((previous != value))
                {
                    this.ValidateProperty("Role", value);
                    if ((previous != null))
                    {
                        this._role.Entity = null;
                        previous.UserRoles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RoleCode = value.Code;
                    }
                    else
                    {
                        this.RoleCode = default(Guid);
                    }
                    this._role.Entity = value;
                    if ((value != null))
                    {
                        value.UserRoles.Add(this);
                    }
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RoleCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid RoleCode
        {
            get
            {
                return this._roleCode;
            }
            set
            {
                if ((this._roleCode != value))
                {
                    this.OnRoleCodeChanging(value);
                    this.RaiseDataMemberChanging("RoleCode");
                    this.ValidateProperty("RoleCode", value);
                    this._roleCode = value;
                    this.RaiseDataMemberChanged("RoleCode");
                    this.OnRoleCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MCUser"/> entity.
        /// </summary>
        [Association("FK_UserRole_User", "UserCode", "Code", IsForeignKey=true)]
        public MCUser User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<MCUser>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                MCUser previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserRoles.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserCode = value.Code;
                    }
                    else
                    {
                        this.UserCode = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserRoles.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserCode
        {
            get
            {
                return this._userCode;
            }
            set
            {
                if ((this._userCode != value))
                {
                    this.OnUserCodeChanging(value);
                    this.RaiseDataMemberChanging("UserCode");
                    this.ValidateProperty("UserCode", value);
                    this._userCode = value;
                    this.RaiseDataMemberChanged("UserCode");
                    this.OnUserCodeChanged();
                }
            }
        }
        
        private bool FilterRole(MCRole entity)
        {
            return (entity.Code == this.RoleCode);
        }
        
        private bool FilterUser(MCUser entity)
        {
            return (entity.Code == this.UserCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'ProviderOrganisation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ProviderOrganisation : Entity
    {
        
        private Guid _code;
        
        private Nullable<Guid> _currentValidatedFileCode;
        
        private string _fileType;
        
        private int _id;
        
        private EntityRef<InputFileHistory> _inputFileHistory;
        
        private string _keyValue;
        
        private string _name;
        
        private string _regionID;
        
        private byte[] _rowIdentifier;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnCurrentValidatedFileCodeChanging(Nullable<Guid> value);
        partial void OnCurrentValidatedFileCodeChanged();
        partial void OnFileTypeChanging(string value);
        partial void OnFileTypeChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnKeyValueChanging(string value);
        partial void OnKeyValueChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRegionIDChanging(string value);
        partial void OnRegionIDChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderOrganisation"/> class.
        /// </summary>
        public ProviderOrganisation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentValidatedFileCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> CurrentValidatedFileCode
        {
            get
            {
                return this._currentValidatedFileCode;
            }
            set
            {
                if ((this._currentValidatedFileCode != value))
                {
                    this.OnCurrentValidatedFileCodeChanging(value);
                    this.RaiseDataMemberChanging("CurrentValidatedFileCode");
                    this.ValidateProperty("CurrentValidatedFileCode", value);
                    this._currentValidatedFileCode = value;
                    this.RaiseDataMemberChanged("CurrentValidatedFileCode");
                    this.OnCurrentValidatedFileCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileType' value.
        /// </summary>
        [DataMember()]
        public string FileType
        {
            get
            {
                return this._fileType;
            }
            set
            {
                if ((this._fileType != value))
                {
                    this.OnFileTypeChanging(value);
                    this.RaiseDataMemberChanging("FileType");
                    this.ValidateProperty("FileType", value);
                    this._fileType = value;
                    this.RaiseDataMemberChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="InputFileHistory"/> entity.
        /// </summary>
        [Association("FK_ProviderOrganisation_InputFileHistory", "CurrentValidatedFileCode", "Code", IsForeignKey=true)]
        public InputFileHistory InputFileHistory
        {
            get
            {
                if ((this._inputFileHistory == null))
                {
                    this._inputFileHistory = new EntityRef<InputFileHistory>(this, "InputFileHistory", this.FilterInputFileHistory);
                }
                return this._inputFileHistory.Entity;
            }
            set
            {
                InputFileHistory previous = this.InputFileHistory;
                if ((previous != value))
                {
                    this.ValidateProperty("InputFileHistory", value);
                    if ((previous != null))
                    {
                        this._inputFileHistory.Entity = null;
                        previous.ProviderOrganisations.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CurrentValidatedFileCode = value.Code;
                    }
                    else
                    {
                        this.CurrentValidatedFileCode = default(Nullable<Guid>);
                    }
                    this._inputFileHistory.Entity = value;
                    if ((value != null))
                    {
                        value.ProviderOrganisations.Add(this);
                    }
                    this.RaisePropertyChanged("InputFileHistory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'KeyValue' value.
        /// </summary>
        [DataMember()]
        public string KeyValue
        {
            get
            {
                return this._keyValue;
            }
            set
            {
                if ((this._keyValue != value))
                {
                    this.OnKeyValueChanging(value);
                    this.RaiseDataMemberChanging("KeyValue");
                    this.ValidateProperty("KeyValue", value);
                    this._keyValue = value;
                    this.RaiseDataMemberChanged("KeyValue");
                    this.OnKeyValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionID' value.
        /// </summary>
        [DataMember()]
        public string RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.OnRegionIDChanging(value);
                    this.RaiseDataMemberChanging("RegionID");
                    this.ValidateProperty("RegionID", value);
                    this._regionID = value;
                    this.RaiseDataMemberChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        private bool FilterInputFileHistory(InputFileHistory entity)
        {
            return (entity.Code == this.CurrentValidatedFileCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'Report' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class Report : Entity
    {
        
        private Guid _code;
        
        private DateTime _creationDate;
        
        private string _creationUserID;
        
        private EntityRef<DataModel> _dataModel_1;
        
        private Nullable<Guid> _dataModelCode;
        
        private string _description;
        
        private Guid _groupCode;
        
        private bool _isAllowDrilldown;
        
        private Nullable<bool> _isDataMapDisplayed;
        
        private bool _isInitialExpanded;
        
        private bool _isMatrix;
        
        private Nullable<bool> _isOuterJoin;
        
        private bool _isPageOnFirstItem;
        
        private bool _isStandard;
        
        private Nullable<bool> _isSummaryReport;
        
        private DateTime _modifiedDate;
        
        private string _modifiedUserID;
        
        private string _name;
        
        private EntityCollection<ReportChart> _reportCharts;
        
        private EntityCollection<ReportDataTableJoin> _reportDataTableJoins;
        
        private EntityRef<ReportGroup> _reportGroup;
        
        private EntityCollection<ReportItem> _reportItems;
        
        private byte[] _rowIdentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnCreationDateChanging(DateTime value);
        partial void OnCreationDateChanged();
        partial void OnCreationUserIDChanging(string value);
        partial void OnCreationUserIDChanged();
        partial void OnDataModelCodeChanging(Nullable<Guid> value);
        partial void OnDataModelCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnGroupCodeChanging(Guid value);
        partial void OnGroupCodeChanged();
        partial void OnIsAllowDrilldownChanging(bool value);
        partial void OnIsAllowDrilldownChanged();
        partial void OnIsDataMapDisplayedChanging(Nullable<bool> value);
        partial void OnIsDataMapDisplayedChanged();
        partial void OnIsInitialExpandedChanging(bool value);
        partial void OnIsInitialExpandedChanged();
        partial void OnIsMatrixChanging(bool value);
        partial void OnIsMatrixChanged();
        partial void OnIsOuterJoinChanging(Nullable<bool> value);
        partial void OnIsOuterJoinChanged();
        partial void OnIsPageOnFirstItemChanging(bool value);
        partial void OnIsPageOnFirstItemChanged();
        partial void OnIsStandardChanging(bool value);
        partial void OnIsStandardChanged();
        partial void OnIsSummaryReportChanging(Nullable<bool> value);
        partial void OnIsSummaryReportChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnModifiedUserIDChanging(string value);
        partial void OnModifiedUserIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnGenerateReportInvoking();
        partial void OnGenerateReportInvoked();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Report"/> class.
        /// </summary>
        public Report()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreationDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                if ((this._creationDate != value))
                {
                    this.OnCreationDateChanging(value);
                    this.RaiseDataMemberChanging("CreationDate");
                    this.ValidateProperty("CreationDate", value);
                    this._creationDate = value;
                    this.RaiseDataMemberChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreationUserID' value.
        /// </summary>
        [DataMember()]
        public string CreationUserID
        {
            get
            {
                return this._creationUserID;
            }
            set
            {
                if ((this._creationUserID != value))
                {
                    this.OnCreationUserIDChanging(value);
                    this.RaiseDataMemberChanging("CreationUserID");
                    this.ValidateProperty("CreationUserID", value);
                    this._creationUserID = value;
                    this.RaiseDataMemberChanged("CreationUserID");
                    this.OnCreationUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataModel"/> entity.
        /// </summary>
        [Association("FK_Report_DataModel1", "DataModelCode", "Code", IsForeignKey=true)]
        public DataModel DataModel_1
        {
            get
            {
                if ((this._dataModel_1 == null))
                {
                    this._dataModel_1 = new EntityRef<DataModel>(this, "DataModel_1", this.FilterDataModel_1);
                }
                return this._dataModel_1.Entity;
            }
            set
            {
                DataModel previous = this.DataModel_1;
                if ((previous != value))
                {
                    this.ValidateProperty("DataModel_1", value);
                    if ((previous != null))
                    {
                        this._dataModel_1.Entity = null;
                        previous.Reports_1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataModelCode = value.Code;
                    }
                    else
                    {
                        this.DataModelCode = default(Nullable<Guid>);
                    }
                    this._dataModel_1.Entity = value;
                    if ((value != null))
                    {
                        value.Reports_1.Add(this);
                    }
                    this.RaisePropertyChanged("DataModel_1");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataModelCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> DataModelCode
        {
            get
            {
                return this._dataModelCode;
            }
            set
            {
                if ((this._dataModelCode != value))
                {
                    this.OnDataModelCodeChanging(value);
                    this.RaiseDataMemberChanging("DataModelCode");
                    this.ValidateProperty("DataModelCode", value);
                    this._dataModelCode = value;
                    this.RaiseDataMemberChanged("DataModelCode");
                    this.OnDataModelCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid GroupCode
        {
            get
            {
                return this._groupCode;
            }
            set
            {
                if ((this._groupCode != value))
                {
                    this.OnGroupCodeChanging(value);
                    this.RaiseDataMemberChanging("GroupCode");
                    this.ValidateProperty("GroupCode", value);
                    this._groupCode = value;
                    this.RaiseDataMemberChanged("GroupCode");
                    this.OnGroupCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsAllowDrilldown' value.
        /// </summary>
        [DataMember()]
        public bool IsAllowDrilldown
        {
            get
            {
                return this._isAllowDrilldown;
            }
            set
            {
                if ((this._isAllowDrilldown != value))
                {
                    this.OnIsAllowDrilldownChanging(value);
                    this.RaiseDataMemberChanging("IsAllowDrilldown");
                    this.ValidateProperty("IsAllowDrilldown", value);
                    this._isAllowDrilldown = value;
                    this.RaiseDataMemberChanged("IsAllowDrilldown");
                    this.OnIsAllowDrilldownChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDataMapDisplayed' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDataMapDisplayed
        {
            get
            {
                return this._isDataMapDisplayed;
            }
            set
            {
                if ((this._isDataMapDisplayed != value))
                {
                    this.OnIsDataMapDisplayedChanging(value);
                    this.RaiseDataMemberChanging("IsDataMapDisplayed");
                    this.ValidateProperty("IsDataMapDisplayed", value);
                    this._isDataMapDisplayed = value;
                    this.RaiseDataMemberChanged("IsDataMapDisplayed");
                    this.OnIsDataMapDisplayedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsInitialExpanded' value.
        /// </summary>
        [DataMember()]
        public bool IsInitialExpanded
        {
            get
            {
                return this._isInitialExpanded;
            }
            set
            {
                if ((this._isInitialExpanded != value))
                {
                    this.OnIsInitialExpandedChanging(value);
                    this.RaiseDataMemberChanging("IsInitialExpanded");
                    this.ValidateProperty("IsInitialExpanded", value);
                    this._isInitialExpanded = value;
                    this.RaiseDataMemberChanged("IsInitialExpanded");
                    this.OnIsInitialExpandedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsMatrix' value.
        /// </summary>
        [DataMember()]
        public bool IsMatrix
        {
            get
            {
                return this._isMatrix;
            }
            set
            {
                if ((this._isMatrix != value))
                {
                    this.OnIsMatrixChanging(value);
                    this.RaiseDataMemberChanging("IsMatrix");
                    this.ValidateProperty("IsMatrix", value);
                    this._isMatrix = value;
                    this.RaiseDataMemberChanged("IsMatrix");
                    this.OnIsMatrixChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOuterJoin' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsOuterJoin
        {
            get
            {
                return this._isOuterJoin;
            }
            set
            {
                if ((this._isOuterJoin != value))
                {
                    this.OnIsOuterJoinChanging(value);
                    this.RaiseDataMemberChanging("IsOuterJoin");
                    this.ValidateProperty("IsOuterJoin", value);
                    this._isOuterJoin = value;
                    this.RaiseDataMemberChanged("IsOuterJoin");
                    this.OnIsOuterJoinChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsPageOnFirstItem' value.
        /// </summary>
        [DataMember()]
        public bool IsPageOnFirstItem
        {
            get
            {
                return this._isPageOnFirstItem;
            }
            set
            {
                if ((this._isPageOnFirstItem != value))
                {
                    this.OnIsPageOnFirstItemChanging(value);
                    this.RaiseDataMemberChanging("IsPageOnFirstItem");
                    this.ValidateProperty("IsPageOnFirstItem", value);
                    this._isPageOnFirstItem = value;
                    this.RaiseDataMemberChanged("IsPageOnFirstItem");
                    this.OnIsPageOnFirstItemChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsStandard' value.
        /// </summary>
        [DataMember()]
        public bool IsStandard
        {
            get
            {
                return this._isStandard;
            }
            set
            {
                if ((this._isStandard != value))
                {
                    this.OnIsStandardChanging(value);
                    this.RaiseDataMemberChanging("IsStandard");
                    this.ValidateProperty("IsStandard", value);
                    this._isStandard = value;
                    this.RaiseDataMemberChanged("IsStandard");
                    this.OnIsStandardChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsSummaryReport' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsSummaryReport
        {
            get
            {
                return this._isSummaryReport;
            }
            set
            {
                if ((this._isSummaryReport != value))
                {
                    this.OnIsSummaryReportChanging(value);
                    this.RaiseDataMemberChanging("IsSummaryReport");
                    this.ValidateProperty("IsSummaryReport", value);
                    this._isSummaryReport = value;
                    this.RaiseDataMemberChanged("IsSummaryReport");
                    this.OnIsSummaryReportChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedUserID' value.
        /// </summary>
        [DataMember()]
        public string ModifiedUserID
        {
            get
            {
                return this._modifiedUserID;
            }
            set
            {
                if ((this._modifiedUserID != value))
                {
                    this.OnModifiedUserIDChanging(value);
                    this.RaiseDataMemberChanging("ModifiedUserID");
                    this.ValidateProperty("ModifiedUserID", value);
                    this._modifiedUserID = value;
                    this.RaiseDataMemberChanged("ModifiedUserID");
                    this.OnModifiedUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportChart"/> entity instances.
        /// </summary>
        [Association("FK_ReportChart_Report", "Code", "ReportCode")]
        public EntityCollection<ReportChart> ReportCharts
        {
            get
            {
                if ((this._reportCharts == null))
                {
                    this._reportCharts = new EntityCollection<ReportChart>(this, "ReportCharts", this.FilterReportCharts, this.AttachReportCharts, this.DetachReportCharts);
                }
                return this._reportCharts;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportDataTableJoin"/> entity instances.
        /// </summary>
        [Association("FK_ReportDataTableJoin_Report", "Code", "ReportCode")]
        public EntityCollection<ReportDataTableJoin> ReportDataTableJoins
        {
            get
            {
                if ((this._reportDataTableJoins == null))
                {
                    this._reportDataTableJoins = new EntityCollection<ReportDataTableJoin>(this, "ReportDataTableJoins", this.FilterReportDataTableJoins, this.AttachReportDataTableJoins, this.DetachReportDataTableJoins);
                }
                return this._reportDataTableJoins;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportGroup"/> entity.
        /// </summary>
        [Association("FK_Report_ReportGroup", "GroupCode", "Code", IsForeignKey=true)]
        public ReportGroup ReportGroup
        {
            get
            {
                if ((this._reportGroup == null))
                {
                    this._reportGroup = new EntityRef<ReportGroup>(this, "ReportGroup", this.FilterReportGroup);
                }
                return this._reportGroup.Entity;
            }
            set
            {
                ReportGroup previous = this.ReportGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportGroup", value);
                    if ((previous != null))
                    {
                        this._reportGroup.Entity = null;
                        previous.Reports.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GroupCode = value.Code;
                    }
                    else
                    {
                        this.GroupCode = default(Guid);
                    }
                    this._reportGroup.Entity = value;
                    if ((value != null))
                    {
                        value.Reports.Add(this);
                    }
                    this.RaisePropertyChanged("ReportGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportItem"/> entity instances.
        /// </summary>
        [Association("FK_ReportItem_Report", "Code", "ReportCode")]
        public EntityCollection<ReportItem> ReportItems
        {
            get
            {
                if ((this._reportItems == null))
                {
                    this._reportItems = new EntityCollection<ReportItem>(this, "ReportItems", this.FilterReportItems, this.AttachReportItems, this.DetachReportItems);
                }
                return this._reportItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'GenerateReport' action has been invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool IsGenerateReportInvoked
        {
            get
            {
                return base.IsActionInvoked("GenerateReport");
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the 'GenerateReport' method can be invoked on this entity.
        /// </summary>
        [Display(AutoGenerateField=false)]
        public bool CanGenerateReport
        {
            get
            {
                return base.CanInvokeAction("GenerateReport");
            }
        }
        
        private bool FilterDataModel_1(DataModel entity)
        {
            return (entity.Code == this.DataModelCode);
        }
        
        private void AttachReportCharts(ReportChart entity)
        {
            entity.Report = this;
        }
        
        private void DetachReportCharts(ReportChart entity)
        {
            entity.Report = null;
        }
        
        private bool FilterReportCharts(ReportChart entity)
        {
            return (entity.ReportCode == this.Code);
        }
        
        private void AttachReportDataTableJoins(ReportDataTableJoin entity)
        {
            entity.Report = this;
        }
        
        private void DetachReportDataTableJoins(ReportDataTableJoin entity)
        {
            entity.Report = null;
        }
        
        private bool FilterReportDataTableJoins(ReportDataTableJoin entity)
        {
            return (entity.ReportCode == this.Code);
        }
        
        private bool FilterReportGroup(ReportGroup entity)
        {
            return (entity.Code == this.GroupCode);
        }
        
        private void AttachReportItems(ReportItem entity)
        {
            entity.Report = this;
        }
        
        private void DetachReportItems(ReportItem entity)
        {
            entity.Report = null;
        }
        
        private bool FilterReportItems(ReportItem entity)
        {
            return (entity.ReportCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
        
        /// <summary>
        /// Invokes the 'GenerateReport' action on this entity.
        /// </summary>
        public void GenerateReport()
        {
            this.OnGenerateReportInvoking();
            base.InvokeAction("GenerateReport");
            this.OnGenerateReportInvoked();
        }
        
        protected override void OnActionStateChanged()
        {
            base.UpdateActionState("GenerateReport", "CanGenerateReport", "IsGenerateReportInvoked");
        }
    }
    
    /// <summary>
    /// The 'ReportCategory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ReportCategory : Entity
    {
        
        private Guid _code;
        
        private string _description;
        
        private bool _isActive;
        
        private byte[] _rowIdentifier;
        
        private EntityCollection<StandardReport> _standardReports;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCategory"/> class.
        /// </summary>
        public ReportCategory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="StandardReport"/> entity instances.
        /// </summary>
        [Association("FK_StandardReport_ReportCategory", "Code", "ReportCategoryCode")]
        public EntityCollection<StandardReport> StandardReports
        {
            get
            {
                if ((this._standardReports == null))
                {
                    this._standardReports = new EntityCollection<StandardReport>(this, "StandardReports", this.FilterStandardReports, this.AttachStandardReports, this.DetachStandardReports);
                }
                return this._standardReports;
            }
        }
        
        private void AttachStandardReports(StandardReport entity)
        {
            entity.ReportCategory = this;
        }
        
        private void DetachStandardReports(StandardReport entity)
        {
            entity.ReportCategory = null;
        }
        
        private bool FilterStandardReports(StandardReport entity)
        {
            return (entity.ReportCategoryCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'ReportChart' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ReportChart : Entity
    {
        
        private Guid _categoryReportItemCode;
        
        private string _chartStyle;
        
        private string _chartType;
        
        private Guid _code;
        
        private string _description;
        
        private EntityRef<Report> _report;
        
        private EntityCollection<ReportChartSery> _reportChartSeries;
        
        private Guid _reportCode;
        
        private EntityRef<ReportItem> _reportItem;
        
        private byte[] _rowIdentifier;
        
        private int _sortOrder;
        
        private string _title;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryReportItemCodeChanging(Guid value);
        partial void OnCategoryReportItemCodeChanged();
        partial void OnChartStyleChanging(string value);
        partial void OnChartStyleChanged();
        partial void OnChartTypeChanging(string value);
        partial void OnChartTypeChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnReportCodeChanging(Guid value);
        partial void OnReportCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportChart"/> class.
        /// </summary>
        public ReportChart()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryReportItemCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid CategoryReportItemCode
        {
            get
            {
                return this._categoryReportItemCode;
            }
            set
            {
                if ((this._categoryReportItemCode != value))
                {
                    this.OnCategoryReportItemCodeChanging(value);
                    this.RaiseDataMemberChanging("CategoryReportItemCode");
                    this.ValidateProperty("CategoryReportItemCode", value);
                    this._categoryReportItemCode = value;
                    this.RaiseDataMemberChanged("CategoryReportItemCode");
                    this.OnCategoryReportItemCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChartStyle' value.
        /// </summary>
        [DataMember()]
        public string ChartStyle
        {
            get
            {
                return this._chartStyle;
            }
            set
            {
                if ((this._chartStyle != value))
                {
                    this.OnChartStyleChanging(value);
                    this.RaiseDataMemberChanging("ChartStyle");
                    this.ValidateProperty("ChartStyle", value);
                    this._chartStyle = value;
                    this.RaiseDataMemberChanged("ChartStyle");
                    this.OnChartStyleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChartType' value.
        /// </summary>
        [DataMember()]
        public string ChartType
        {
            get
            {
                return this._chartType;
            }
            set
            {
                if ((this._chartType != value))
                {
                    this.OnChartTypeChanging(value);
                    this.RaiseDataMemberChanging("ChartType");
                    this.ValidateProperty("ChartType", value);
                    this._chartType = value;
                    this.RaiseDataMemberChanged("ChartType");
                    this.OnChartTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Report"/> entity.
        /// </summary>
        [Association("FK_ReportChart_Report", "ReportCode", "Code", IsForeignKey=true)]
        public Report Report
        {
            get
            {
                if ((this._report == null))
                {
                    this._report = new EntityRef<Report>(this, "Report", this.FilterReport);
                }
                return this._report.Entity;
            }
            set
            {
                Report previous = this.Report;
                if ((previous != value))
                {
                    this.ValidateProperty("Report", value);
                    if ((previous != null))
                    {
                        this._report.Entity = null;
                        previous.ReportCharts.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportCode = value.Code;
                    }
                    else
                    {
                        this.ReportCode = default(Guid);
                    }
                    this._report.Entity = value;
                    if ((value != null))
                    {
                        value.ReportCharts.Add(this);
                    }
                    this.RaisePropertyChanged("Report");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportChartSery"/> entity instances.
        /// </summary>
        [Association("FK_ReportChartSeries_ReportChart", "Code", "ReportChartCode")]
        public EntityCollection<ReportChartSery> ReportChartSeries
        {
            get
            {
                if ((this._reportChartSeries == null))
                {
                    this._reportChartSeries = new EntityCollection<ReportChartSery>(this, "ReportChartSeries", this.FilterReportChartSeries, this.AttachReportChartSeries, this.DetachReportChartSeries);
                }
                return this._reportChartSeries;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportCode
        {
            get
            {
                return this._reportCode;
            }
            set
            {
                if ((this._reportCode != value))
                {
                    this.OnReportCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportCode");
                    this.ValidateProperty("ReportCode", value);
                    this._reportCode = value;
                    this.RaiseDataMemberChanged("ReportCode");
                    this.OnReportCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportItem"/> entity.
        /// </summary>
        [Association("FK_ReportChart_ReportItem", "CategoryReportItemCode", "Code", IsForeignKey=true)]
        public ReportItem ReportItem
        {
            get
            {
                if ((this._reportItem == null))
                {
                    this._reportItem = new EntityRef<ReportItem>(this, "ReportItem", this.FilterReportItem);
                }
                return this._reportItem.Entity;
            }
            set
            {
                ReportItem previous = this.ReportItem;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportItem", value);
                    if ((previous != null))
                    {
                        this._reportItem.Entity = null;
                        previous.ReportCharts.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryReportItemCode = value.Code;
                    }
                    else
                    {
                        this.CategoryReportItemCode = default(Guid);
                    }
                    this._reportItem.Entity = value;
                    if ((value != null))
                    {
                        value.ReportCharts.Add(this);
                    }
                    this.RaisePropertyChanged("ReportItem");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        private bool FilterReport(Report entity)
        {
            return (entity.Code == this.ReportCode);
        }
        
        private void AttachReportChartSeries(ReportChartSery entity)
        {
            entity.ReportChart = this;
        }
        
        private void DetachReportChartSeries(ReportChartSery entity)
        {
            entity.ReportChart = null;
        }
        
        private bool FilterReportChartSeries(ReportChartSery entity)
        {
            return (entity.ReportChartCode == this.Code);
        }
        
        private bool FilterReportItem(ReportItem entity)
        {
            return (entity.Code == this.CategoryReportItemCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'ReportChartSery' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ReportChartSery : Entity
    {
        
        private Guid _code;
        
        private EntityRef<ReportChart> _reportChart;
        
        private Guid _reportChartCode;
        
        private EntityRef<ReportItem> _reportItem;
        
        private byte[] _rowIdentifier;
        
        private Guid _seriesReportItemCode;
        
        private int _sortOrder;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnReportChartCodeChanging(Guid value);
        partial void OnReportChartCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSeriesReportItemCodeChanging(Guid value);
        partial void OnSeriesReportItemCodeChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportChartSery"/> class.
        /// </summary>
        public ReportChartSery()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportChart"/> entity.
        /// </summary>
        [Association("FK_ReportChartSeries_ReportChart", "ReportChartCode", "Code", IsForeignKey=true)]
        public ReportChart ReportChart
        {
            get
            {
                if ((this._reportChart == null))
                {
                    this._reportChart = new EntityRef<ReportChart>(this, "ReportChart", this.FilterReportChart);
                }
                return this._reportChart.Entity;
            }
            set
            {
                ReportChart previous = this.ReportChart;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportChart", value);
                    if ((previous != null))
                    {
                        this._reportChart.Entity = null;
                        previous.ReportChartSeries.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportChartCode = value.Code;
                    }
                    else
                    {
                        this.ReportChartCode = default(Guid);
                    }
                    this._reportChart.Entity = value;
                    if ((value != null))
                    {
                        value.ReportChartSeries.Add(this);
                    }
                    this.RaisePropertyChanged("ReportChart");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportChartCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportChartCode
        {
            get
            {
                return this._reportChartCode;
            }
            set
            {
                if ((this._reportChartCode != value))
                {
                    this.OnReportChartCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportChartCode");
                    this.ValidateProperty("ReportChartCode", value);
                    this._reportChartCode = value;
                    this.RaiseDataMemberChanged("ReportChartCode");
                    this.OnReportChartCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportItem"/> entity.
        /// </summary>
        [Association("FK_ReportChartSeries_ReportItem", "SeriesReportItemCode", "Code", IsForeignKey=true)]
        public ReportItem ReportItem
        {
            get
            {
                if ((this._reportItem == null))
                {
                    this._reportItem = new EntityRef<ReportItem>(this, "ReportItem", this.FilterReportItem);
                }
                return this._reportItem.Entity;
            }
            set
            {
                ReportItem previous = this.ReportItem;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportItem", value);
                    if ((previous != null))
                    {
                        this._reportItem.Entity = null;
                        previous.ReportChartSeries.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SeriesReportItemCode = value.Code;
                    }
                    else
                    {
                        this.SeriesReportItemCode = default(Guid);
                    }
                    this._reportItem.Entity = value;
                    if ((value != null))
                    {
                        value.ReportChartSeries.Add(this);
                    }
                    this.RaisePropertyChanged("ReportItem");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SeriesReportItemCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid SeriesReportItemCode
        {
            get
            {
                return this._seriesReportItemCode;
            }
            set
            {
                if ((this._seriesReportItemCode != value))
                {
                    this.OnSeriesReportItemCodeChanging(value);
                    this.RaiseDataMemberChanging("SeriesReportItemCode");
                    this.ValidateProperty("SeriesReportItemCode", value);
                    this._seriesReportItemCode = value;
                    this.RaiseDataMemberChanged("SeriesReportItemCode");
                    this.OnSeriesReportItemCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        private bool FilterReportChart(ReportChart entity)
        {
            return (entity.Code == this.ReportChartCode);
        }
        
        private bool FilterReportItem(ReportItem entity)
        {
            return (entity.Code == this.SeriesReportItemCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'ReportDataTableJoin' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ReportDataTableJoin : Entity
    {
        
        private Guid _code;
        
        private EntityRef<DataTableJoin> _dataTableJoin;
        
        private Guid _dataTableJoinCode;
        
        private string _joinType;
        
        private EntityRef<Report> _report;
        
        private Guid _reportCode;
        
        private byte[] _rowIdentifier;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataTableJoinCodeChanging(Guid value);
        partial void OnDataTableJoinCodeChanged();
        partial void OnJoinTypeChanging(string value);
        partial void OnJoinTypeChanged();
        partial void OnReportCodeChanging(Guid value);
        partial void OnReportCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportDataTableJoin"/> class.
        /// </summary>
        public ReportDataTableJoin()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataTableJoin"/> entity.
        /// </summary>
        [Association("FK_ReportDataTableJoin_DataTableJoin", "DataTableJoinCode", "Code", IsForeignKey=true)]
        public DataTableJoin DataTableJoin
        {
            get
            {
                if ((this._dataTableJoin == null))
                {
                    this._dataTableJoin = new EntityRef<DataTableJoin>(this, "DataTableJoin", this.FilterDataTableJoin);
                }
                return this._dataTableJoin.Entity;
            }
            set
            {
                DataTableJoin previous = this.DataTableJoin;
                if ((previous != value))
                {
                    this.ValidateProperty("DataTableJoin", value);
                    if ((previous != null))
                    {
                        this._dataTableJoin.Entity = null;
                        previous.ReportDataTableJoins.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataTableJoinCode = value.Code;
                    }
                    else
                    {
                        this.DataTableJoinCode = default(Guid);
                    }
                    this._dataTableJoin.Entity = value;
                    if ((value != null))
                    {
                        value.ReportDataTableJoins.Add(this);
                    }
                    this.RaisePropertyChanged("DataTableJoin");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataTableJoinCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataTableJoinCode
        {
            get
            {
                return this._dataTableJoinCode;
            }
            set
            {
                if ((this._dataTableJoinCode != value))
                {
                    this.OnDataTableJoinCodeChanging(value);
                    this.RaiseDataMemberChanging("DataTableJoinCode");
                    this.ValidateProperty("DataTableJoinCode", value);
                    this._dataTableJoinCode = value;
                    this.RaiseDataMemberChanged("DataTableJoinCode");
                    this.OnDataTableJoinCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JoinType' value.
        /// </summary>
        [DataMember()]
        public string JoinType
        {
            get
            {
                return this._joinType;
            }
            set
            {
                if ((this._joinType != value))
                {
                    this.OnJoinTypeChanging(value);
                    this.RaiseDataMemberChanging("JoinType");
                    this.ValidateProperty("JoinType", value);
                    this._joinType = value;
                    this.RaiseDataMemberChanged("JoinType");
                    this.OnJoinTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Report"/> entity.
        /// </summary>
        [Association("FK_ReportDataTableJoin_Report", "ReportCode", "Code", IsForeignKey=true)]
        public Report Report
        {
            get
            {
                if ((this._report == null))
                {
                    this._report = new EntityRef<Report>(this, "Report", this.FilterReport);
                }
                return this._report.Entity;
            }
            set
            {
                Report previous = this.Report;
                if ((previous != value))
                {
                    this.ValidateProperty("Report", value);
                    if ((previous != null))
                    {
                        this._report.Entity = null;
                        previous.ReportDataTableJoins.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportCode = value.Code;
                    }
                    else
                    {
                        this.ReportCode = default(Guid);
                    }
                    this._report.Entity = value;
                    if ((value != null))
                    {
                        value.ReportDataTableJoins.Add(this);
                    }
                    this.RaisePropertyChanged("Report");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportCode
        {
            get
            {
                return this._reportCode;
            }
            set
            {
                if ((this._reportCode != value))
                {
                    this.OnReportCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportCode");
                    this.ValidateProperty("ReportCode", value);
                    this._reportCode = value;
                    this.RaiseDataMemberChanged("ReportCode");
                    this.OnReportCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        private bool FilterDataTableJoin(DataTableJoin entity)
        {
            return (entity.Code == this.DataTableJoinCode);
        }
        
        private bool FilterReport(Report entity)
        {
            return (entity.Code == this.ReportCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'ReportGroup' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ReportGroup : Entity
    {
        
        private Guid _code;
        
        private string _name;
        
        private Nullable<Guid> _parentCode;
        
        private string _parentPath;
        
        private string _pathName;
        
        private EntityCollection<Report> _reports;
        
        private string _reportType;
        
        private byte[] _rowIdentifier;
        
        private EntityCollection<UserReportGroup> _userReportGroups;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentCodeChanging(Nullable<Guid> value);
        partial void OnParentCodeChanged();
        partial void OnParentPathChanging(string value);
        partial void OnParentPathChanged();
        partial void OnPathNameChanging(string value);
        partial void OnPathNameChanged();
        partial void OnReportTypeChanging(string value);
        partial void OnReportTypeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportGroup"/> class.
        /// </summary>
        public ReportGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentCode' value.
        /// </summary>
        [DataMember()]
        public Nullable<Guid> ParentCode
        {
            get
            {
                return this._parentCode;
            }
            set
            {
                if ((this._parentCode != value))
                {
                    this.OnParentCodeChanging(value);
                    this.RaiseDataMemberChanging("ParentCode");
                    this.ValidateProperty("ParentCode", value);
                    this._parentCode = value;
                    this.RaiseDataMemberChanged("ParentCode");
                    this.OnParentCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentPath' value.
        /// </summary>
        [DataMember()]
        public string ParentPath
        {
            get
            {
                return this._parentPath;
            }
            set
            {
                if ((this._parentPath != value))
                {
                    this.OnParentPathChanging(value);
                    this.RaiseDataMemberChanging("ParentPath");
                    this.ValidateProperty("ParentPath", value);
                    this._parentPath = value;
                    this.RaiseDataMemberChanged("ParentPath");
                    this.OnParentPathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PathName' value.
        /// </summary>
        [DataMember()]
        public string PathName
        {
            get
            {
                return this._pathName;
            }
            set
            {
                if ((this._pathName != value))
                {
                    this.OnPathNameChanging(value);
                    this.RaiseDataMemberChanging("PathName");
                    this.ValidateProperty("PathName", value);
                    this._pathName = value;
                    this.RaiseDataMemberChanged("PathName");
                    this.OnPathNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Report"/> entity instances.
        /// </summary>
        [Association("FK_Report_ReportGroup", "Code", "GroupCode")]
        public EntityCollection<Report> Reports
        {
            get
            {
                if ((this._reports == null))
                {
                    this._reports = new EntityCollection<Report>(this, "Reports", this.FilterReports, this.AttachReports, this.DetachReports);
                }
                return this._reports;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportType' value.
        /// </summary>
        [DataMember()]
        public string ReportType
        {
            get
            {
                return this._reportType;
            }
            set
            {
                if ((this._reportType != value))
                {
                    this.OnReportTypeChanging(value);
                    this.RaiseDataMemberChanging("ReportType");
                    this.ValidateProperty("ReportType", value);
                    this._reportType = value;
                    this.RaiseDataMemberChanged("ReportType");
                    this.OnReportTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserReportGroup"/> entity instances.
        /// </summary>
        [Association("FK_UserReportGroup_ReportGroup", "Code", "ReportGroupCode")]
        public EntityCollection<UserReportGroup> UserReportGroups
        {
            get
            {
                if ((this._userReportGroups == null))
                {
                    this._userReportGroups = new EntityCollection<UserReportGroup>(this, "UserReportGroups", this.FilterUserReportGroups, this.AttachUserReportGroups, this.DetachUserReportGroups);
                }
                return this._userReportGroups;
            }
        }
        
        private void AttachReports(Report entity)
        {
            entity.ReportGroup = this;
        }
        
        private void DetachReports(Report entity)
        {
            entity.ReportGroup = null;
        }
        
        private bool FilterReports(Report entity)
        {
            return (entity.GroupCode == this.Code);
        }
        
        private void AttachUserReportGroups(UserReportGroup entity)
        {
            entity.ReportGroup = this;
        }
        
        private void DetachUserReportGroups(UserReportGroup entity)
        {
            entity.ReportGroup = null;
        }
        
        private bool FilterUserReportGroups(UserReportGroup entity)
        {
            return (entity.ReportGroupCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'ReportItem' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class ReportItem : Entity
    {
        
        private Guid _code;
        
        private EntityRef<DataItem> _dataItem;
        
        private Guid _dataItemCode;
        
        private EntityCollection<Filter> _filters;
        
        private bool _isChartField;
        
        private bool _isColumnTotal;
        
        private bool _isField;
        
        private bool _isFilter;
        
        private bool _isParameter;
        
        private bool _isRowTotal;
        
        private EntityRef<Report> _report;
        
        private EntityCollection<ReportChart> _reportCharts;
        
        private EntityCollection<ReportChartSery> _reportChartSeries;
        
        private Guid _reportCode;
        
        private byte[] _rowIdentifier;
        
        private int _sortField;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnDataItemCodeChanging(Guid value);
        partial void OnDataItemCodeChanged();
        partial void OnIsChartFieldChanging(bool value);
        partial void OnIsChartFieldChanged();
        partial void OnIsColumnTotalChanging(bool value);
        partial void OnIsColumnTotalChanged();
        partial void OnIsFieldChanging(bool value);
        partial void OnIsFieldChanged();
        partial void OnIsFilterChanging(bool value);
        partial void OnIsFilterChanged();
        partial void OnIsParameterChanging(bool value);
        partial void OnIsParameterChanged();
        partial void OnIsRowTotalChanging(bool value);
        partial void OnIsRowTotalChanged();
        partial void OnReportCodeChanging(Guid value);
        partial void OnReportCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSortFieldChanging(int value);
        partial void OnSortFieldChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportItem"/> class.
        /// </summary>
        public ReportItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="DataItem"/> entity.
        /// </summary>
        [Association("FK_ReportItem_DataItem", "DataItemCode", "Code", IsForeignKey=true)]
        public DataItem DataItem
        {
            get
            {
                if ((this._dataItem == null))
                {
                    this._dataItem = new EntityRef<DataItem>(this, "DataItem", this.FilterDataItem);
                }
                return this._dataItem.Entity;
            }
            set
            {
                DataItem previous = this.DataItem;
                if ((previous != value))
                {
                    this.ValidateProperty("DataItem", value);
                    if ((previous != null))
                    {
                        this._dataItem.Entity = null;
                        previous.ReportItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DataItemCode = value.Code;
                    }
                    else
                    {
                        this.DataItemCode = default(Guid);
                    }
                    this._dataItem.Entity = value;
                    if ((value != null))
                    {
                        value.ReportItems.Add(this);
                    }
                    this.RaisePropertyChanged("DataItem");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DataItemCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid DataItemCode
        {
            get
            {
                return this._dataItemCode;
            }
            set
            {
                if ((this._dataItemCode != value))
                {
                    this.OnDataItemCodeChanging(value);
                    this.RaiseDataMemberChanging("DataItemCode");
                    this.ValidateProperty("DataItemCode", value);
                    this._dataItemCode = value;
                    this.RaiseDataMemberChanged("DataItemCode");
                    this.OnDataItemCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Filter"/> entity instances.
        /// </summary>
        [Association("FK_Filter_ReportItem", "Code", "ReportItemCode")]
        public EntityCollection<Filter> Filters
        {
            get
            {
                if ((this._filters == null))
                {
                    this._filters = new EntityCollection<Filter>(this, "Filters", this.FilterFilters, this.AttachFilters, this.DetachFilters);
                }
                return this._filters;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsChartField' value.
        /// </summary>
        [DataMember()]
        public bool IsChartField
        {
            get
            {
                return this._isChartField;
            }
            set
            {
                if ((this._isChartField != value))
                {
                    this.OnIsChartFieldChanging(value);
                    this.RaiseDataMemberChanging("IsChartField");
                    this.ValidateProperty("IsChartField", value);
                    this._isChartField = value;
                    this.RaiseDataMemberChanged("IsChartField");
                    this.OnIsChartFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsColumnTotal' value.
        /// </summary>
        [DataMember()]
        public bool IsColumnTotal
        {
            get
            {
                return this._isColumnTotal;
            }
            set
            {
                if ((this._isColumnTotal != value))
                {
                    this.OnIsColumnTotalChanging(value);
                    this.RaiseDataMemberChanging("IsColumnTotal");
                    this.ValidateProperty("IsColumnTotal", value);
                    this._isColumnTotal = value;
                    this.RaiseDataMemberChanged("IsColumnTotal");
                    this.OnIsColumnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsField' value.
        /// </summary>
        [DataMember()]
        public bool IsField
        {
            get
            {
                return this._isField;
            }
            set
            {
                if ((this._isField != value))
                {
                    this.OnIsFieldChanging(value);
                    this.RaiseDataMemberChanging("IsField");
                    this.ValidateProperty("IsField", value);
                    this._isField = value;
                    this.RaiseDataMemberChanged("IsField");
                    this.OnIsFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsFilter' value.
        /// </summary>
        [DataMember()]
        public bool IsFilter
        {
            get
            {
                return this._isFilter;
            }
            set
            {
                if ((this._isFilter != value))
                {
                    this.OnIsFilterChanging(value);
                    this.RaiseDataMemberChanging("IsFilter");
                    this.ValidateProperty("IsFilter", value);
                    this._isFilter = value;
                    this.RaiseDataMemberChanged("IsFilter");
                    this.OnIsFilterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsParameter' value.
        /// </summary>
        [DataMember()]
        public bool IsParameter
        {
            get
            {
                return this._isParameter;
            }
            set
            {
                if ((this._isParameter != value))
                {
                    this.OnIsParameterChanging(value);
                    this.RaiseDataMemberChanging("IsParameter");
                    this.ValidateProperty("IsParameter", value);
                    this._isParameter = value;
                    this.RaiseDataMemberChanged("IsParameter");
                    this.OnIsParameterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsRowTotal' value.
        /// </summary>
        [DataMember()]
        public bool IsRowTotal
        {
            get
            {
                return this._isRowTotal;
            }
            set
            {
                if ((this._isRowTotal != value))
                {
                    this.OnIsRowTotalChanging(value);
                    this.RaiseDataMemberChanging("IsRowTotal");
                    this.ValidateProperty("IsRowTotal", value);
                    this._isRowTotal = value;
                    this.RaiseDataMemberChanged("IsRowTotal");
                    this.OnIsRowTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Report"/> entity.
        /// </summary>
        [Association("FK_ReportItem_Report", "ReportCode", "Code", IsForeignKey=true)]
        public Report Report
        {
            get
            {
                if ((this._report == null))
                {
                    this._report = new EntityRef<Report>(this, "Report", this.FilterReport);
                }
                return this._report.Entity;
            }
            set
            {
                Report previous = this.Report;
                if ((previous != value))
                {
                    this.ValidateProperty("Report", value);
                    if ((previous != null))
                    {
                        this._report.Entity = null;
                        previous.ReportItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportCode = value.Code;
                    }
                    else
                    {
                        this.ReportCode = default(Guid);
                    }
                    this._report.Entity = value;
                    if ((value != null))
                    {
                        value.ReportItems.Add(this);
                    }
                    this.RaisePropertyChanged("Report");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportChart"/> entity instances.
        /// </summary>
        [Association("FK_ReportChart_ReportItem", "Code", "CategoryReportItemCode")]
        public EntityCollection<ReportChart> ReportCharts
        {
            get
            {
                if ((this._reportCharts == null))
                {
                    this._reportCharts = new EntityCollection<ReportChart>(this, "ReportCharts", this.FilterReportCharts, this.AttachReportCharts, this.DetachReportCharts);
                }
                return this._reportCharts;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="ReportChartSery"/> entity instances.
        /// </summary>
        [Association("FK_ReportChartSeries_ReportItem", "Code", "SeriesReportItemCode")]
        public EntityCollection<ReportChartSery> ReportChartSeries
        {
            get
            {
                if ((this._reportChartSeries == null))
                {
                    this._reportChartSeries = new EntityCollection<ReportChartSery>(this, "ReportChartSeries", this.FilterReportChartSeries, this.AttachReportChartSeries, this.DetachReportChartSeries);
                }
                return this._reportChartSeries;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportCode
        {
            get
            {
                return this._reportCode;
            }
            set
            {
                if ((this._reportCode != value))
                {
                    this.OnReportCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportCode");
                    this.ValidateProperty("ReportCode", value);
                    this._reportCode = value;
                    this.RaiseDataMemberChanged("ReportCode");
                    this.OnReportCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortField' value.
        /// </summary>
        [DataMember()]
        public int SortField
        {
            get
            {
                return this._sortField;
            }
            set
            {
                if ((this._sortField != value))
                {
                    this.OnSortFieldChanging(value);
                    this.RaiseDataMemberChanging("SortField");
                    this.ValidateProperty("SortField", value);
                    this._sortField = value;
                    this.RaiseDataMemberChanged("SortField");
                    this.OnSortFieldChanged();
                }
            }
        }
        
        private bool FilterDataItem(DataItem entity)
        {
            return (entity.Code == this.DataItemCode);
        }
        
        private void AttachFilters(Filter entity)
        {
            entity.ReportItem = this;
        }
        
        private void DetachFilters(Filter entity)
        {
            entity.ReportItem = null;
        }
        
        private bool FilterFilters(Filter entity)
        {
            return (entity.ReportItemCode == this.Code);
        }
        
        private bool FilterReport(Report entity)
        {
            return (entity.Code == this.ReportCode);
        }
        
        private void AttachReportCharts(ReportChart entity)
        {
            entity.ReportItem = this;
        }
        
        private void DetachReportCharts(ReportChart entity)
        {
            entity.ReportItem = null;
        }
        
        private bool FilterReportCharts(ReportChart entity)
        {
            return (entity.CategoryReportItemCode == this.Code);
        }
        
        private void AttachReportChartSeries(ReportChartSery entity)
        {
            entity.ReportItem = this;
        }
        
        private void DetachReportChartSeries(ReportChartSery entity)
        {
            entity.ReportItem = null;
        }
        
        private bool FilterReportChartSeries(ReportChartSery entity)
        {
            return (entity.SeriesReportItemCode == this.Code);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'StandardReport' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class StandardReport : Entity
    {
        
        private Guid _code;
        
        private bool _isExportable;
        
        private bool _isPrintable;
        
        private EntityRef<ReportCategory> _reportCategory;
        
        private Guid _reportCategoryCode;
        
        private string _reportDescription;
        
        private string _reportName;
        
        private Guid _reportToPublishCode;
        
        private string _reportUrl;
        
        private byte[] _rowIdentifier;
        
        private int _sortOrder;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnIsExportableChanging(bool value);
        partial void OnIsExportableChanged();
        partial void OnIsPrintableChanging(bool value);
        partial void OnIsPrintableChanged();
        partial void OnReportCategoryCodeChanging(Guid value);
        partial void OnReportCategoryCodeChanged();
        partial void OnReportDescriptionChanging(string value);
        partial void OnReportDescriptionChanged();
        partial void OnReportNameChanging(string value);
        partial void OnReportNameChanged();
        partial void OnReportToPublishCodeChanging(Guid value);
        partial void OnReportToPublishCodeChanged();
        partial void OnReportUrlChanging(string value);
        partial void OnReportUrlChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnSortOrderChanging(int value);
        partial void OnSortOrderChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StandardReport"/> class.
        /// </summary>
        public StandardReport()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsExportable' value.
        /// </summary>
        [DataMember()]
        public bool IsExportable
        {
            get
            {
                return this._isExportable;
            }
            set
            {
                if ((this._isExportable != value))
                {
                    this.OnIsExportableChanging(value);
                    this.RaiseDataMemberChanging("IsExportable");
                    this.ValidateProperty("IsExportable", value);
                    this._isExportable = value;
                    this.RaiseDataMemberChanged("IsExportable");
                    this.OnIsExportableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsPrintable' value.
        /// </summary>
        [DataMember()]
        public bool IsPrintable
        {
            get
            {
                return this._isPrintable;
            }
            set
            {
                if ((this._isPrintable != value))
                {
                    this.OnIsPrintableChanging(value);
                    this.RaiseDataMemberChanging("IsPrintable");
                    this.ValidateProperty("IsPrintable", value);
                    this._isPrintable = value;
                    this.RaiseDataMemberChanged("IsPrintable");
                    this.OnIsPrintableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportCategory"/> entity.
        /// </summary>
        [Association("FK_StandardReport_ReportCategory", "ReportCategoryCode", "Code", IsForeignKey=true)]
        public ReportCategory ReportCategory
        {
            get
            {
                if ((this._reportCategory == null))
                {
                    this._reportCategory = new EntityRef<ReportCategory>(this, "ReportCategory", this.FilterReportCategory);
                }
                return this._reportCategory.Entity;
            }
            set
            {
                ReportCategory previous = this.ReportCategory;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportCategory", value);
                    if ((previous != null))
                    {
                        this._reportCategory.Entity = null;
                        previous.StandardReports.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportCategoryCode = value.Code;
                    }
                    else
                    {
                        this.ReportCategoryCode = default(Guid);
                    }
                    this._reportCategory.Entity = value;
                    if ((value != null))
                    {
                        value.StandardReports.Add(this);
                    }
                    this.RaisePropertyChanged("ReportCategory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportCategoryCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportCategoryCode
        {
            get
            {
                return this._reportCategoryCode;
            }
            set
            {
                if ((this._reportCategoryCode != value))
                {
                    this.OnReportCategoryCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportCategoryCode");
                    this.ValidateProperty("ReportCategoryCode", value);
                    this._reportCategoryCode = value;
                    this.RaiseDataMemberChanged("ReportCategoryCode");
                    this.OnReportCategoryCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportDescription' value.
        /// </summary>
        [DataMember()]
        public string ReportDescription
        {
            get
            {
                return this._reportDescription;
            }
            set
            {
                if ((this._reportDescription != value))
                {
                    this.OnReportDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ReportDescription");
                    this.ValidateProperty("ReportDescription", value);
                    this._reportDescription = value;
                    this.RaiseDataMemberChanged("ReportDescription");
                    this.OnReportDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportName' value.
        /// </summary>
        [DataMember()]
        public string ReportName
        {
            get
            {
                return this._reportName;
            }
            set
            {
                if ((this._reportName != value))
                {
                    this.OnReportNameChanging(value);
                    this.RaiseDataMemberChanging("ReportName");
                    this.ValidateProperty("ReportName", value);
                    this._reportName = value;
                    this.RaiseDataMemberChanged("ReportName");
                    this.OnReportNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportToPublishCode' value.
        /// </summary>
        [DataMember()]
        public Guid ReportToPublishCode
        {
            get
            {
                return this._reportToPublishCode;
            }
            set
            {
                if ((this._reportToPublishCode != value))
                {
                    this.OnReportToPublishCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportToPublishCode");
                    this.ValidateProperty("ReportToPublishCode", value);
                    this._reportToPublishCode = value;
                    this.RaiseDataMemberChanged("ReportToPublishCode");
                    this.OnReportToPublishCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportUrl' value.
        /// </summary>
        [DataMember()]
        public string ReportUrl
        {
            get
            {
                return this._reportUrl;
            }
            set
            {
                if ((this._reportUrl != value))
                {
                    this.OnReportUrlChanging(value);
                    this.RaiseDataMemberChanging("ReportUrl");
                    this.ValidateProperty("ReportUrl", value);
                    this._reportUrl = value;
                    this.RaiseDataMemberChanged("ReportUrl");
                    this.OnReportUrlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SortOrder' value.
        /// </summary>
        [DataMember()]
        public int SortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                if ((this._sortOrder != value))
                {
                    this.OnSortOrderChanging(value);
                    this.RaiseDataMemberChanging("SortOrder");
                    this.ValidateProperty("SortOrder", value);
                    this._sortOrder = value;
                    this.RaiseDataMemberChanged("SortOrder");
                    this.OnSortOrderChanged();
                }
            }
        }
        
        private bool FilterReportCategory(ReportCategory entity)
        {
            return (entity.Code == this.ReportCategoryCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'UploadMonitor' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class UploadMonitor : Entity
    {
        
        private Guid _code;
        
        private Guid _inputFileCode;
        
        private EntityRef<InputFileHistory> _inputFileHistory;
        
        private int _position;
        
        private byte[] _rowIdentifier;
        
        private string _stepDescription;
        
        private DateTime _timeOccured;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnInputFileCodeChanging(Guid value);
        partial void OnInputFileCodeChanged();
        partial void OnPositionChanging(int value);
        partial void OnPositionChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnStepDescriptionChanging(string value);
        partial void OnStepDescriptionChanged();
        partial void OnTimeOccuredChanging(DateTime value);
        partial void OnTimeOccuredChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadMonitor"/> class.
        /// </summary>
        public UploadMonitor()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InputFileCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid InputFileCode
        {
            get
            {
                return this._inputFileCode;
            }
            set
            {
                if ((this._inputFileCode != value))
                {
                    this.OnInputFileCodeChanging(value);
                    this.RaiseDataMemberChanging("InputFileCode");
                    this.ValidateProperty("InputFileCode", value);
                    this._inputFileCode = value;
                    this.RaiseDataMemberChanged("InputFileCode");
                    this.OnInputFileCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="InputFileHistory"/> entity.
        /// </summary>
        [Association("FK_UploadMonitor_InputFileHistory", "InputFileCode", "Code", IsForeignKey=true)]
        public InputFileHistory InputFileHistory
        {
            get
            {
                if ((this._inputFileHistory == null))
                {
                    this._inputFileHistory = new EntityRef<InputFileHistory>(this, "InputFileHistory", this.FilterInputFileHistory);
                }
                return this._inputFileHistory.Entity;
            }
            set
            {
                InputFileHistory previous = this.InputFileHistory;
                if ((previous != value))
                {
                    this.ValidateProperty("InputFileHistory", value);
                    if ((previous != null))
                    {
                        this._inputFileHistory.Entity = null;
                        previous.UploadMonitors.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.InputFileCode = value.Code;
                    }
                    else
                    {
                        this.InputFileCode = default(Guid);
                    }
                    this._inputFileHistory.Entity = value;
                    if ((value != null))
                    {
                        value.UploadMonitors.Add(this);
                    }
                    this.RaisePropertyChanged("InputFileHistory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Position' value.
        /// </summary>
        [DataMember()]
        public int Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    this.OnPositionChanging(value);
                    this.RaiseDataMemberChanging("Position");
                    this.ValidateProperty("Position", value);
                    this._position = value;
                    this.RaiseDataMemberChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StepDescription' value.
        /// </summary>
        [DataMember()]
        public string StepDescription
        {
            get
            {
                return this._stepDescription;
            }
            set
            {
                if ((this._stepDescription != value))
                {
                    this.OnStepDescriptionChanging(value);
                    this.RaiseDataMemberChanging("StepDescription");
                    this.ValidateProperty("StepDescription", value);
                    this._stepDescription = value;
                    this.RaiseDataMemberChanged("StepDescription");
                    this.OnStepDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeOccured' value.
        /// </summary>
        [DataMember()]
        public DateTime TimeOccured
        {
            get
            {
                return this._timeOccured;
            }
            set
            {
                if ((this._timeOccured != value))
                {
                    this.OnTimeOccuredChanging(value);
                    this.RaiseDataMemberChanging("TimeOccured");
                    this.ValidateProperty("TimeOccured", value);
                    this._timeOccured = value;
                    this.RaiseDataMemberChanged("TimeOccured");
                    this.OnTimeOccuredChanged();
                }
            }
        }
        
        private bool FilterInputFileHistory(InputFileHistory entity)
        {
            return (entity.Code == this.InputFileCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
    
    /// <summary>
    /// The 'UserReportGroup' entity class.
    /// This entity is shared between the following contexts:
    /// The <see cref="AlertContext"/> context.
    /// The <see cref="ReportWizardContext"/> context.
    /// The <see cref="CustomAuthenticationContext"/> context.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s")]
    public sealed partial class UserReportGroup : Entity
    {
        
        private int _accessLevel;
        
        private Guid _code;
        
        private EntityRef<ReportGroup> _reportGroup;
        
        private Guid _reportGroupCode;
        
        private byte[] _rowIdentifier;
        
        private EntityRef<MCUser> _user;
        
        private Guid _userCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccessLevelChanging(int value);
        partial void OnAccessLevelChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnReportGroupCodeChanging(Guid value);
        partial void OnReportGroupCodeChanged();
        partial void OnRowIdentifierChanging(byte[] value);
        partial void OnRowIdentifierChanged();
        partial void OnUserCodeChanging(Guid value);
        partial void OnUserCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserReportGroup"/> class.
        /// </summary>
        public UserReportGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AccessLevel' value.
        /// </summary>
        [DataMember()]
        public int AccessLevel
        {
            get
            {
                return this._accessLevel;
            }
            set
            {
                if ((this._accessLevel != value))
                {
                    this.OnAccessLevelChanging(value);
                    this.RaiseDataMemberChanging("AccessLevel");
                    this.ValidateProperty("AccessLevel", value);
                    this._accessLevel = value;
                    this.RaiseDataMemberChanged("AccessLevel");
                    this.OnAccessLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ReportGroup"/> entity.
        /// </summary>
        [Association("FK_UserReportGroup_ReportGroup", "ReportGroupCode", "Code", IsForeignKey=true)]
        public ReportGroup ReportGroup
        {
            get
            {
                if ((this._reportGroup == null))
                {
                    this._reportGroup = new EntityRef<ReportGroup>(this, "ReportGroup", this.FilterReportGroup);
                }
                return this._reportGroup.Entity;
            }
            set
            {
                ReportGroup previous = this.ReportGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("ReportGroup", value);
                    if ((previous != null))
                    {
                        this._reportGroup.Entity = null;
                        previous.UserReportGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ReportGroupCode = value.Code;
                    }
                    else
                    {
                        this.ReportGroupCode = default(Guid);
                    }
                    this._reportGroup.Entity = value;
                    if ((value != null))
                    {
                        value.UserReportGroups.Add(this);
                    }
                    this.RaisePropertyChanged("ReportGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReportGroupCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid ReportGroupCode
        {
            get
            {
                return this._reportGroupCode;
            }
            set
            {
                if ((this._reportGroupCode != value))
                {
                    this.OnReportGroupCodeChanging(value);
                    this.RaiseDataMemberChanging("ReportGroupCode");
                    this.ValidateProperty("ReportGroupCode", value);
                    this._reportGroupCode = value;
                    this.RaiseDataMemberChanged("ReportGroupCode");
                    this.OnReportGroupCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RowIdentifier' value.
        /// </summary>
        [DataMember()]
        public byte[] RowIdentifier
        {
            get
            {
                return this._rowIdentifier;
            }
            set
            {
                if ((this._rowIdentifier != value))
                {
                    this.OnRowIdentifierChanging(value);
                    this.RaiseDataMemberChanging("RowIdentifier");
                    this.ValidateProperty("RowIdentifier", value);
                    this._rowIdentifier = value;
                    this.RaiseDataMemberChanged("RowIdentifier");
                    this.OnRowIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MCUser"/> entity.
        /// </summary>
        [Association("FK_UserReportGroup_User", "UserCode", "Code", IsForeignKey=true)]
        public MCUser User
        {
            get
            {
                if ((this._user == null))
                {
                    this._user = new EntityRef<MCUser>(this, "User", this.FilterUser);
                }
                return this._user.Entity;
            }
            set
            {
                MCUser previous = this.User;
                if ((previous != value))
                {
                    this.ValidateProperty("User", value);
                    if ((previous != null))
                    {
                        this._user.Entity = null;
                        previous.UserReportGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserCode = value.Code;
                    }
                    else
                    {
                        this.UserCode = default(Guid);
                    }
                    this._user.Entity = value;
                    if ((value != null))
                    {
                        value.UserReportGroups.Add(this);
                    }
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid UserCode
        {
            get
            {
                return this._userCode;
            }
            set
            {
                if ((this._userCode != value))
                {
                    this.OnUserCodeChanging(value);
                    this.RaiseDataMemberChanging("UserCode");
                    this.ValidateProperty("UserCode", value);
                    this._userCode = value;
                    this.RaiseDataMemberChanged("UserCode");
                    this.OnUserCodeChanged();
                }
            }
        }
        
        private bool FilterReportGroup(ReportGroup entity)
        {
            return (entity.Code == this.ReportGroupCode);
        }
        
        private bool FilterUser(MCUser entity)
        {
            return (entity.Code == this.UserCode);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
}
namespace UcbManagementInformation.Server.DataAccess.BusinessObjects
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'InputFileErrorSummary' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Server.DataAcces" +
        "s.BusinessObjects")]
    public sealed partial class InputFileErrorSummary : Entity
    {
        
        private Guid _code;
        
        private int _fileLevelError;
        
        private int _fileLevelInfo;
        
        private int _fileLevelWarning;
        
        private int _recordLevelError;
        
        private int _recordLevelInfo;
        
        private int _recordLevelWarning;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnFileLevelErrorChanging(int value);
        partial void OnFileLevelErrorChanged();
        partial void OnFileLevelInfoChanging(int value);
        partial void OnFileLevelInfoChanged();
        partial void OnFileLevelWarningChanging(int value);
        partial void OnFileLevelWarningChanged();
        partial void OnRecordLevelErrorChanging(int value);
        partial void OnRecordLevelErrorChanged();
        partial void OnRecordLevelInfoChanging(int value);
        partial void OnRecordLevelInfoChanged();
        partial void OnRecordLevelWarningChanging(int value);
        partial void OnRecordLevelWarningChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileErrorSummary"/> class.
        /// </summary>
        public InputFileErrorSummary()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaisePropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileLevelError' value.
        /// </summary>
        [DataMember()]
        public int FileLevelError
        {
            get
            {
                return this._fileLevelError;
            }
            set
            {
                if ((this._fileLevelError != value))
                {
                    this.OnFileLevelErrorChanging(value);
                    this.RaiseDataMemberChanging("FileLevelError");
                    this.ValidateProperty("FileLevelError", value);
                    this._fileLevelError = value;
                    this.RaiseDataMemberChanged("FileLevelError");
                    this.OnFileLevelErrorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileLevelInfo' value.
        /// </summary>
        [DataMember()]
        public int FileLevelInfo
        {
            get
            {
                return this._fileLevelInfo;
            }
            set
            {
                if ((this._fileLevelInfo != value))
                {
                    this.OnFileLevelInfoChanging(value);
                    this.RaiseDataMemberChanging("FileLevelInfo");
                    this.ValidateProperty("FileLevelInfo", value);
                    this._fileLevelInfo = value;
                    this.RaiseDataMemberChanged("FileLevelInfo");
                    this.OnFileLevelInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileLevelWarning' value.
        /// </summary>
        [DataMember()]
        public int FileLevelWarning
        {
            get
            {
                return this._fileLevelWarning;
            }
            set
            {
                if ((this._fileLevelWarning != value))
                {
                    this.OnFileLevelWarningChanging(value);
                    this.RaiseDataMemberChanging("FileLevelWarning");
                    this.ValidateProperty("FileLevelWarning", value);
                    this._fileLevelWarning = value;
                    this.RaiseDataMemberChanged("FileLevelWarning");
                    this.OnFileLevelWarningChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordLevelError' value.
        /// </summary>
        [DataMember()]
        public int RecordLevelError
        {
            get
            {
                return this._recordLevelError;
            }
            set
            {
                if ((this._recordLevelError != value))
                {
                    this.OnRecordLevelErrorChanging(value);
                    this.RaiseDataMemberChanging("RecordLevelError");
                    this.ValidateProperty("RecordLevelError", value);
                    this._recordLevelError = value;
                    this.RaiseDataMemberChanged("RecordLevelError");
                    this.OnRecordLevelErrorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordLevelInfo' value.
        /// </summary>
        [DataMember()]
        public int RecordLevelInfo
        {
            get
            {
                return this._recordLevelInfo;
            }
            set
            {
                if ((this._recordLevelInfo != value))
                {
                    this.OnRecordLevelInfoChanging(value);
                    this.RaiseDataMemberChanging("RecordLevelInfo");
                    this.ValidateProperty("RecordLevelInfo", value);
                    this._recordLevelInfo = value;
                    this.RaiseDataMemberChanged("RecordLevelInfo");
                    this.OnRecordLevelInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecordLevelWarning' value.
        /// </summary>
        [DataMember()]
        public int RecordLevelWarning
        {
            get
            {
                return this._recordLevelWarning;
            }
            set
            {
                if ((this._recordLevelWarning != value))
                {
                    this.OnRecordLevelWarningChanging(value);
                    this.RaiseDataMemberChanging("RecordLevelWarning");
                    this.ValidateProperty("RecordLevelWarning", value);
                    this._recordLevelWarning = value;
                    this.RaiseDataMemberChanged("RecordLevelWarning");
                    this.OnRecordLevelWarningChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._code;
        }
    }
}
namespace UcbManagementInformation.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.DomainServices.Server;
    using System.ServiceModel.Web;
    using UcbManagementInformation.Server.DataAccess;
    using UcbManagementInformation.Web.Resources;
    
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CustomAuthenticationService' DomainService.
    /// </summary>
    public sealed partial class CustomAuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAuthenticationContext"/> class.
        /// </summary>
        public CustomAuthenticationContext() : 
                this(new WebDomainClient<ICustomAuthenticationServiceContract>(new Uri("UcbManagementInformation-Web-CustomAuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CustomAuthenticationService service URI.</param>
        public CustomAuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<ICustomAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CustomAuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MCUser"/> entity instances that have been loaded into this <see cref="CustomAuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<MCUser> MCUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MCUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MCUser"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MCUser"/> entity instances.</returns>
        public EntityQuery<MCUser> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<MCUser>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MCUser"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MCUser"/> entity instances.</returns>
        public EntityQuery<MCUser> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<MCUser>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MCUser"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MCUser"/> entity instances.</returns>
        public EntityQuery<MCUser> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<MCUser>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MCUser"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MCUser"/> entity instances.</returns>
        public EntityQuery<MCUser> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<MCUser>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CustomAuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CustomAuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICustomAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomAuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomAuthenticationService/GetUser", ReplyAction="http://tempuri.org/CustomAuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<MCUser> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomAuthenticationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomAuthenticationService/GetUsers", ReplyAction="http://tempuri.org/CustomAuthenticationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<MCUser> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomAuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomAuthenticationService/Login", ReplyAction="http://tempuri.org/CustomAuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<MCUser> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomAuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomAuthenticationService/Logout", ReplyAction="http://tempuri.org/CustomAuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<MCUser> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CustomAuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CustomAuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/CustomAuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CustomAuthenticationContextEntityContainer : EntityContainer
        {
            
            public CustomAuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<Alert>(EntitySetOperations.None);
                this.CreateEntitySet<AlertUser>(EntitySetOperations.None);
                this.CreateEntitySet<DataCategory>(EntitySetOperations.None);
                this.CreateEntitySet<DataItem>(EntitySetOperations.None);
                this.CreateEntitySet<DataModel>(EntitySetOperations.None);
                this.CreateEntitySet<DataTable>(EntitySetOperations.None);
                this.CreateEntitySet<DataTableJoin>(EntitySetOperations.None);
                this.CreateEntitySet<DataTableRelationship>(EntitySetOperations.None);
                this.CreateEntitySet<DataTableRelationshipJoin>(EntitySetOperations.None);
                this.CreateEntitySet<Filter>(EntitySetOperations.None);
                this.CreateEntitySet<MCRole>(EntitySetOperations.None);
                this.CreateEntitySet<MCUser>(EntitySetOperations.Edit);
                this.CreateEntitySet<MCUserRole>(EntitySetOperations.None);
                this.CreateEntitySet<Report>(EntitySetOperations.None);
                this.CreateEntitySet<ReportChart>(EntitySetOperations.None);
                this.CreateEntitySet<ReportChartSery>(EntitySetOperations.None);
                this.CreateEntitySet<ReportDataTableJoin>(EntitySetOperations.None);
                this.CreateEntitySet<ReportGroup>(EntitySetOperations.None);
                this.CreateEntitySet<ReportItem>(EntitySetOperations.None);
                this.CreateEntitySet<UserReportGroup>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    [RequiresAuthentication()]
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("UcbManagementInformation-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entity instances that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entity instances.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace UcbManagementInformation.Web.MIFileUpload.JobQueue
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    public enum JobStatus
    {
        
        Waiting = 0,
        
        Running = 1,
        
        Succeeded = 2,
        
        Failed = 3,
    }
    
    /// <summary>
    /// The 'JobStep' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Web.MIFileUpload" +
        ".JobQueue")]
    public sealed partial class JobStep : ComplexObject
    {
        
        private string _category;
        
        private Guid _code;
        
        private Nullable<DateTime> _endTime;
        
        private string _name;
        
        private int _order;
        
        private double _percentComplete;
        
        private string _progressText;
        
        private Nullable<DateTime> _startTime;
        
        private JobStepStatus _status;
        
        private int _timeout;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnEndTimeChanging(Nullable<DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOrderChanging(int value);
        partial void OnOrderChanged();
        partial void OnPercentCompleteChanging(double value);
        partial void OnPercentCompleteChanged();
        partial void OnProgressTextChanging(string value);
        partial void OnProgressTextChanged();
        partial void OnStartTimeChanging(Nullable<DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnStatusChanging(JobStepStatus value);
        partial void OnStatusChanged();
        partial void OnTimeoutChanging(int value);
        partial void OnTimeoutChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="JobStep"/> class.
        /// </summary>
        public JobStep()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Category' value.
        /// </summary>
        [DataMember()]
        public string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    this.OnCategoryChanging(value);
                    this.RaiseDataMemberChanging("Category");
                    this.ValidateProperty("Category", value);
                    this._category = value;
                    this.RaiseDataMemberChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndTime' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public Nullable<DateTime> EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaisePropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Order' value.
        /// </summary>
        [DataMember()]
        public int Order
        {
            get
            {
                return this._order;
            }
            set
            {
                if ((this._order != value))
                {
                    this.OnOrderChanging(value);
                    this.RaiseDataMemberChanging("Order");
                    this.ValidateProperty("Order", value);
                    this._order = value;
                    this.RaiseDataMemberChanged("Order");
                    this.OnOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PercentComplete' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double PercentComplete
        {
            get
            {
                return this._percentComplete;
            }
            set
            {
                if ((this._percentComplete != value))
                {
                    this.OnPercentCompleteChanging(value);
                    this.ValidateProperty("PercentComplete", value);
                    this._percentComplete = value;
                    this.RaisePropertyChanged("PercentComplete");
                    this.OnPercentCompleteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProgressText' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string ProgressText
        {
            get
            {
                return this._progressText;
            }
            set
            {
                if ((this._progressText != value))
                {
                    this.OnProgressTextChanging(value);
                    this.ValidateProperty("ProgressText", value);
                    this._progressText = value;
                    this.RaisePropertyChanged("ProgressText");
                    this.OnProgressTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartTime' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public Nullable<DateTime> StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaisePropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public JobStepStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaisePropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Timeout' value.
        /// </summary>
        [DataMember()]
        public int Timeout
        {
            get
            {
                return this._timeout;
            }
            set
            {
                if ((this._timeout != value))
                {
                    this.OnTimeoutChanging(value);
                    this.RaiseDataMemberChanging("Timeout");
                    this.ValidateProperty("Timeout", value);
                    this._timeout = value;
                    this.RaiseDataMemberChanged("Timeout");
                    this.OnTimeoutChanged();
                }
            }
        }
    }
    
    public enum JobStepStatus
    {
        
        NotStarted = 0,
        
        Running = 1,
        
        Succeeded = 2,
        
        Failed = 3,
    }
}
namespace UcbManagementInformation.Web.MIFileUpload.JobQueue.Jobs
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using UcbManagementInformation.Web.MIFileUpload.JobQueue;
    
    
    /// <summary>
    /// The 'JobBase' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Web.MIFileUpload" +
        ".JobQueue.Jobs")]
    public sealed partial class JobBase : ComplexObject
    {
        
        private Nullable<DateTime> _addedTime;
        
        private Guid _code;
        
        private JobStep _currentStep;
        
        private string _data;
        
        private string _description;
        
        private Nullable<DateTime> _endTime;
        
        private List<JobStep> _jobSteps;
        
        private Nullable<DateTime> _startTime;
        
        private JobStatus _status;
        
        private string _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddedTimeChanging(Nullable<DateTime> value);
        partial void OnAddedTimeChanged();
        partial void OnCodeChanging(Guid value);
        partial void OnCodeChanged();
        partial void OnCurrentStepChanging(JobStep value);
        partial void OnCurrentStepChanged();
        partial void OnDataChanging(string value);
        partial void OnDataChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEndTimeChanging(Nullable<DateTime> value);
        partial void OnEndTimeChanged();
        partial void OnJobStepsChanging(List<JobStep> value);
        partial void OnJobStepsChanged();
        partial void OnStartTimeChanging(Nullable<DateTime> value);
        partial void OnStartTimeChanged();
        partial void OnStatusChanging(JobStatus value);
        partial void OnStatusChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="JobBase"/> class.
        /// </summary>
        public JobBase()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AddedTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> AddedTime
        {
            get
            {
                return this._addedTime;
            }
            set
            {
                if ((this._addedTime != value))
                {
                    this.OnAddedTimeChanging(value);
                    this.RaiseDataMemberChanging("AddedTime");
                    this.ValidateProperty("AddedTime", value);
                    this._addedTime = value;
                    this.RaiseDataMemberChanged("AddedTime");
                    this.OnAddedTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        public Guid Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentStep' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public JobStep CurrentStep
        {
            get
            {
                return this._currentStep;
            }
            set
            {
                if ((this._currentStep != value))
                {
                    this.OnCurrentStepChanging(value);
                    this.RaiseDataMemberChanging("CurrentStep");
                    this.ValidateProperty("CurrentStep", value);
                    this._currentStep = value;
                    this.RaiseDataMemberChanged("CurrentStep");
                    this.OnCurrentStepChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Data' value.
        /// </summary>
        [DataMember()]
        public string Data
        {
            get
            {
                return this._data;
            }
            set
            {
                if ((this._data != value))
                {
                    this.OnDataChanging(value);
                    this.RaiseDataMemberChanging("Data");
                    this.ValidateProperty("Data", value);
                    this._data = value;
                    this.RaiseDataMemberChanged("Data");
                    this.OnDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndTime
        {
            get
            {
                return this._endTime;
            }
            set
            {
                if ((this._endTime != value))
                {
                    this.OnEndTimeChanging(value);
                    this.RaiseDataMemberChanging("EndTime");
                    this.ValidateProperty("EndTime", value);
                    this._endTime = value;
                    this.RaiseDataMemberChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JobSteps' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<JobStep> JobSteps
        {
            get
            {
                return this._jobSteps;
            }
            set
            {
                if ((this._jobSteps != value))
                {
                    this.OnJobStepsChanging(value);
                    this.RaiseDataMemberChanging("JobSteps");
                    this.ValidateProperty("JobSteps", value);
                    this._jobSteps = value;
                    this.RaiseDataMemberChanged("JobSteps");
                    this.OnJobStepsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartTime' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public JobStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
}
namespace UcbManagementInformation.Web.Server
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.DomainServices.Server;
    using System.ServiceModel.Web;
    using UcbManagementInformation.Server.DataAccess;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'ReportWizardService' DomainService.
    /// </summary>
    [RequiresAuthentication()]
    public sealed partial class ReportWizardContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWizardContext"/> class.
        /// </summary>
        public ReportWizardContext() : 
                this(new WebDomainClient<IReportWizardServiceContract>(new Uri("UcbManagementInformation-Web-Server-ReportWizardService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWizardContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ReportWizardService service URI.</param>
        public ReportWizardContext(Uri serviceUri) : 
                this(new WebDomainClient<IReportWizardServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportWizardContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ReportWizardContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MCUser"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<MCUser> MCUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MCUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportGroup"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<ReportGroup> ReportGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Report"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<Report> Reports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Report>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataCategory"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataCategory> DataCategories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataCategory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataItem"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataItem> DataItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataModel"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataModel> DataModels
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataModel>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataTableJoin"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataTableJoin> DataTableJoins
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataTableJoin>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataTableRelationshipJoin"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataTableRelationshipJoin> DataTableRelationshipJoins
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataTableRelationshipJoin>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataTableRelationship"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataTableRelationship> DataTableRelationships
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataTableRelationship>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DataTable"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<DataTable> DataTables
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DataTable>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Filter"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<Filter> Filters
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Filter>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportCategory"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<ReportCategory> ReportCategories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportCategory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportChart"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<ReportChart> ReportCharts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportChart>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportChartSery"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<ReportChartSery> ReportChartSeries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportChartSery>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportDataTableJoin"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<ReportDataTableJoin> ReportDataTableJoins
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportDataTableJoin>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ReportItem"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<ReportItem> ReportItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ReportItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="StandardReport"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<StandardReport> StandardReports
        {
            get
            {
                return base.EntityContainer.GetEntitySet<StandardReport>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserReportGroup"/> entity instances that have been loaded into this <see cref="ReportWizardContext"/> instance.
        /// </summary>
        public EntitySet<UserReportGroup> UserReportGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserReportGroup>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MCUser"/> entity instances using the 'GetAllMCUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MCUser"/> entity instances.</returns>
        public EntityQuery<MCUser> GetAllMCUserQuery()
        {
            this.ValidateMethod("GetAllMCUserQuery", null);
            return base.CreateQuery<MCUser>("GetAllMCUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportGroup"/> entity instances using the 'GetAllReportGroupsForUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportGroup"/> entity instances.</returns>
        public EntityQuery<ReportGroup> GetAllReportGroupsForUserQuery()
        {
            this.ValidateMethod("GetAllReportGroupsForUserQuery", null);
            return base.CreateQuery<ReportGroup>("GetAllReportGroupsForUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Report"/> entity instances using the 'GetAllReportsForReportGroup' query.
        /// </summary>
        /// <param name="reportGroupCode">The value for the 'reportGroupCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Report"/> entity instances.</returns>
        public EntityQuery<Report> GetAllReportsForReportGroupQuery(Guid reportGroupCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("reportGroupCode", reportGroupCode);
            this.ValidateMethod("GetAllReportsForReportGroupQuery", parameters);
            return base.CreateQuery<Report>("GetAllReportsForReportGroup", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataCategory"/> entity instances using the 'GetDataCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataCategory"/> entity instances.</returns>
        public EntityQuery<DataCategory> GetDataCategoriesQuery()
        {
            this.ValidateMethod("GetDataCategoriesQuery", null);
            return base.CreateQuery<DataCategory>("GetDataCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataCategory"/> entity instances using the 'GetDataCategoriesWithDataItemsByDataModel' query.
        /// </summary>
        /// <param name="dataModelCode">The value for the 'dataModelCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataCategory"/> entity instances.</returns>
        public EntityQuery<DataCategory> GetDataCategoriesWithDataItemsByDataModelQuery(Guid dataModelCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataModelCode", dataModelCode);
            this.ValidateMethod("GetDataCategoriesWithDataItemsByDataModelQuery", parameters);
            return base.CreateQuery<DataCategory>("GetDataCategoriesWithDataItemsByDataModel", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataItem"/> entity instances using the 'GetDataItemByCode' query.
        /// </summary>
        /// <param name="dataitemCode">The value for the 'dataitemCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataItem"/> entity instances.</returns>
        public EntityQuery<DataItem> GetDataItemByCodeQuery(Guid dataitemCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataitemCode", dataitemCode);
            this.ValidateMethod("GetDataItemByCodeQuery", parameters);
            return base.CreateQuery<DataItem>("GetDataItemByCode", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataItem"/> entity instances using the 'GetDataItems' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataItem"/> entity instances.</returns>
        public EntityQuery<DataItem> GetDataItemsQuery()
        {
            this.ValidateMethod("GetDataItemsQuery", null);
            return base.CreateQuery<DataItem>("GetDataItems", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataModel"/> entity instances using the 'GetDataModels' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataModel"/> entity instances.</returns>
        public EntityQuery<DataModel> GetDataModelsQuery()
        {
            this.ValidateMethod("GetDataModelsQuery", null);
            return base.CreateQuery<DataModel>("GetDataModels", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTableJoin"/> entity instances using the 'GetDataTableJoins' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTableJoin"/> entity instances.</returns>
        public EntityQuery<DataTableJoin> GetDataTableJoinsQuery()
        {
            this.ValidateMethod("GetDataTableJoinsQuery", null);
            return base.CreateQuery<DataTableJoin>("GetDataTableJoins", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTableRelationshipJoin"/> entity instances using the 'GetDataTableRelationshipJoins' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTableRelationshipJoin"/> entity instances.</returns>
        public EntityQuery<DataTableRelationshipJoin> GetDataTableRelationshipJoinsQuery()
        {
            this.ValidateMethod("GetDataTableRelationshipJoinsQuery", null);
            return base.CreateQuery<DataTableRelationshipJoin>("GetDataTableRelationshipJoins", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTableRelationship"/> entity instances using the 'GetDataTableRelationships' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTableRelationship"/> entity instances.</returns>
        public EntityQuery<DataTableRelationship> GetDataTableRelationshipsQuery()
        {
            this.ValidateMethod("GetDataTableRelationshipsQuery", null);
            return base.CreateQuery<DataTableRelationship>("GetDataTableRelationships", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTableRelationship"/> entity instances using the 'GetDataTableRelationshipsByDataModel' query.
        /// </summary>
        /// <param name="dataModelCode">The value for the 'dataModelCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTableRelationship"/> entity instances.</returns>
        public EntityQuery<DataTableRelationship> GetDataTableRelationshipsByDataModelQuery(Guid dataModelCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataModelCode", dataModelCode);
            this.ValidateMethod("GetDataTableRelationshipsByDataModelQuery", parameters);
            return base.CreateQuery<DataTableRelationship>("GetDataTableRelationshipsByDataModel", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTable"/> entity instances using the 'GetDataTables' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTable"/> entity instances.</returns>
        public EntityQuery<DataTable> GetDataTablesQuery()
        {
            this.ValidateMethod("GetDataTablesQuery", null);
            return base.CreateQuery<DataTable>("GetDataTables", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTable"/> entity instances using the 'GetDataTablesByDataModel' query.
        /// </summary>
        /// <param name="dataModelCode">The value for the 'dataModelCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTable"/> entity instances.</returns>
        public EntityQuery<DataTable> GetDataTablesByDataModelQuery(Guid dataModelCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataModelCode", dataModelCode);
            this.ValidateMethod("GetDataTablesByDataModelQuery", parameters);
            return base.CreateQuery<DataTable>("GetDataTablesByDataModel", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Filter"/> entity instances using the 'GetFilters' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Filter"/> entity instances.</returns>
        public EntityQuery<Filter> GetFiltersQuery()
        {
            this.ValidateMethod("GetFiltersQuery", null);
            return base.CreateQuery<Filter>("GetFilters", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Report"/> entity instances using the 'GetReportByCode' query.
        /// </summary>
        /// <param name="reportCode">The value for the 'reportCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Report"/> entity instances.</returns>
        public EntityQuery<Report> GetReportByCodeQuery(Guid reportCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("reportCode", reportCode);
            this.ValidateMethod("GetReportByCodeQuery", parameters);
            return base.CreateQuery<Report>("GetReportByCode", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportCategory"/> entity instances using the 'GetReportCategorys' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportCategory"/> entity instances.</returns>
        public EntityQuery<ReportCategory> GetReportCategorysQuery()
        {
            this.ValidateMethod("GetReportCategorysQuery", null);
            return base.CreateQuery<ReportCategory>("GetReportCategorys", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportChart"/> entity instances using the 'GetReportCharts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportChart"/> entity instances.</returns>
        public EntityQuery<ReportChart> GetReportChartsQuery()
        {
            this.ValidateMethod("GetReportChartsQuery", null);
            return base.CreateQuery<ReportChart>("GetReportCharts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportChartSery"/> entity instances using the 'GetReportChartSeries' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportChartSery"/> entity instances.</returns>
        public EntityQuery<ReportChartSery> GetReportChartSeriesQuery()
        {
            this.ValidateMethod("GetReportChartSeriesQuery", null);
            return base.CreateQuery<ReportChartSery>("GetReportChartSeries", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportDataTableJoin"/> entity instances using the 'GetReportDataTableJoins' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportDataTableJoin"/> entity instances.</returns>
        public EntityQuery<ReportDataTableJoin> GetReportDataTableJoinsQuery()
        {
            this.ValidateMethod("GetReportDataTableJoinsQuery", null);
            return base.CreateQuery<ReportDataTableJoin>("GetReportDataTableJoins", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportGroup"/> entity instances using the 'GetReportGroupByCode' query.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportGroup"/> entity instances.</returns>
        public EntityQuery<ReportGroup> GetReportGroupByCodeQuery(Guid code)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("GetReportGroupByCodeQuery", parameters);
            return base.CreateQuery<ReportGroup>("GetReportGroupByCode", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportGroup"/> entity instances using the 'GetReportGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportGroup"/> entity instances.</returns>
        public EntityQuery<ReportGroup> GetReportGroupsQuery()
        {
            this.ValidateMethod("GetReportGroupsQuery", null);
            return base.CreateQuery<ReportGroup>("GetReportGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportGroup"/> entity instances using the 'GetReportGroupsForUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportGroup"/> entity instances.</returns>
        public EntityQuery<ReportGroup> GetReportGroupsForUserQuery()
        {
            this.ValidateMethod("GetReportGroupsForUserQuery", null);
            return base.CreateQuery<ReportGroup>("GetReportGroupsForUser", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ReportItem"/> entity instances using the 'GetReportItems' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ReportItem"/> entity instances.</returns>
        public EntityQuery<ReportItem> GetReportItemsQuery()
        {
            this.ValidateMethod("GetReportItemsQuery", null);
            return base.CreateQuery<ReportItem>("GetReportItems", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Report"/> entity instances using the 'GetReports' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Report"/> entity instances.</returns>
        public EntityQuery<Report> GetReportsQuery()
        {
            this.ValidateMethod("GetReportsQuery", null);
            return base.CreateQuery<Report>("GetReports", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StandardReport"/> entity instances using the 'GetStandardReports' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StandardReport"/> entity instances.</returns>
        public EntityQuery<StandardReport> GetStandardReportsQuery()
        {
            this.ValidateMethod("GetStandardReportsQuery", null);
            return base.CreateQuery<StandardReport>("GetStandardReports", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserReportGroup"/> entity instances using the 'GetUserReportGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserReportGroup"/> entity instances.</returns>
        public EntityQuery<UserReportGroup> GetUserReportGroupsQuery()
        {
            this.ValidateMethod("GetUserReportGroupsQuery", null);
            return base.CreateQuery<UserReportGroup>("GetUserReportGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataTableJoin"/> entity instances using the 'RetreiveJoinList' query.
        /// </summary>
        /// <param name="TableCodes">The value for the 'TableCodes' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataTableJoin"/> entity instances.</returns>
        public EntityQuery<DataTableJoin> RetreiveJoinListQuery(IEnumerable<Guid> TableCodes)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("TableCodes", TableCodes);
            this.ValidateMethod("RetreiveJoinListQuery", parameters);
            return base.CreateQuery<DataTableJoin>("RetreiveJoinList", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DataItem"/> entity instances using the 'RetrieveDataItem' query.
        /// </summary>
        /// <param name="dataitemcode">The value for the 'dataitemcode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DataItem"/> entity instances.</returns>
        public EntityQuery<DataItem> RetrieveDataItemQuery(Guid dataitemcode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataitemcode", dataitemcode);
            this.ValidateMethod("RetrieveDataItemQuery", parameters);
            return base.CreateQuery<DataItem>("RetrieveDataItem", parameters, false, false);
        }
        
        /// <summary>
        /// Invokes the 'GenerateReport' method of the specified <see cref="Report"/> entity.
        /// </summary>
        /// <param name="reportDefinitionSO">The <see cref="Report"/> entity instance.</param>
        public void GenerateReport(Report reportDefinitionSO)
        {
            reportDefinitionSO.GenerateReport();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetReferenceData' method of the DomainService.
        /// </summary>
        /// <param name="dataTableCode">The value for the 'dataTableCode' parameter of this action.</param>
        /// <param name="dataFieldName">The value for the 'dataFieldName' parameter of this action.</param>
        /// <param name="startsWith">The value for the 'startsWith' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetReferenceData(Guid dataTableCode, string dataFieldName, string startsWith, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataTableCode", dataTableCode);
            parameters.Add("dataFieldName", dataFieldName);
            parameters.Add("startsWith", startsWith);
            this.ValidateMethod("GetReferenceData", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetReferenceData", typeof(IEnumerable<string>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetReferenceData' method of the DomainService.
        /// </summary>
        /// <param name="dataTableCode">The value for the 'dataTableCode' parameter of this action.</param>
        /// <param name="dataFieldName">The value for the 'dataFieldName' parameter of this action.</param>
        /// <param name="startsWith">The value for the 'startsWith' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<string>> GetReferenceData(Guid dataTableCode, string dataFieldName, string startsWith)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dataTableCode", dataTableCode);
            parameters.Add("dataFieldName", dataFieldName);
            parameters.Add("startsWith", startsWith);
            this.ValidateMethod("GetReferenceData", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetReferenceData", typeof(IEnumerable<string>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InsertRelationships' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> InsertRelationships(Action<InvokeOperation<bool>> callback, object userState)
        {
            this.ValidateMethod("InsertRelationships", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("InsertRelationships", typeof(bool), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'InsertRelationships' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> InsertRelationships()
        {
            this.ValidateMethod("InsertRelationships", null);
            return ((InvokeOperation<bool>)(this.InvokeOperation("InsertRelationships", typeof(bool), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PutReportInSession' method of the DomainService.
        /// </summary>
        /// <param name="fullReportPath">The value for the 'fullReportPath' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PutReportInSession(string fullReportPath, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fullReportPath", fullReportPath);
            this.ValidateMethod("PutReportInSession", parameters);
            return this.InvokeOperation("PutReportInSession", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'PutReportInSession' method of the DomainService.
        /// </summary>
        /// <param name="fullReportPath">The value for the 'fullReportPath' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation PutReportInSession(string fullReportPath)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fullReportPath", fullReportPath);
            this.ValidateMethod("PutReportInSession", parameters);
            return this.InvokeOperation("PutReportInSession", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ReportWizardContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ReportWizardService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IReportWizardServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllMCUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetAllMCUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetAllMCUser", ReplyAction="http://tempuri.org/ReportWizardService/GetAllMCUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllMCUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllMCUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllMCUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllMCUser' operation.</returns>
            QueryResult<MCUser> EndGetAllMCUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllReportGroupsForUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetAllReportGroupsForUserDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetAllReportGroupsForUser", ReplyAction="http://tempuri.org/ReportWizardService/GetAllReportGroupsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllReportGroupsForUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllReportGroupsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllReportGroupsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllReportGroupsForUser' operation.</returns>
            QueryResult<ReportGroup> EndGetAllReportGroupsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAllReportsForReportGroup' operation.
            /// </summary>
            /// <param name="reportGroupCode">The value for the 'reportGroupCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetAllReportsForReportGroupDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetAllReportsForReportGroup", ReplyAction="http://tempuri.org/ReportWizardService/GetAllReportsForReportGroupResponse")]
            [WebGet()]
            IAsyncResult BeginGetAllReportsForReportGroup(Guid reportGroupCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAllReportsForReportGroup'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAllReportsForReportGroup'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAllReportsForReportGroup' operation.</returns>
            QueryResult<Report> EndGetAllReportsForReportGroup(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataCategories", ReplyAction="http://tempuri.org/ReportWizardService/GetDataCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataCategories' operation.</returns>
            QueryResult<DataCategory> EndGetDataCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataCategoriesWithDataItemsByDataModel' operation.
            /// </summary>
            /// <param name="dataModelCode">The value for the 'dataModelCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataCategoriesWithDataItemsByDataModelD" +
                "omainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataCategoriesWithDataItemsByDataModel", ReplyAction="http://tempuri.org/ReportWizardService/GetDataCategoriesWithDataItemsByDataModelR" +
                "esponse")]
            [WebGet()]
            IAsyncResult BeginGetDataCategoriesWithDataItemsByDataModel(Guid dataModelCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataCategoriesWithDataItemsByDataModel'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataCategoriesWithDataItemsByDataModel'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataCategoriesWithDataItemsByDataModel' operation.</returns>
            QueryResult<DataCategory> EndGetDataCategoriesWithDataItemsByDataModel(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataItemByCode' operation.
            /// </summary>
            /// <param name="dataitemCode">The value for the 'dataitemCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataItemByCodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataItemByCode", ReplyAction="http://tempuri.org/ReportWizardService/GetDataItemByCodeResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataItemByCode(Guid dataitemCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataItemByCode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataItemByCode'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataItemByCode' operation.</returns>
            QueryResult<DataItem> EndGetDataItemByCode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataItems' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataItemsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataItems", ReplyAction="http://tempuri.org/ReportWizardService/GetDataItemsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataItems(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataItems'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataItems'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataItems' operation.</returns>
            QueryResult<DataItem> EndGetDataItems(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataModels' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataModelsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataModels", ReplyAction="http://tempuri.org/ReportWizardService/GetDataModelsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataModels(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataModels'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataModels'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataModels' operation.</returns>
            QueryResult<DataModel> EndGetDataModels(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataTableJoins' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataTableJoinsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataTableJoins", ReplyAction="http://tempuri.org/ReportWizardService/GetDataTableJoinsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataTableJoins(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataTableJoins'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataTableJoins'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataTableJoins' operation.</returns>
            QueryResult<DataTableJoin> EndGetDataTableJoins(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataTableRelationshipJoins' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataTableRelationshipJoinsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataTableRelationshipJoins", ReplyAction="http://tempuri.org/ReportWizardService/GetDataTableRelationshipJoinsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataTableRelationshipJoins(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataTableRelationshipJoins'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataTableRelationshipJoins'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataTableRelationshipJoins' operation.</returns>
            QueryResult<DataTableRelationshipJoin> EndGetDataTableRelationshipJoins(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataTableRelationships' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataTableRelationshipsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataTableRelationships", ReplyAction="http://tempuri.org/ReportWizardService/GetDataTableRelationshipsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataTableRelationships(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataTableRelationships'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataTableRelationships'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataTableRelationships' operation.</returns>
            QueryResult<DataTableRelationship> EndGetDataTableRelationships(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataTableRelationshipsByDataModel' operation.
            /// </summary>
            /// <param name="dataModelCode">The value for the 'dataModelCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataTableRelationshipsByDataModelDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataTableRelationshipsByDataModel", ReplyAction="http://tempuri.org/ReportWizardService/GetDataTableRelationshipsByDataModelRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetDataTableRelationshipsByDataModel(Guid dataModelCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataTableRelationshipsByDataModel'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataTableRelationshipsByDataModel'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataTableRelationshipsByDataModel' operation.</returns>
            QueryResult<DataTableRelationship> EndGetDataTableRelationshipsByDataModel(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataTables' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataTablesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataTables", ReplyAction="http://tempuri.org/ReportWizardService/GetDataTablesResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataTables(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataTables'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataTables'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataTables' operation.</returns>
            QueryResult<DataTable> EndGetDataTables(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDataTablesByDataModel' operation.
            /// </summary>
            /// <param name="dataModelCode">The value for the 'dataModelCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetDataTablesByDataModelDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetDataTablesByDataModel", ReplyAction="http://tempuri.org/ReportWizardService/GetDataTablesByDataModelResponse")]
            [WebGet()]
            IAsyncResult BeginGetDataTablesByDataModel(Guid dataModelCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDataTablesByDataModel'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDataTablesByDataModel'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDataTablesByDataModel' operation.</returns>
            QueryResult<DataTable> EndGetDataTablesByDataModel(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFilters' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetFiltersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetFilters", ReplyAction="http://tempuri.org/ReportWizardService/GetFiltersResponse")]
            [WebGet()]
            IAsyncResult BeginGetFilters(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFilters'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFilters'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFilters' operation.</returns>
            QueryResult<Filter> EndGetFilters(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReferenceData' operation.
            /// </summary>
            /// <param name="dataTableCode">The value for the 'dataTableCode' parameter of this action.</param>
            /// <param name="dataFieldName">The value for the 'dataFieldName' parameter of this action.</param>
            /// <param name="startsWith">The value for the 'startsWith' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReferenceDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReferenceData", ReplyAction="http://tempuri.org/ReportWizardService/GetReferenceDataResponse")]
            IAsyncResult BeginGetReferenceData(Guid dataTableCode, string dataFieldName, string startsWith, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReferenceData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReferenceData'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetReferenceData' operation.</returns>
            IEnumerable<string> EndGetReferenceData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportByCode' operation.
            /// </summary>
            /// <param name="reportCode">The value for the 'reportCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportByCodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportByCode", ReplyAction="http://tempuri.org/ReportWizardService/GetReportByCodeResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportByCode(Guid reportCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportByCode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportByCode'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportByCode' operation.</returns>
            QueryResult<Report> EndGetReportByCode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportCategorys' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportCategorysDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportCategorys", ReplyAction="http://tempuri.org/ReportWizardService/GetReportCategorysResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportCategorys(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportCategorys'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportCategorys'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportCategorys' operation.</returns>
            QueryResult<ReportCategory> EndGetReportCategorys(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportCharts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportChartsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportCharts", ReplyAction="http://tempuri.org/ReportWizardService/GetReportChartsResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportCharts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportCharts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportCharts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportCharts' operation.</returns>
            QueryResult<ReportChart> EndGetReportCharts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportChartSeries' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportChartSeriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportChartSeries", ReplyAction="http://tempuri.org/ReportWizardService/GetReportChartSeriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportChartSeries(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportChartSeries'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportChartSeries'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportChartSeries' operation.</returns>
            QueryResult<ReportChartSery> EndGetReportChartSeries(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportDataTableJoins' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportDataTableJoinsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportDataTableJoins", ReplyAction="http://tempuri.org/ReportWizardService/GetReportDataTableJoinsResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportDataTableJoins(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportDataTableJoins'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportDataTableJoins'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportDataTableJoins' operation.</returns>
            QueryResult<ReportDataTableJoin> EndGetReportDataTableJoins(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportGroupByCode' operation.
            /// </summary>
            /// <param name="code">The value for the 'code' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportGroupByCodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportGroupByCode", ReplyAction="http://tempuri.org/ReportWizardService/GetReportGroupByCodeResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportGroupByCode(Guid code, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportGroupByCode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportGroupByCode'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportGroupByCode' operation.</returns>
            QueryResult<ReportGroup> EndGetReportGroupByCode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportGroups", ReplyAction="http://tempuri.org/ReportWizardService/GetReportGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportGroups' operation.</returns>
            QueryResult<ReportGroup> EndGetReportGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportGroupsForUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportGroupsForUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportGroupsForUser", ReplyAction="http://tempuri.org/ReportWizardService/GetReportGroupsForUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportGroupsForUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportGroupsForUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportGroupsForUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportGroupsForUser' operation.</returns>
            QueryResult<ReportGroup> EndGetReportGroupsForUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReportItems' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportItemsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReportItems", ReplyAction="http://tempuri.org/ReportWizardService/GetReportItemsResponse")]
            [WebGet()]
            IAsyncResult BeginGetReportItems(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReportItems'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReportItems'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReportItems' operation.</returns>
            QueryResult<ReportItem> EndGetReportItems(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetReports' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetReportsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetReports", ReplyAction="http://tempuri.org/ReportWizardService/GetReportsResponse")]
            [WebGet()]
            IAsyncResult BeginGetReports(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetReports'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetReports'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetReports' operation.</returns>
            QueryResult<Report> EndGetReports(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStandardReports' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetStandardReportsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetStandardReports", ReplyAction="http://tempuri.org/ReportWizardService/GetStandardReportsResponse")]
            [WebGet()]
            IAsyncResult BeginGetStandardReports(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStandardReports'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStandardReports'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStandardReports' operation.</returns>
            QueryResult<StandardReport> EndGetStandardReports(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserReportGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/GetUserReportGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/GetUserReportGroups", ReplyAction="http://tempuri.org/ReportWizardService/GetUserReportGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserReportGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserReportGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserReportGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserReportGroups' operation.</returns>
            QueryResult<UserReportGroup> EndGetUserReportGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'InsertRelationships' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/InsertRelationshipsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/InsertRelationships", ReplyAction="http://tempuri.org/ReportWizardService/InsertRelationshipsResponse")]
            IAsyncResult BeginInsertRelationships(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginInsertRelationships'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginInsertRelationships'.</param>
            /// <returns>The 'Boolean' returned from the 'InsertRelationships' operation.</returns>
            bool EndInsertRelationships(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'PutReportInSession' operation.
            /// </summary>
            /// <param name="fullReportPath">The value for the 'fullReportPath' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/PutReportInSessionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/PutReportInSession", ReplyAction="http://tempuri.org/ReportWizardService/PutReportInSessionResponse")]
            IAsyncResult BeginPutReportInSession(string fullReportPath, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginPutReportInSession'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginPutReportInSession'.</param>
            void EndPutReportInSession(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RetreiveJoinList' operation.
            /// </summary>
            /// <param name="TableCodes">The value for the 'TableCodes' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/RetreiveJoinListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/RetreiveJoinList", ReplyAction="http://tempuri.org/ReportWizardService/RetreiveJoinListResponse")]
            [WebGet()]
            IAsyncResult BeginRetreiveJoinList(IEnumerable<Guid> TableCodes, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRetreiveJoinList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRetreiveJoinList'.</param>
            /// <returns>The 'QueryResult' returned from the 'RetreiveJoinList' operation.</returns>
            QueryResult<DataTableJoin> EndRetreiveJoinList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RetrieveDataItem' operation.
            /// </summary>
            /// <param name="dataitemcode">The value for the 'dataitemcode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/RetrieveDataItemDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/RetrieveDataItem", ReplyAction="http://tempuri.org/ReportWizardService/RetrieveDataItemResponse")]
            [WebGet()]
            IAsyncResult BeginRetrieveDataItem(Guid dataitemcode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRetrieveDataItem'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRetrieveDataItem'.</param>
            /// <returns>The 'QueryResult' returned from the 'RetrieveDataItem' operation.</returns>
            QueryResult<DataItem> EndRetrieveDataItem(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ReportWizardService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ReportWizardService/SubmitChanges", ReplyAction="http://tempuri.org/ReportWizardService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ReportWizardContextEntityContainer : EntityContainer
        {
            
            public ReportWizardContextEntityContainer()
            {
                this.CreateEntitySet<Alert>(EntitySetOperations.None);
                this.CreateEntitySet<AlertUser>(EntitySetOperations.None);
                this.CreateEntitySet<DataCategory>(EntitySetOperations.All);
                this.CreateEntitySet<DataItem>(EntitySetOperations.All);
                this.CreateEntitySet<DataModel>(EntitySetOperations.All);
                this.CreateEntitySet<DataTable>(EntitySetOperations.All);
                this.CreateEntitySet<DataTableJoin>(EntitySetOperations.All);
                this.CreateEntitySet<DataTableRelationship>(EntitySetOperations.All);
                this.CreateEntitySet<DataTableRelationshipJoin>(EntitySetOperations.All);
                this.CreateEntitySet<Filter>(EntitySetOperations.All);
                this.CreateEntitySet<MCRole>(EntitySetOperations.None);
                this.CreateEntitySet<MCUser>(EntitySetOperations.None);
                this.CreateEntitySet<MCUserRole>(EntitySetOperations.None);
                this.CreateEntitySet<Report>(EntitySetOperations.All);
                this.CreateEntitySet<ReportCategory>(EntitySetOperations.None);
                this.CreateEntitySet<ReportChart>(EntitySetOperations.All);
                this.CreateEntitySet<ReportChartSery>(EntitySetOperations.All);
                this.CreateEntitySet<ReportDataTableJoin>(EntitySetOperations.All);
                this.CreateEntitySet<ReportGroup>(EntitySetOperations.All);
                this.CreateEntitySet<ReportItem>(EntitySetOperations.All);
                this.CreateEntitySet<StandardReport>(EntitySetOperations.Add);
                this.CreateEntitySet<UserReportGroup>(EntitySetOperations.All);
            }
        }
    }
}
namespace UcbManagementInformation.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using UcbManagementInformation.Server.DataAccess;
    using UcbManagementInformation.Server.DataAccess.BusinessObjects;
    using UcbManagementInformation.Web.MIFileUpload.JobQueue.Jobs;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AlertService' DomainService.
    /// </summary>
    public sealed partial class AlertContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertContext"/> class.
        /// </summary>
        public AlertContext() : 
                this(new WebDomainClient<IAlertServiceContract>(new Uri("UcbManagementInformation-Web-Services-AlertService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AlertService service URI.</param>
        public AlertContext(Uri serviceUri) : 
                this(new WebDomainClient<IAlertServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AlertContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Alert"/> entity instances that have been loaded into this <see cref="AlertContext"/> instance.
        /// </summary>
        public EntitySet<Alert> Alerts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Alert>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AlertUser"/> entity instances that have been loaded into this <see cref="AlertContext"/> instance.
        /// </summary>
        public EntitySet<AlertUser> AlertUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AlertUser>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Alert"/> entity instances using the 'GetAlerts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Alert"/> entity instances.</returns>
        public EntityQuery<Alert> GetAlertsQuery()
        {
            this.ValidateMethod("GetAlertsQuery", null);
            return base.CreateQuery<Alert>("GetAlerts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AlertUser"/> entity instances using the 'GetAlertUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AlertUser"/> entity instances.</returns>
        public EntityQuery<AlertUser> GetAlertUsersQuery()
        {
            this.ValidateMethod("GetAlertUsersQuery", null);
            return base.CreateQuery<AlertUser>("GetAlertUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Alert"/> entity instances using the 'GetMyAlerts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Alert"/> entity instances.</returns>
        public EntityQuery<Alert> GetMyAlertsQuery()
        {
            this.ValidateMethod("GetMyAlertsQuery", null);
            return base.CreateQuery<Alert>("GetMyAlerts", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AlertContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AlertService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAlertServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAlerts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AlertService/GetAlertsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AlertService/GetAlerts", ReplyAction="http://tempuri.org/AlertService/GetAlertsResponse")]
            [WebGet()]
            IAsyncResult BeginGetAlerts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAlerts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAlerts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAlerts' operation.</returns>
            QueryResult<Alert> EndGetAlerts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAlertUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AlertService/GetAlertUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AlertService/GetAlertUsers", ReplyAction="http://tempuri.org/AlertService/GetAlertUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetAlertUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAlertUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAlertUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAlertUsers' operation.</returns>
            QueryResult<AlertUser> EndGetAlertUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMyAlerts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AlertService/GetMyAlertsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AlertService/GetMyAlerts", ReplyAction="http://tempuri.org/AlertService/GetMyAlertsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMyAlerts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMyAlerts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMyAlerts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMyAlerts' operation.</returns>
            QueryResult<Alert> EndGetMyAlerts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AlertService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AlertService/SubmitChanges", ReplyAction="http://tempuri.org/AlertService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AlertContextEntityContainer : EntityContainer
        {
            
            public AlertContextEntityContainer()
            {
                this.CreateEntitySet<Alert>(EntitySetOperations.All);
                this.CreateEntitySet<AlertUser>(EntitySetOperations.All);
                this.CreateEntitySet<DataCategory>(EntitySetOperations.None);
                this.CreateEntitySet<DataItem>(EntitySetOperations.None);
                this.CreateEntitySet<DataModel>(EntitySetOperations.None);
                this.CreateEntitySet<DataTable>(EntitySetOperations.None);
                this.CreateEntitySet<DataTableJoin>(EntitySetOperations.None);
                this.CreateEntitySet<DataTableRelationship>(EntitySetOperations.None);
                this.CreateEntitySet<DataTableRelationshipJoin>(EntitySetOperations.None);
                this.CreateEntitySet<Filter>(EntitySetOperations.None);
                this.CreateEntitySet<MCRole>(EntitySetOperations.None);
                this.CreateEntitySet<MCUser>(EntitySetOperations.None);
                this.CreateEntitySet<MCUserRole>(EntitySetOperations.None);
                this.CreateEntitySet<Report>(EntitySetOperations.None);
                this.CreateEntitySet<ReportChart>(EntitySetOperations.None);
                this.CreateEntitySet<ReportChartSery>(EntitySetOperations.None);
                this.CreateEntitySet<ReportDataTableJoin>(EntitySetOperations.None);
                this.CreateEntitySet<ReportGroup>(EntitySetOperations.None);
                this.CreateEntitySet<ReportItem>(EntitySetOperations.None);
                this.CreateEntitySet<UserReportGroup>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MIUploadService' DomainService.
    /// </summary>
    public sealed partial class MIUploadContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MIUploadContext"/> class.
        /// </summary>
        public MIUploadContext() : 
                this(new WebDomainClient<IMIUploadServiceContract>(new Uri("UcbManagementInformation-Web-Services-MIUploadService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MIUploadContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MIUploadService service URI.</param>
        public MIUploadContext(Uri serviceUri) : 
                this(new WebDomainClient<IMIUploadServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MIUploadContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MIUploadContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="InputFileErrorSummary"/> entity instances that have been loaded into this <see cref="MIUploadContext"/> instance.
        /// </summary>
        public EntitySet<InputFileErrorSummary> InputFileErrorSummaries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InputFileErrorSummary>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="InputFileHistory"/> entity instances that have been loaded into this <see cref="MIUploadContext"/> instance.
        /// </summary>
        public EntitySet<InputFileHistory> InputFileHistories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<InputFileHistory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProviderOrganisation"/> entity instances that have been loaded into this <see cref="MIUploadContext"/> instance.
        /// </summary>
        public EntitySet<ProviderOrganisation> ProviderOrganisations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProviderOrganisation>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InputFileErrorSummary"/> entity instances using the 'GetInputFileErrorsSummary' query.
        /// </summary>
        /// <param name="uploadFileHistoryCode">The value for the 'uploadFileHistoryCode' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InputFileErrorSummary"/> entity instances.</returns>
        public EntityQuery<InputFileErrorSummary> GetInputFileErrorsSummaryQuery(Guid uploadFileHistoryCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("uploadFileHistoryCode", uploadFileHistoryCode);
            this.ValidateMethod("GetInputFileErrorsSummaryQuery", parameters);
            return base.CreateQuery<InputFileErrorSummary>("GetInputFileErrorsSummary", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InputFileHistory"/> entity instances using the 'GetInputFileHistories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InputFileHistory"/> entity instances.</returns>
        public EntityQuery<InputFileHistory> GetInputFileHistoriesQuery()
        {
            this.ValidateMethod("GetInputFileHistoriesQuery", null);
            return base.CreateQuery<InputFileHistory>("GetInputFileHistories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InputFileHistory"/> entity instances using the 'GetInputFileHistoriesByProviderKey' query.
        /// </summary>
        /// <param name="providerKey">The value for the 'providerKey' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InputFileHistory"/> entity instances.</returns>
        public EntityQuery<InputFileHistory> GetInputFileHistoriesByProviderKeyQuery(string providerKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("providerKey", providerKey);
            this.ValidateMethod("GetInputFileHistoriesByProviderKeyQuery", parameters);
            return base.CreateQuery<InputFileHistory>("GetInputFileHistoriesByProviderKey", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="InputFileHistory"/> entity instances using the 'GetInputFileHistoryAndPreviousByProviderKey' query.
        /// </summary>
        /// <param name="providerKey">The value for the 'providerKey' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="InputFileHistory"/> entity instances.</returns>
        public EntityQuery<InputFileHistory> GetInputFileHistoryAndPreviousByProviderKeyQuery(string providerKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("providerKey", providerKey);
            this.ValidateMethod("GetInputFileHistoryAndPreviousByProviderKeyQuery", parameters);
            return base.CreateQuery<InputFileHistory>("GetInputFileHistoryAndPreviousByProviderKey", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProviderOrganisation"/> entity instances using the 'GetProviderOrganisations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProviderOrganisation"/> entity instances.</returns>
        public EntityQuery<ProviderOrganisation> GetProviderOrganisationsQuery()
        {
            this.ValidateMethod("GetProviderOrganisationsQuery", null);
            return base.CreateQuery<ProviderOrganisation>("GetProviderOrganisations", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CancelUpload' method of the DomainService.
        /// </summary>
        /// <param name="InputFileHistory">The value for the 'InputFileHistory' parameter of this action.</param>
        /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> CancelUpload(Guid InputFileHistory, string ProviderKeyValue, Action<InvokeOperation<Guid>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("InputFileHistory", InputFileHistory);
            parameters.Add("ProviderKeyValue", ProviderKeyValue);
            this.ValidateMethod("CancelUpload", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("CancelUpload", typeof(Guid), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CancelUpload' method of the DomainService.
        /// </summary>
        /// <param name="InputFileHistory">The value for the 'InputFileHistory' parameter of this action.</param>
        /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> CancelUpload(Guid InputFileHistory, string ProviderKeyValue)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("InputFileHistory", InputFileHistory);
            parameters.Add("ProviderKeyValue", ProviderKeyValue);
            this.ValidateMethod("CancelUpload", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("CancelUpload", typeof(Guid), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetActiveFileUploadJobs' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<JobBase>> GetActiveFileUploadJobs(Action<InvokeOperation<IEnumerable<JobBase>>> callback, object userState)
        {
            this.ValidateMethod("GetActiveFileUploadJobs", null);
            return ((InvokeOperation<IEnumerable<JobBase>>)(this.InvokeOperation("GetActiveFileUploadJobs", typeof(IEnumerable<JobBase>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetActiveFileUploadJobs' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<JobBase>> GetActiveFileUploadJobs()
        {
            this.ValidateMethod("GetActiveFileUploadJobs", null);
            return ((InvokeOperation<IEnumerable<JobBase>>)(this.InvokeOperation("GetActiveFileUploadJobs", typeof(IEnumerable<JobBase>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCompleteFileUploadJobs' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<JobBase>> GetCompleteFileUploadJobs(Action<InvokeOperation<IEnumerable<JobBase>>> callback, object userState)
        {
            this.ValidateMethod("GetCompleteFileUploadJobs", null);
            return ((InvokeOperation<IEnumerable<JobBase>>)(this.InvokeOperation("GetCompleteFileUploadJobs", typeof(IEnumerable<JobBase>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetCompleteFileUploadJobs' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<IEnumerable<JobBase>> GetCompleteFileUploadJobs()
        {
            this.ValidateMethod("GetCompleteFileUploadJobs", null);
            return ((InvokeOperation<IEnumerable<JobBase>>)(this.InvokeOperation("GetCompleteFileUploadJobs", typeof(IEnumerable<JobBase>), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetFileUploadJobByCode' method of the DomainService.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<JobBase> GetFileUploadJobByCode(Guid code, Action<InvokeOperation<JobBase>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("GetFileUploadJobByCode", parameters);
            return ((InvokeOperation<JobBase>)(this.InvokeOperation("GetFileUploadJobByCode", typeof(JobBase), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetFileUploadJobByCode' method of the DomainService.
        /// </summary>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<JobBase> GetFileUploadJobByCode(Guid code)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            this.ValidateMethod("GetFileUploadJobByCode", parameters);
            return ((InvokeOperation<JobBase>)(this.InvokeOperation("GetFileUploadJobByCode", typeof(JobBase), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadRecords' method of the DomainService.
        /// </summary>
        /// <param name="InputFileHistory">The value for the 'InputFileHistory' parameter of this action.</param>
        /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
        /// <param name="decisionLevel">The value for the 'decisionLevel' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> LoadRecords(Guid InputFileHistory, string ProviderKeyValue, string decisionLevel, Action<InvokeOperation<Guid>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("InputFileHistory", InputFileHistory);
            parameters.Add("ProviderKeyValue", ProviderKeyValue);
            parameters.Add("decisionLevel", decisionLevel);
            this.ValidateMethod("LoadRecords", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("LoadRecords", typeof(Guid), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'LoadRecords' method of the DomainService.
        /// </summary>
        /// <param name="InputFileHistory">The value for the 'InputFileHistory' parameter of this action.</param>
        /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
        /// <param name="decisionLevel">The value for the 'decisionLevel' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> LoadRecords(Guid InputFileHistory, string ProviderKeyValue, string decisionLevel)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("InputFileHistory", InputFileHistory);
            parameters.Add("ProviderKeyValue", ProviderKeyValue);
            parameters.Add("decisionLevel", decisionLevel);
            this.ValidateMethod("LoadRecords", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("LoadRecords", typeof(Guid), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFile' method of the DomainService.
        /// </summary>
        /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
        /// <param name="fileType">The value for the 'fileType' parameter of this action.</param>
        /// <param name="FileName">The value for the 'FileName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> UploadFile(string ProviderKeyValue, string fileType, string FileName, Action<InvokeOperation<Guid>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ProviderKeyValue", ProviderKeyValue);
            parameters.Add("fileType", fileType);
            parameters.Add("FileName", FileName);
            this.ValidateMethod("UploadFile", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("UploadFile", typeof(Guid), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFile' method of the DomainService.
        /// </summary>
        /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
        /// <param name="fileType">The value for the 'fileType' parameter of this action.</param>
        /// <param name="FileName">The value for the 'FileName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> UploadFile(string ProviderKeyValue, string fileType, string FileName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ProviderKeyValue", ProviderKeyValue);
            parameters.Add("fileType", fileType);
            parameters.Add("FileName", FileName);
            this.ValidateMethod("UploadFile", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("UploadFile", typeof(Guid), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadPostCodeFiles' method of the DomainService.
        /// </summary>
        /// <param name="FileNameWPC">The value for the 'FileNameWPC' parameter of this action.</param>
        /// <param name="FileNameLA">The value for the 'FileNameLA' parameter of this action.</param>
        /// <param name="FileNameCty">The value for the 'FileNameCty' parameter of this action.</param>
        /// <param name="FileNameLEA">The value for the 'FileNameLEA' parameter of this action.</param>
        /// <param name="FileNameNUTS1">The value for the 'FileNameNUTS1' parameter of this action.</param>
        /// <param name="FileNameWD">The value for the 'FileNameWD' parameter of this action.</param>
        /// <param name="FileNamePC">The value for the 'FileNamePC' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> UploadPostCodeFiles(string FileNameWPC, string FileNameLA, string FileNameCty, string FileNameLEA, string FileNameNUTS1, string FileNameWD, string FileNamePC, Action<InvokeOperation<Guid>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("FileNameWPC", FileNameWPC);
            parameters.Add("FileNameLA", FileNameLA);
            parameters.Add("FileNameCty", FileNameCty);
            parameters.Add("FileNameLEA", FileNameLEA);
            parameters.Add("FileNameNUTS1", FileNameNUTS1);
            parameters.Add("FileNameWD", FileNameWD);
            parameters.Add("FileNamePC", FileNamePC);
            this.ValidateMethod("UploadPostCodeFiles", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("UploadPostCodeFiles", typeof(Guid), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadPostCodeFiles' method of the DomainService.
        /// </summary>
        /// <param name="FileNameWPC">The value for the 'FileNameWPC' parameter of this action.</param>
        /// <param name="FileNameLA">The value for the 'FileNameLA' parameter of this action.</param>
        /// <param name="FileNameCty">The value for the 'FileNameCty' parameter of this action.</param>
        /// <param name="FileNameLEA">The value for the 'FileNameLEA' parameter of this action.</param>
        /// <param name="FileNameNUTS1">The value for the 'FileNameNUTS1' parameter of this action.</param>
        /// <param name="FileNameWD">The value for the 'FileNameWD' parameter of this action.</param>
        /// <param name="FileNamePC">The value for the 'FileNamePC' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<Guid> UploadPostCodeFiles(string FileNameWPC, string FileNameLA, string FileNameCty, string FileNameLEA, string FileNameNUTS1, string FileNameWD, string FileNamePC)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("FileNameWPC", FileNameWPC);
            parameters.Add("FileNameLA", FileNameLA);
            parameters.Add("FileNameCty", FileNameCty);
            parameters.Add("FileNameLEA", FileNameLEA);
            parameters.Add("FileNameNUTS1", FileNameNUTS1);
            parameters.Add("FileNameWD", FileNameWD);
            parameters.Add("FileNamePC", FileNamePC);
            this.ValidateMethod("UploadPostCodeFiles", parameters);
            return ((InvokeOperation<Guid>)(this.InvokeOperation("UploadPostCodeFiles", typeof(Guid), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MIUploadContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MIUploadService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMIUploadServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CancelUpload' operation.
            /// </summary>
            /// <param name="InputFileHistory">The value for the 'InputFileHistory' parameter of this action.</param>
            /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/CancelUploadDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/CancelUpload", ReplyAction="http://tempuri.org/MIUploadService/CancelUploadResponse")]
            IAsyncResult BeginCancelUpload(Guid InputFileHistory, string ProviderKeyValue, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCancelUpload'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCancelUpload'.</param>
            /// <returns>The 'Guid' returned from the 'CancelUpload' operation.</returns>
            Guid EndCancelUpload(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActiveFileUploadJobs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetActiveFileUploadJobsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetActiveFileUploadJobs", ReplyAction="http://tempuri.org/MIUploadService/GetActiveFileUploadJobsResponse")]
            IAsyncResult BeginGetActiveFileUploadJobs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActiveFileUploadJobs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActiveFileUploadJobs'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetActiveFileUploadJobs' operation.</returns>
            IEnumerable<JobBase> EndGetActiveFileUploadJobs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompleteFileUploadJobs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetCompleteFileUploadJobsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetCompleteFileUploadJobs", ReplyAction="http://tempuri.org/MIUploadService/GetCompleteFileUploadJobsResponse")]
            IAsyncResult BeginGetCompleteFileUploadJobs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompleteFileUploadJobs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompleteFileUploadJobs'.</param>
            /// <returns>The 'IEnumerable`1' returned from the 'GetCompleteFileUploadJobs' operation.</returns>
            IEnumerable<JobBase> EndGetCompleteFileUploadJobs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFileUploadJobByCode' operation.
            /// </summary>
            /// <param name="code">The value for the 'code' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetFileUploadJobByCodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetFileUploadJobByCode", ReplyAction="http://tempuri.org/MIUploadService/GetFileUploadJobByCodeResponse")]
            IAsyncResult BeginGetFileUploadJobByCode(Guid code, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFileUploadJobByCode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFileUploadJobByCode'.</param>
            /// <returns>The 'JobBase' returned from the 'GetFileUploadJobByCode' operation.</returns>
            JobBase EndGetFileUploadJobByCode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInputFileErrorsSummary' operation.
            /// </summary>
            /// <param name="uploadFileHistoryCode">The value for the 'uploadFileHistoryCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetInputFileErrorsSummaryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetInputFileErrorsSummary", ReplyAction="http://tempuri.org/MIUploadService/GetInputFileErrorsSummaryResponse")]
            [WebGet()]
            IAsyncResult BeginGetInputFileErrorsSummary(Guid uploadFileHistoryCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInputFileErrorsSummary'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInputFileErrorsSummary'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInputFileErrorsSummary' operation.</returns>
            QueryResult<InputFileErrorSummary> EndGetInputFileErrorsSummary(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInputFileHistories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetInputFileHistoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetInputFileHistories", ReplyAction="http://tempuri.org/MIUploadService/GetInputFileHistoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetInputFileHistories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInputFileHistories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInputFileHistories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInputFileHistories' operation.</returns>
            QueryResult<InputFileHistory> EndGetInputFileHistories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInputFileHistoriesByProviderKey' operation.
            /// </summary>
            /// <param name="providerKey">The value for the 'providerKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetInputFileHistoriesByProviderKeyDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetInputFileHistoriesByProviderKey", ReplyAction="http://tempuri.org/MIUploadService/GetInputFileHistoriesByProviderKeyResponse")]
            [WebGet()]
            IAsyncResult BeginGetInputFileHistoriesByProviderKey(string providerKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInputFileHistoriesByProviderKey'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInputFileHistoriesByProviderKey'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInputFileHistoriesByProviderKey' operation.</returns>
            QueryResult<InputFileHistory> EndGetInputFileHistoriesByProviderKey(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetInputFileHistoryAndPreviousByProviderKey' operation.
            /// </summary>
            /// <param name="providerKey">The value for the 'providerKey' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetInputFileHistoryAndPreviousByProviderKeyDom" +
                "ainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetInputFileHistoryAndPreviousByProviderKey", ReplyAction="http://tempuri.org/MIUploadService/GetInputFileHistoryAndPreviousByProviderKeyRes" +
                "ponse")]
            [WebGet()]
            IAsyncResult BeginGetInputFileHistoryAndPreviousByProviderKey(string providerKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetInputFileHistoryAndPreviousByProviderKey'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetInputFileHistoryAndPreviousByProviderKey'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetInputFileHistoryAndPreviousByProviderKey' operation.</returns>
            QueryResult<InputFileHistory> EndGetInputFileHistoryAndPreviousByProviderKey(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProviderOrganisations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/GetProviderOrganisationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/GetProviderOrganisations", ReplyAction="http://tempuri.org/MIUploadService/GetProviderOrganisationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProviderOrganisations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProviderOrganisations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProviderOrganisations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProviderOrganisations' operation.</returns>
            QueryResult<ProviderOrganisation> EndGetProviderOrganisations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'LoadRecords' operation.
            /// </summary>
            /// <param name="InputFileHistory">The value for the 'InputFileHistory' parameter of this action.</param>
            /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
            /// <param name="decisionLevel">The value for the 'decisionLevel' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/LoadRecordsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/LoadRecords", ReplyAction="http://tempuri.org/MIUploadService/LoadRecordsResponse")]
            IAsyncResult BeginLoadRecords(Guid InputFileHistory, string ProviderKeyValue, string decisionLevel, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLoadRecords'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLoadRecords'.</param>
            /// <returns>The 'Guid' returned from the 'LoadRecords' operation.</returns>
            Guid EndLoadRecords(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UploadFile' operation.
            /// </summary>
            /// <param name="ProviderKeyValue">The value for the 'ProviderKeyValue' parameter of this action.</param>
            /// <param name="fileType">The value for the 'fileType' parameter of this action.</param>
            /// <param name="FileName">The value for the 'FileName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/UploadFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/UploadFile", ReplyAction="http://tempuri.org/MIUploadService/UploadFileResponse")]
            IAsyncResult BeginUploadFile(string ProviderKeyValue, string fileType, string FileName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUploadFile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUploadFile'.</param>
            /// <returns>The 'Guid' returned from the 'UploadFile' operation.</returns>
            Guid EndUploadFile(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UploadPostCodeFiles' operation.
            /// </summary>
            /// <param name="FileNameWPC">The value for the 'FileNameWPC' parameter of this action.</param>
            /// <param name="FileNameLA">The value for the 'FileNameLA' parameter of this action.</param>
            /// <param name="FileNameCty">The value for the 'FileNameCty' parameter of this action.</param>
            /// <param name="FileNameLEA">The value for the 'FileNameLEA' parameter of this action.</param>
            /// <param name="FileNameNUTS1">The value for the 'FileNameNUTS1' parameter of this action.</param>
            /// <param name="FileNameWD">The value for the 'FileNameWD' parameter of this action.</param>
            /// <param name="FileNamePC">The value for the 'FileNamePC' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/UploadPostCodeFilesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/UploadPostCodeFiles", ReplyAction="http://tempuri.org/MIUploadService/UploadPostCodeFilesResponse")]
            IAsyncResult BeginUploadPostCodeFiles(string FileNameWPC, string FileNameLA, string FileNameCty, string FileNameLEA, string FileNameNUTS1, string FileNameWD, string FileNamePC, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUploadPostCodeFiles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUploadPostCodeFiles'.</param>
            /// <returns>The 'Guid' returned from the 'UploadPostCodeFiles' operation.</returns>
            Guid EndUploadPostCodeFiles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MIUploadService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MIUploadService/SubmitChanges", ReplyAction="http://tempuri.org/MIUploadService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MIUploadContextEntityContainer : EntityContainer
        {
            
            public MIUploadContextEntityContainer()
            {
                this.CreateEntitySet<InputFileErrorSummary>(EntitySetOperations.None);
                this.CreateEntitySet<InputFileError>(EntitySetOperations.None);
                this.CreateEntitySet<InputFileHistory>(EntitySetOperations.All);
                this.CreateEntitySet<ProviderOrganisation>(EntitySetOperations.All);
                this.CreateEntitySet<UploadMonitor>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'WKTService' DomainService.
    /// </summary>
    public sealed partial class WKTContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WKTContext"/> class.
        /// </summary>
        public WKTContext() : 
                this(new WebDomainClient<IWKTServiceContract>(new Uri("UcbManagementInformation-Web-Services-WKTService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WKTContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The WKTService service URI.</param>
        public WKTContext(Uri serviceUri) : 
                this(new WebDomainClient<IWKTServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WKTContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public WKTContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSQLDataWKT' method of the DomainService.
        /// </summary>
        /// <param name="Parameters">The value for the 'Parameters' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<WKTResponse> GetSQLDataWKT(WKTParameters Parameters, Action<InvokeOperation<WKTResponse>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Parameters", Parameters);
            this.ValidateMethod("GetSQLDataWKT", parameters);
            return ((InvokeOperation<WKTResponse>)(this.InvokeOperation("GetSQLDataWKT", typeof(WKTResponse), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetSQLDataWKT' method of the DomainService.
        /// </summary>
        /// <param name="Parameters">The value for the 'Parameters' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<WKTResponse> GetSQLDataWKT(WKTParameters Parameters)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Parameters", Parameters);
            this.ValidateMethod("GetSQLDataWKT", parameters);
            return ((InvokeOperation<WKTResponse>)(this.InvokeOperation("GetSQLDataWKT", typeof(WKTResponse), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ServiceException' method of the DomainService.
        /// </summary>
        /// <param name="response">The value for the 'response' parameter of this action.</param>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ServiceException(WKTResponse response, string message, int code, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("response", response);
            parameters.Add("message", message);
            parameters.Add("code", code);
            this.ValidateMethod("ServiceException", parameters);
            return this.InvokeOperation("ServiceException", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ServiceException' method of the DomainService.
        /// </summary>
        /// <param name="response">The value for the 'response' parameter of this action.</param>
        /// <param name="message">The value for the 'message' parameter of this action.</param>
        /// <param name="code">The value for the 'code' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation ServiceException(WKTResponse response, string message, int code)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("response", response);
            parameters.Add("message", message);
            parameters.Add("code", code);
            this.ValidateMethod("ServiceException", parameters);
            return this.InvokeOperation("ServiceException", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WKTContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'WKTService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IWKTServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSQLDataWKT' operation.
            /// </summary>
            /// <param name="Parameters">The value for the 'Parameters' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WKTService/GetSQLDataWKTDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WKTService/GetSQLDataWKT", ReplyAction="http://tempuri.org/WKTService/GetSQLDataWKTResponse")]
            IAsyncResult BeginGetSQLDataWKT(WKTParameters Parameters, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSQLDataWKT'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSQLDataWKT'.</param>
            /// <returns>The 'WKTResponse' returned from the 'GetSQLDataWKT' operation.</returns>
            WKTResponse EndGetSQLDataWKT(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ServiceException' operation.
            /// </summary>
            /// <param name="response">The value for the 'response' parameter of this action.</param>
            /// <param name="message">The value for the 'message' parameter of this action.</param>
            /// <param name="code">The value for the 'code' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WKTService/ServiceExceptionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WKTService/ServiceException", ReplyAction="http://tempuri.org/WKTService/ServiceExceptionResponse")]
            IAsyncResult BeginServiceException(WKTResponse response, string message, int code, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginServiceException'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginServiceException'.</param>
            void EndServiceException(IAsyncResult result);
        }
        
        internal sealed class WKTContextEntityContainer : EntityContainer
        {
            
            public WKTContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'WKTParameters' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Web.Services")]
    public sealed partial class WKTParameters : ComplexObject
    {
        
        private string _points;
        
        private string _querytype;
        
        private double _radius;
        
        private double _reduce;
        
        private string _regionField;
        
        private string _table;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnPointsChanging(string value);
        partial void OnPointsChanged();
        partial void OnQuerytypeChanging(string value);
        partial void OnQuerytypeChanged();
        partial void OnRadiusChanging(double value);
        partial void OnRadiusChanged();
        partial void OnReduceChanging(double value);
        partial void OnReduceChanged();
        partial void OnRegionFieldChanging(string value);
        partial void OnRegionFieldChanged();
        partial void OnTableChanging(string value);
        partial void OnTableChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WKTParameters"/> class.
        /// </summary>
        public WKTParameters()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Points' value.
        /// </summary>
        [DataMember()]
        public string Points
        {
            get
            {
                return this._points;
            }
            set
            {
                if ((this._points != value))
                {
                    this.OnPointsChanging(value);
                    this.RaiseDataMemberChanging("Points");
                    this.ValidateProperty("Points", value);
                    this._points = value;
                    this.RaiseDataMemberChanged("Points");
                    this.OnPointsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Querytype' value.
        /// </summary>
        [DataMember()]
        public string Querytype
        {
            get
            {
                return this._querytype;
            }
            set
            {
                if ((this._querytype != value))
                {
                    this.OnQuerytypeChanging(value);
                    this.RaiseDataMemberChanging("Querytype");
                    this.ValidateProperty("Querytype", value);
                    this._querytype = value;
                    this.RaiseDataMemberChanged("Querytype");
                    this.OnQuerytypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Radius' value.
        /// </summary>
        [DataMember()]
        public double Radius
        {
            get
            {
                return this._radius;
            }
            set
            {
                if ((this._radius != value))
                {
                    this.OnRadiusChanging(value);
                    this.RaiseDataMemberChanging("Radius");
                    this.ValidateProperty("Radius", value);
                    this._radius = value;
                    this.RaiseDataMemberChanged("Radius");
                    this.OnRadiusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reduce' value.
        /// </summary>
        [DataMember()]
        public double Reduce
        {
            get
            {
                return this._reduce;
            }
            set
            {
                if ((this._reduce != value))
                {
                    this.OnReduceChanging(value);
                    this.RaiseDataMemberChanging("Reduce");
                    this.ValidateProperty("Reduce", value);
                    this._reduce = value;
                    this.RaiseDataMemberChanged("Reduce");
                    this.OnReduceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionField' value.
        /// </summary>
        [DataMember()]
        public string RegionField
        {
            get
            {
                return this._regionField;
            }
            set
            {
                if ((this._regionField != value))
                {
                    this.OnRegionFieldChanging(value);
                    this.RaiseDataMemberChanging("RegionField");
                    this.ValidateProperty("RegionField", value);
                    this._regionField = value;
                    this.RaiseDataMemberChanged("RegionField");
                    this.OnRegionFieldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Table' value.
        /// </summary>
        [DataMember()]
        public string Table
        {
            get
            {
                return this._table;
            }
            set
            {
                if ((this._table != value))
                {
                    this.OnTableChanging(value);
                    this.RaiseDataMemberChanging("Table");
                    this.ValidateProperty("Table", value);
                    this._table = value;
                    this.RaiseDataMemberChanged("Table");
                    this.OnTableChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'WKTResponse' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Web.Services")]
    public sealed partial class WKTResponse : ComplexObject
    {
        
        private int _errorCode;
        
        private string _outputMessage;
        
        private List<WKTShape> _outputShapes;
        
        private double _queryTime;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnErrorCodeChanging(int value);
        partial void OnErrorCodeChanged();
        partial void OnOutputMessageChanging(string value);
        partial void OnOutputMessageChanged();
        partial void OnOutputShapesChanging(List<WKTShape> value);
        partial void OnOutputShapesChanged();
        partial void OnQueryTimeChanging(double value);
        partial void OnQueryTimeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WKTResponse"/> class.
        /// </summary>
        public WKTResponse()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ErrorCode' value.
        /// </summary>
        [DataMember()]
        public int ErrorCode
        {
            get
            {
                return this._errorCode;
            }
            set
            {
                if ((this._errorCode != value))
                {
                    this.OnErrorCodeChanging(value);
                    this.RaiseDataMemberChanging("ErrorCode");
                    this.ValidateProperty("ErrorCode", value);
                    this._errorCode = value;
                    this.RaiseDataMemberChanged("ErrorCode");
                    this.OnErrorCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutputMessage' value.
        /// </summary>
        [DataMember()]
        public string OutputMessage
        {
            get
            {
                return this._outputMessage;
            }
            set
            {
                if ((this._outputMessage != value))
                {
                    this.OnOutputMessageChanging(value);
                    this.RaiseDataMemberChanging("OutputMessage");
                    this.ValidateProperty("OutputMessage", value);
                    this._outputMessage = value;
                    this.RaiseDataMemberChanged("OutputMessage");
                    this.OnOutputMessageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutputShapes' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<WKTShape> OutputShapes
        {
            get
            {
                return this._outputShapes;
            }
            set
            {
                if ((this._outputShapes != value))
                {
                    this.OnOutputShapesChanging(value);
                    this.RaiseDataMemberChanging("OutputShapes");
                    this.ValidateProperty("OutputShapes", value);
                    this._outputShapes = value;
                    this.RaiseDataMemberChanged("OutputShapes");
                    this.OnOutputShapesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QueryTime' value.
        /// </summary>
        [DataMember()]
        public double QueryTime
        {
            get
            {
                return this._queryTime;
            }
            set
            {
                if ((this._queryTime != value))
                {
                    this.OnQueryTimeChanging(value);
                    this.RaiseDataMemberChanging("QueryTime");
                    this.ValidateProperty("QueryTime", value);
                    this._queryTime = value;
                    this.RaiseDataMemberChanged("QueryTime");
                    this.OnQueryTimeChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'WKTShape' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UcbManagementInformation.Web.Services")]
    public sealed partial class WKTShape : ComplexObject
    {
        
        private Dictionary<string, string> _fields;
        
        private string _id;
        
        private string _wkt;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFieldsChanging(Dictionary<string, string> value);
        partial void OnFieldsChanged();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnWKTChanging(string value);
        partial void OnWKTChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WKTShape"/> class.
        /// </summary>
        public WKTShape()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Fields' value.
        /// </summary>
        [DataMember()]
        public Dictionary<string, string> Fields
        {
            get
            {
                return this._fields;
            }
            set
            {
                if ((this._fields != value))
                {
                    this.OnFieldsChanging(value);
                    this.RaiseDataMemberChanging("Fields");
                    this.ValidateProperty("Fields", value);
                    this._fields = value;
                    this.RaiseDataMemberChanged("Fields");
                    this.OnFieldsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        public string ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.RaiseDataMemberChanging("ID");
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WKT' value.
        /// </summary>
        [DataMember()]
        public string WKT
        {
            get
            {
                return this._wkt;
            }
            set
            {
                if ((this._wkt != value))
                {
                    this.OnWKTChanging(value);
                    this.RaiseDataMemberChanging("WKT");
                    this.ValidateProperty("WKT", value);
                    this._wkt = value;
                    this.RaiseDataMemberChanged("WKT");
                    this.OnWKTChanged();
                }
            }
        }
    }
}
