//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class Report
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual System.Guid GroupCode
        {
            get { return _groupCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_groupCode != value)
                    {
                        if (ReportGroup != null && ReportGroup.Code != value)
                        {
                            ReportGroup = null;
                        }
                        _groupCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _groupCode;
    
        public virtual Nullable<System.Guid> DataModelCode
        {
            get { return _dataModelCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_dataModelCode != value)
                    {
                        if (DataModel_1 != null && DataModel_1.Code != value)
                        {
                            DataModel_1 = null;
                        }
                        _dataModelCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _dataModelCode;
    
        public virtual System.DateTime CreationDate
        {
            get;
            set;
        }
    
        public virtual string CreationUserID
        {
            get;
            set;
        }
    
        public virtual System.DateTime ModifiedDate
        {
            get;
            set;
        }
    
        public virtual string ModifiedUserID
        {
            get;
            set;
        }
    
        public virtual bool IsPageOnFirstItem
        {
            get;
            set;
        }
    
        public virtual bool IsAllowDrilldown
        {
            get;
            set;
        }
    
        public virtual bool IsInitialExpanded
        {
            get;
            set;
        }
    
        public virtual bool IsMatrix
        {
            get;
            set;
        }
    
        public virtual bool IsStandard
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsDataMapDisplayed
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsSummaryReport
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsOuterJoin
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ReportGroup ReportGroup
        {
            get { return _reportGroup; }
            set
            {
                if (!ReferenceEquals(_reportGroup, value))
                {
                    var previousValue = _reportGroup;
                    _reportGroup = value;
                    FixupReportGroup(previousValue);
                }
            }
        }
        private ReportGroup _reportGroup;
    
        public virtual ICollection<ReportItem> ReportItems
        {
            get
            {
                if (_reportItems == null)
                {
                    var newCollection = new FixupCollection<ReportItem>();
                    newCollection.CollectionChanged += FixupReportItems;
                    _reportItems = newCollection;
                }
                return _reportItems;
            }
            set
            {
                if (!ReferenceEquals(_reportItems, value))
                {
                    var previousValue = _reportItems as FixupCollection<ReportItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportItems;
                    }
                    _reportItems = value;
                    var newValue = value as FixupCollection<ReportItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportItems;
                    }
                }
            }
        }
        private ICollection<ReportItem> _reportItems;
    
        public virtual ICollection<ReportDataTableJoin> ReportDataTableJoins
        {
            get
            {
                if (_reportDataTableJoins == null)
                {
                    var newCollection = new FixupCollection<ReportDataTableJoin>();
                    newCollection.CollectionChanged += FixupReportDataTableJoins;
                    _reportDataTableJoins = newCollection;
                }
                return _reportDataTableJoins;
            }
            set
            {
                if (!ReferenceEquals(_reportDataTableJoins, value))
                {
                    var previousValue = _reportDataTableJoins as FixupCollection<ReportDataTableJoin>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportDataTableJoins;
                    }
                    _reportDataTableJoins = value;
                    var newValue = value as FixupCollection<ReportDataTableJoin>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportDataTableJoins;
                    }
                }
            }
        }
        private ICollection<ReportDataTableJoin> _reportDataTableJoins;
    
        public virtual ICollection<ReportChart> ReportCharts
        {
            get
            {
                if (_reportCharts == null)
                {
                    var newCollection = new FixupCollection<ReportChart>();
                    newCollection.CollectionChanged += FixupReportCharts;
                    _reportCharts = newCollection;
                }
                return _reportCharts;
            }
            set
            {
                if (!ReferenceEquals(_reportCharts, value))
                {
                    var previousValue = _reportCharts as FixupCollection<ReportChart>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportCharts;
                    }
                    _reportCharts = value;
                    var newValue = value as FixupCollection<ReportChart>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportCharts;
                    }
                }
            }
        }
        private ICollection<ReportChart> _reportCharts;
    
        public virtual DataModel DataModel_1
        {
            get { return _dataModel_1; }
            set
            {
                if (!ReferenceEquals(_dataModel_1, value))
                {
                    var previousValue = _dataModel_1;
                    _dataModel_1 = value;
                    FixupDataModel_1(previousValue);
                }
            }
        }
        private DataModel _dataModel_1;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupReportGroup(ReportGroup previousValue)
        {
            if (previousValue != null && previousValue.Reports.Contains(this))
            {
                previousValue.Reports.Remove(this);
            }
    
            if (ReportGroup != null)
            {
                if (!ReportGroup.Reports.Contains(this))
                {
                    ReportGroup.Reports.Add(this);
                }
                if (GroupCode != ReportGroup.Code)
                {
                    GroupCode = ReportGroup.Code;
                }
            }
        }
    
        private void FixupDataModel_1(DataModel previousValue)
        {
            if (previousValue != null && previousValue.Reports_1.Contains(this))
            {
                previousValue.Reports_1.Remove(this);
            }
    
            if (DataModel_1 != null)
            {
                if (!DataModel_1.Reports_1.Contains(this))
                {
                    DataModel_1.Reports_1.Add(this);
                }
                if (DataModelCode != DataModel_1.Code)
                {
                    DataModelCode = DataModel_1.Code;
                }
            }
            else if (!_settingFK)
            {
                DataModelCode = null;
            }
        }
    
        private void FixupReportItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportItem item in e.NewItems)
                {
                    item.Report = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                }
            }
        }
    
        private void FixupReportDataTableJoins(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportDataTableJoin item in e.NewItems)
                {
                    item.Report = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportDataTableJoin item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                }
            }
        }
    
        private void FixupReportCharts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportChart item in e.NewItems)
                {
                    item.Report = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportChart item in e.OldItems)
                {
                    if (ReferenceEquals(item.Report, this))
                    {
                        item.Report = null;
                    }
                }
            }
        }

        #endregion
    }
}
