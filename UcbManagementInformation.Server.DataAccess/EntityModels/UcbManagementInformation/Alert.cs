//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class Alert
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Type
        {
            get;
            set;
        }
    
        public virtual string TriggerTable
        {
            get;
            set;
        }
    
        public virtual string TriggerOperator
        {
            get;
            set;
        }
    
        public virtual string TriggerValue
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TriggerDateTime
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string Message
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedDate
        {
            get;
            set;
        }
    
        public virtual string CreatedBy
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CompletedDate
        {
            get;
            set;
        }
    
        public virtual string TriggerKeyField
        {
            get;
            set;
        }
    
        public virtual string TriggerKeyValue
        {
            get;
            set;
        }
    
        public virtual string TriggerField
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> RelatedEntityCode
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<AlertUser> AlertUsers
        {
            get
            {
                if (_alertUsers == null)
                {
                    var newCollection = new FixupCollection<AlertUser>();
                    newCollection.CollectionChanged += FixupAlertUsers;
                    _alertUsers = newCollection;
                }
                return _alertUsers;
            }
            set
            {
                if (!ReferenceEquals(_alertUsers, value))
                {
                    var previousValue = _alertUsers as FixupCollection<AlertUser>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAlertUsers;
                    }
                    _alertUsers = value;
                    var newValue = value as FixupCollection<AlertUser>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAlertUsers;
                    }
                }
            }
        }
        private ICollection<AlertUser> _alertUsers;

        #endregion
        #region Association Fixup
    
        private void FixupAlertUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AlertUser item in e.NewItems)
                {
                    item.Alert = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AlertUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.Alert, this))
                    {
                        item.Alert = null;
                    }
                }
            }
        }

        #endregion
    }
}
