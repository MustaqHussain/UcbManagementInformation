//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.EntityClient;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class UcbManagementInformationEntities : ObjectContext, IUcbManagementInformationEntities
    {
        public const string ConnectionString = "name=UcbManagementInformationEntities";
        public const string ContainerName = "UcbManagementInformationEntities";
    
        #region Constructors
    
        public UcbManagementInformationEntities()
            : base(ConnectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = false;
        }
    
        public UcbManagementInformationEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = false;
        }
    
        public UcbManagementInformationEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            this.ContextOptions.LazyLoadingEnabled = false;
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public IObjectSet<DataCategory> DataCategories
        {
            get { return _dataCategories  ?? (_dataCategories = CreateObjectSet<DataCategory>("DataCategories")); }
        }
        private ObjectSet<DataCategory> _dataCategories;
    
        public IObjectSet<DataItem> DataItems
        {
            get { return _dataItems  ?? (_dataItems = CreateObjectSet<DataItem>("DataItems")); }
        }
        private ObjectSet<DataItem> _dataItems;
    
        public IObjectSet<DataTable> DataTables
        {
            get { return _dataTables  ?? (_dataTables = CreateObjectSet<DataTable>("DataTables")); }
        }
        private ObjectSet<DataTable> _dataTables;
    
        public IObjectSet<DataTableJoin> DataTableJoins
        {
            get { return _dataTableJoins  ?? (_dataTableJoins = CreateObjectSet<DataTableJoin>("DataTableJoins")); }
        }
        private ObjectSet<DataTableJoin> _dataTableJoins;
    
        public IObjectSet<DataTableRelationship> DataTableRelationships
        {
            get { return _dataTableRelationships  ?? (_dataTableRelationships = CreateObjectSet<DataTableRelationship>("DataTableRelationships")); }
        }
        private ObjectSet<DataTableRelationship> _dataTableRelationships;
    
        public IObjectSet<DataTableRelationshipJoin> DataTableRelationshipJoins
        {
            get { return _dataTableRelationshipJoins  ?? (_dataTableRelationshipJoins = CreateObjectSet<DataTableRelationshipJoin>("DataTableRelationshipJoins")); }
        }
        private ObjectSet<DataTableRelationshipJoin> _dataTableRelationshipJoins;
    
        public IObjectSet<DataModel> DataModels
        {
            get { return _dataModels  ?? (_dataModels = CreateObjectSet<DataModel>("DataModels")); }
        }
        private ObjectSet<DataModel> _dataModels;
    
        public IObjectSet<Filter> Filters
        {
            get { return _filters  ?? (_filters = CreateObjectSet<Filter>("Filters")); }
        }
        private ObjectSet<Filter> _filters;
    
        public IObjectSet<Report> Reports
        {
            get { return _reports  ?? (_reports = CreateObjectSet<Report>("Reports")); }
        }
        private ObjectSet<Report> _reports;
    
        public IObjectSet<ReportGroup> ReportGroups
        {
            get { return _reportGroups  ?? (_reportGroups = CreateObjectSet<ReportGroup>("ReportGroups")); }
        }
        private ObjectSet<ReportGroup> _reportGroups;
    
        public IObjectSet<ReportItem> ReportItems
        {
            get { return _reportItems  ?? (_reportItems = CreateObjectSet<ReportItem>("ReportItems")); }
        }
        private ObjectSet<ReportItem> _reportItems;
    
        public IObjectSet<MCRole> MCRoles
        {
            get { return _mCRoles  ?? (_mCRoles = CreateObjectSet<MCRole>("MCRoles")); }
        }
        private ObjectSet<MCRole> _mCRoles;
    
        public IObjectSet<MCUser> MCUsers
        {
            get { return _mCUsers  ?? (_mCUsers = CreateObjectSet<MCUser>("MCUsers")); }
        }
        private ObjectSet<MCUser> _mCUsers;
    
        public IObjectSet<MCUserRole> MCUserRoles
        {
            get { return _mCUserRoles  ?? (_mCUserRoles = CreateObjectSet<MCUserRole>("MCUserRoles")); }
        }
        private ObjectSet<MCUserRole> _mCUserRoles;
    
        public IObjectSet<UserReportGroup> UserReportGroups
        {
            get { return _userReportGroups  ?? (_userReportGroups = CreateObjectSet<UserReportGroup>("UserReportGroups")); }
        }
        private ObjectSet<UserReportGroup> _userReportGroups;
    
        public IObjectSet<ReportDataTableJoin> ReportDataTableJoins
        {
            get { return _reportDataTableJoins  ?? (_reportDataTableJoins = CreateObjectSet<ReportDataTableJoin>("ReportDataTableJoins")); }
        }
        private ObjectSet<ReportDataTableJoin> _reportDataTableJoins;
    
        public IObjectSet<ReportChart> ReportCharts
        {
            get { return _reportCharts  ?? (_reportCharts = CreateObjectSet<ReportChart>("ReportCharts")); }
        }
        private ObjectSet<ReportChart> _reportCharts;
    
        public IObjectSet<ReportChartSery> ReportChartSeries
        {
            get { return _reportChartSeries  ?? (_reportChartSeries = CreateObjectSet<ReportChartSery>("ReportChartSeries")); }
        }
        private ObjectSet<ReportChartSery> _reportChartSeries;
    
        public IObjectSet<Category> Categories
        {
            get { return _categories  ?? (_categories = CreateObjectSet<Category>("Categories")); }
        }
        private ObjectSet<Category> _categories;
    
        public IObjectSet<CategoryLog> CategoryLogs
        {
            get { return _categoryLogs  ?? (_categoryLogs = CreateObjectSet<CategoryLog>("CategoryLogs")); }
        }
        private ObjectSet<CategoryLog> _categoryLogs;
    
        public IObjectSet<InputFileError> InputFileErrors
        {
            get { return _inputFileErrors  ?? (_inputFileErrors = CreateObjectSet<InputFileError>("InputFileErrors")); }
        }
        private ObjectSet<InputFileError> _inputFileErrors;
    
        public IObjectSet<InputFileHistory> InputFileHistories
        {
            get { return _inputFileHistories  ?? (_inputFileHistories = CreateObjectSet<InputFileHistory>("InputFileHistories")); }
        }
        private ObjectSet<InputFileHistory> _inputFileHistories;
    
        public IObjectSet<Log> Logs
        {
            get { return _logs  ?? (_logs = CreateObjectSet<Log>("Logs")); }
        }
        private ObjectSet<Log> _logs;
    
        public IObjectSet<ProviderOrganisation> ProviderOrganisations
        {
            get { return _providerOrganisations  ?? (_providerOrganisations = CreateObjectSet<ProviderOrganisation>("ProviderOrganisations")); }
        }
        private ObjectSet<ProviderOrganisation> _providerOrganisations;
    
        public IObjectSet<UploadJobQueue> UploadJobQueues
        {
            get { return _uploadJobQueues  ?? (_uploadJobQueues = CreateObjectSet<UploadJobQueue>("UploadJobQueues")); }
        }
        private ObjectSet<UploadJobQueue> _uploadJobQueues;
    
        public IObjectSet<UploadMonitor> UploadMonitors
        {
            get { return _uploadMonitors  ?? (_uploadMonitors = CreateObjectSet<UploadMonitor>("UploadMonitors")); }
        }
        private ObjectSet<UploadMonitor> _uploadMonitors;
    
        public IObjectSet<ReportDB> ReportDBs
        {
            get { return _reportDBs  ?? (_reportDBs = CreateObjectSet<ReportDB>("ReportDBs")); }
        }
        private ObjectSet<ReportDB> _reportDBs;
    
        public IObjectSet<ReportDBLoadHistory> ReportDBLoadHistories
        {
            get { return _reportDBLoadHistories  ?? (_reportDBLoadHistories = CreateObjectSet<ReportDBLoadHistory>("ReportDBLoadHistories")); }
        }
        private ObjectSet<ReportDBLoadHistory> _reportDBLoadHistories;
    
        public IObjectSet<JobStep> JobSteps
        {
            get { return _jobSteps  ?? (_jobSteps = CreateObjectSet<JobStep>("JobSteps")); }
        }
        private ObjectSet<JobStep> _jobSteps;
    
        public IObjectSet<Alert> Alerts
        {
            get { return _alerts  ?? (_alerts = CreateObjectSet<Alert>("Alerts")); }
        }
        private ObjectSet<Alert> _alerts;
    
        public IObjectSet<AlertUser> AlertUsers
        {
            get { return _alertUsers  ?? (_alertUsers = CreateObjectSet<AlertUser>("AlertUsers")); }
        }
        private ObjectSet<AlertUser> _alertUsers;
    
        public IObjectSet<MCSystemParameter> MCSystemParameters
        {
            get { return _mCSystemParameters  ?? (_mCSystemParameters = CreateObjectSet<MCSystemParameter>("MCSystemParameters")); }
        }
        private ObjectSet<MCSystemParameter> _mCSystemParameters;

        #endregion
        #region Function Imports
        public ObjectResult<string> GetReferenceData(string dataTableName, string dataFieldName, string dataSourceName)
        {
    
            ObjectParameter dataTableNameParameter;
    
            if (dataTableName != null)
            {
                dataTableNameParameter = new ObjectParameter("DataTableName", dataTableName);
            }
            else
            {
                dataTableNameParameter = new ObjectParameter("DataTableName", typeof(string));
            }
    
            ObjectParameter dataFieldNameParameter;
    
            if (dataFieldName != null)
            {
                dataFieldNameParameter = new ObjectParameter("DataFieldName", dataFieldName);
            }
            else
            {
                dataFieldNameParameter = new ObjectParameter("DataFieldName", typeof(string));
            }
    
            ObjectParameter dataSourceNameParameter;
    
            if (dataSourceName != null)
            {
                dataSourceNameParameter = new ObjectParameter("DataSourceName", dataSourceName);
            }
            else
            {
                dataSourceNameParameter = new ObjectParameter("DataSourceName", typeof(string));
            }
            return base.ExecuteFunction<string>("GetReferenceData", dataTableNameParameter, dataFieldNameParameter, dataSourceNameParameter);
        }
        public ObjectResult<string> GetReferenceData1(string dataTableName, string dataTableSchemaName, string dataFieldName, string dataSourceName, string startsWith, string userCode)
        {
    
            ObjectParameter dataTableNameParameter;
    
            if (dataTableName != null)
            {
                dataTableNameParameter = new ObjectParameter("DataTableName", dataTableName);
            }
            else
            {
                dataTableNameParameter = new ObjectParameter("DataTableName", typeof(string));
            }
    
            ObjectParameter dataTableSchemaNameParameter;
    
            if (dataTableSchemaName != null)
            {
                dataTableSchemaNameParameter = new ObjectParameter("DataTableSchemaName", dataTableSchemaName);
            }
            else
            {
                dataTableSchemaNameParameter = new ObjectParameter("DataTableSchemaName", typeof(string));
            }
    
            ObjectParameter dataFieldNameParameter;
    
            if (dataFieldName != null)
            {
                dataFieldNameParameter = new ObjectParameter("DataFieldName", dataFieldName);
            }
            else
            {
                dataFieldNameParameter = new ObjectParameter("DataFieldName", typeof(string));
            }
    
            ObjectParameter dataSourceNameParameter;
    
            if (dataSourceName != null)
            {
                dataSourceNameParameter = new ObjectParameter("DataSourceName", dataSourceName);
            }
            else
            {
                dataSourceNameParameter = new ObjectParameter("DataSourceName", typeof(string));
            }
    
            ObjectParameter startsWithParameter;
    
            if (startsWith != null)
            {
                startsWithParameter = new ObjectParameter("StartsWith", startsWith);
            }
            else
            {
                startsWithParameter = new ObjectParameter("StartsWith", typeof(string));
            }
    
            ObjectParameter userCodeParameter;
    
            if (userCode != null)
            {
                userCodeParameter = new ObjectParameter("UserCode", userCode);
            }
            else
            {
                userCodeParameter = new ObjectParameter("UserCode", typeof(string));
            }
            return base.ExecuteFunction<string>("GetReferenceData1", dataTableNameParameter, dataTableSchemaNameParameter, dataFieldNameParameter, dataSourceNameParameter, startsWithParameter, userCodeParameter);
        }

        #endregion
    }
}
