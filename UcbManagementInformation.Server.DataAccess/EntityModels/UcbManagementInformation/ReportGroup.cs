//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class ReportGroup
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> ParentCode
        {
            get { return _parentCode; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentCode != value)
                    {
                        if (ReportGroup2 != null && ReportGroup2.Code != value)
                        {
                            ReportGroup2 = null;
                        }
                        _parentCode = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentCode;
    
        public virtual string ParentPath
        {
            get;
            set;
        }
    
        public virtual string PathName
        {
            get;
            set;
        }
    
        public virtual string ReportType
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Report> Reports
        {
            get
            {
                if (_reports == null)
                {
                    var newCollection = new FixupCollection<Report>();
                    newCollection.CollectionChanged += FixupReports;
                    _reports = newCollection;
                }
                return _reports;
            }
            set
            {
                if (!ReferenceEquals(_reports, value))
                {
                    var previousValue = _reports as FixupCollection<Report>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReports;
                    }
                    _reports = value;
                    var newValue = value as FixupCollection<Report>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReports;
                    }
                }
            }
        }
        private ICollection<Report> _reports;
    
        public virtual ICollection<ReportGroup> ReportGroup1
        {
            get
            {
                if (_reportGroup1 == null)
                {
                    var newCollection = new FixupCollection<ReportGroup>();
                    newCollection.CollectionChanged += FixupReportGroup1;
                    _reportGroup1 = newCollection;
                }
                return _reportGroup1;
            }
            set
            {
                if (!ReferenceEquals(_reportGroup1, value))
                {
                    var previousValue = _reportGroup1 as FixupCollection<ReportGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportGroup1;
                    }
                    _reportGroup1 = value;
                    var newValue = value as FixupCollection<ReportGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportGroup1;
                    }
                }
            }
        }
        private ICollection<ReportGroup> _reportGroup1;
    
        public virtual ReportGroup ReportGroup2
        {
            get { return _reportGroup2; }
            set
            {
                if (!ReferenceEquals(_reportGroup2, value))
                {
                    var previousValue = _reportGroup2;
                    _reportGroup2 = value;
                    FixupReportGroup2(previousValue);
                }
            }
        }
        private ReportGroup _reportGroup2;
    
        public virtual ICollection<UserReportGroup> UserReportGroups
        {
            get
            {
                if (_userReportGroups == null)
                {
                    var newCollection = new FixupCollection<UserReportGroup>();
                    newCollection.CollectionChanged += FixupUserReportGroups;
                    _userReportGroups = newCollection;
                }
                return _userReportGroups;
            }
            set
            {
                if (!ReferenceEquals(_userReportGroups, value))
                {
                    var previousValue = _userReportGroups as FixupCollection<UserReportGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserReportGroups;
                    }
                    _userReportGroups = value;
                    var newValue = value as FixupCollection<UserReportGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserReportGroups;
                    }
                }
            }
        }
        private ICollection<UserReportGroup> _userReportGroups;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupReportGroup2(ReportGroup previousValue)
        {
            if (previousValue != null && previousValue.ReportGroup1.Contains(this))
            {
                previousValue.ReportGroup1.Remove(this);
            }
    
            if (ReportGroup2 != null)
            {
                if (!ReportGroup2.ReportGroup1.Contains(this))
                {
                    ReportGroup2.ReportGroup1.Add(this);
                }
                if (ParentCode != ReportGroup2.Code)
                {
                    ParentCode = ReportGroup2.Code;
                }
            }
            else if (!_settingFK)
            {
                ParentCode = null;
            }
        }
    
        private void FixupReports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Report item in e.NewItems)
                {
                    item.ReportGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Report item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportGroup, this))
                    {
                        item.ReportGroup = null;
                    }
                }
            }
        }
    
        private void FixupReportGroup1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportGroup item in e.NewItems)
                {
                    item.ReportGroup2 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportGroup2, this))
                    {
                        item.ReportGroup2 = null;
                    }
                }
            }
        }
    
        private void FixupUserReportGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserReportGroup item in e.NewItems)
                {
                    item.ReportGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserReportGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportGroup, this))
                    {
                        item.ReportGroup = null;
                    }
                }
            }
        }

        #endregion
    }
}
