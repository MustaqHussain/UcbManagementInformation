//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class DataCategory
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual int SortField
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }
    
        public virtual System.Guid DataModelCode
        {
            get { return _dataModelCode; }
            set
            {
                if (_dataModelCode != value)
                {
                    if (DataModel != null && DataModel.Code != value)
                    {
                        DataModel = null;
                    }
                    _dataModelCode = value;
                }
            }
        }
        private System.Guid _dataModelCode;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<DataItem> DataItems
        {
            get
            {
                if (_dataItems == null)
                {
                    var newCollection = new FixupCollection<DataItem>();
                    newCollection.CollectionChanged += FixupDataItems;
                    _dataItems = newCollection;
                }
                return _dataItems;
            }
            set
            {
                if (!ReferenceEquals(_dataItems, value))
                {
                    var previousValue = _dataItems as FixupCollection<DataItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDataItems;
                    }
                    _dataItems = value;
                    var newValue = value as FixupCollection<DataItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDataItems;
                    }
                }
            }
        }
        private ICollection<DataItem> _dataItems;
    
        public virtual DataModel DataModel
        {
            get { return _dataModel; }
            set
            {
                if (!ReferenceEquals(_dataModel, value))
                {
                    var previousValue = _dataModel;
                    _dataModel = value;
                    FixupDataModel(previousValue);
                }
            }
        }
        private DataModel _dataModel;

        #endregion
        #region Association Fixup
    
        private void FixupDataModel(DataModel previousValue)
        {
            if (previousValue != null && previousValue.DataCategories.Contains(this))
            {
                previousValue.DataCategories.Remove(this);
            }
    
            if (DataModel != null)
            {
                if (!DataModel.DataCategories.Contains(this))
                {
                    DataModel.DataCategories.Add(this);
                }
                if (DataModelCode != DataModel.Code)
                {
                    DataModelCode = DataModel.Code;
                }
            }
        }
    
        private void FixupDataItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DataItem item in e.NewItems)
                {
                    item.DataCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataCategory, this))
                    {
                        item.DataCategory = null;
                    }
                }
            }
        }

        #endregion
    }
}
