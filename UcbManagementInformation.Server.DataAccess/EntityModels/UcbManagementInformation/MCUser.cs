//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class MCUser
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
        [Key]
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Forename
        {
            get;
            set;
        }
    
        public virtual string Surname
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual string Password
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<MCUserRole> UserRoles
        {
            get
            {
                if (_userRoles == null)
                {
                    var newCollection = new FixupCollection<MCUserRole>();
                    newCollection.CollectionChanged += FixupUserRoles;
                    _userRoles = newCollection;
                }
                return _userRoles;
            }
            set
            {
                if (!ReferenceEquals(_userRoles, value))
                {
                    var previousValue = _userRoles as FixupCollection<MCUserRole>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserRoles;
                    }
                    _userRoles = value;
                    var newValue = value as FixupCollection<MCUserRole>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserRoles;
                    }
                }
            }
        }
        private ICollection<MCUserRole> _userRoles;
    
        public virtual ICollection<UserReportGroup> UserReportGroups
        {
            get
            {
                if (_userReportGroups == null)
                {
                    var newCollection = new FixupCollection<UserReportGroup>();
                    newCollection.CollectionChanged += FixupUserReportGroups;
                    _userReportGroups = newCollection;
                }
                return _userReportGroups;
            }
            set
            {
                if (!ReferenceEquals(_userReportGroups, value))
                {
                    var previousValue = _userReportGroups as FixupCollection<UserReportGroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUserReportGroups;
                    }
                    _userReportGroups = value;
                    var newValue = value as FixupCollection<UserReportGroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUserReportGroups;
                    }
                }
            }
        }
        private ICollection<UserReportGroup> _userReportGroups;
    
        public virtual ICollection<AlertUser> AlertUsers
        {
            get
            {
                if (_alertUsers == null)
                {
                    var newCollection = new FixupCollection<AlertUser>();
                    newCollection.CollectionChanged += FixupAlertUsers;
                    _alertUsers = newCollection;
                }
                return _alertUsers;
            }
            set
            {
                if (!ReferenceEquals(_alertUsers, value))
                {
                    var previousValue = _alertUsers as FixupCollection<AlertUser>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAlertUsers;
                    }
                    _alertUsers = value;
                    var newValue = value as FixupCollection<AlertUser>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAlertUsers;
                    }
                }
            }
        }
        private ICollection<AlertUser> _alertUsers;

        #endregion
        #region Association Fixup
    
        private void FixupUserRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MCUserRole item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MCUserRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupUserReportGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (UserReportGroup item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserReportGroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupAlertUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AlertUser item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AlertUser item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
