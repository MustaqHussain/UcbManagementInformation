//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class DataModel
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual byte[] Rowidentifier
        {
            get;
            set;
        }
    
        public virtual string DatasourceName
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<DataCategory> DataCategories
        {
            get
            {
                if (_dataCategories == null)
                {
                    var newCollection = new FixupCollection<DataCategory>();
                    newCollection.CollectionChanged += FixupDataCategories;
                    _dataCategories = newCollection;
                }
                return _dataCategories;
            }
            set
            {
                if (!ReferenceEquals(_dataCategories, value))
                {
                    var previousValue = _dataCategories as FixupCollection<DataCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDataCategories;
                    }
                    _dataCategories = value;
                    var newValue = value as FixupCollection<DataCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDataCategories;
                    }
                }
            }
        }
        private ICollection<DataCategory> _dataCategories;
    
        public virtual ICollection<DataTable> DataTables
        {
            get
            {
                if (_dataTables == null)
                {
                    var newCollection = new FixupCollection<DataTable>();
                    newCollection.CollectionChanged += FixupDataTables;
                    _dataTables = newCollection;
                }
                return _dataTables;
            }
            set
            {
                if (!ReferenceEquals(_dataTables, value))
                {
                    var previousValue = _dataTables as FixupCollection<DataTable>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDataTables;
                    }
                    _dataTables = value;
                    var newValue = value as FixupCollection<DataTable>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDataTables;
                    }
                }
            }
        }
        private ICollection<DataTable> _dataTables;
    
        public virtual ICollection<DataTableJoin> DataTableJoins
        {
            get
            {
                if (_dataTableJoins == null)
                {
                    var newCollection = new FixupCollection<DataTableJoin>();
                    newCollection.CollectionChanged += FixupDataTableJoins;
                    _dataTableJoins = newCollection;
                }
                return _dataTableJoins;
            }
            set
            {
                if (!ReferenceEquals(_dataTableJoins, value))
                {
                    var previousValue = _dataTableJoins as FixupCollection<DataTableJoin>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDataTableJoins;
                    }
                    _dataTableJoins = value;
                    var newValue = value as FixupCollection<DataTableJoin>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDataTableJoins;
                    }
                }
            }
        }
        private ICollection<DataTableJoin> _dataTableJoins;
    
        public virtual ICollection<Report> Reports_1
        {
            get
            {
                if (_reports_1 == null)
                {
                    var newCollection = new FixupCollection<Report>();
                    newCollection.CollectionChanged += FixupReports_1;
                    _reports_1 = newCollection;
                }
                return _reports_1;
            }
            set
            {
                if (!ReferenceEquals(_reports_1, value))
                {
                    var previousValue = _reports_1 as FixupCollection<Report>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReports_1;
                    }
                    _reports_1 = value;
                    var newValue = value as FixupCollection<Report>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReports_1;
                    }
                }
            }
        }
        private ICollection<Report> _reports_1;

        #endregion
        #region Association Fixup
    
        private void FixupDataCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DataCategory item in e.NewItems)
                {
                    item.DataModel = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataModel, this))
                    {
                        item.DataModel = null;
                    }
                }
            }
        }
    
        private void FixupDataTables(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DataTable item in e.NewItems)
                {
                    item.DataModel = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataTable item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataModel, this))
                    {
                        item.DataModel = null;
                    }
                }
            }
        }
    
        private void FixupDataTableJoins(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DataTableJoin item in e.NewItems)
                {
                    item.DataModel = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataTableJoin item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataModel, this))
                    {
                        item.DataModel = null;
                    }
                }
            }
        }
    
        private void FixupReports_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Report item in e.NewItems)
                {
                    item.DataModel_1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Report item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataModel_1, this))
                    {
                        item.DataModel_1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
