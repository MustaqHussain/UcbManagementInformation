//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class ReportItem
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual System.Guid DataItemCode
        {
            get { return _dataItemCode; }
            set
            {
                if (_dataItemCode != value)
                {
                    if (DataItem != null && DataItem.Code != value)
                    {
                        DataItem = null;
                    }
                    _dataItemCode = value;
                }
            }
        }
        private System.Guid _dataItemCode;
    
        public virtual System.Guid ReportCode
        {
            get { return _reportCode; }
            set
            {
                if (_reportCode != value)
                {
                    if (Report != null && Report.Code != value)
                    {
                        Report = null;
                    }
                    _reportCode = value;
                }
            }
        }
        private System.Guid _reportCode;
    
        public virtual bool IsField
        {
            get;
            set;
        }
    
        public virtual bool IsParameter
        {
            get;
            set;
        }
    
        public virtual bool IsRowTotal
        {
            get;
            set;
        }
    
        public virtual bool IsColumnTotal
        {
            get;
            set;
        }
    
        public virtual bool IsFilter
        {
            get;
            set;
        }
    
        public virtual int SortField
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }
    
        public virtual bool IsChartField
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual DataItem DataItem
        {
            get { return _dataItem; }
            set
            {
                if (!ReferenceEquals(_dataItem, value))
                {
                    var previousValue = _dataItem;
                    _dataItem = value;
                    FixupDataItem(previousValue);
                }
            }
        }
        private DataItem _dataItem;
    
        public virtual ICollection<Filter> Filters
        {
            get
            {
                if (_filters == null)
                {
                    var newCollection = new FixupCollection<Filter>();
                    newCollection.CollectionChanged += FixupFilters;
                    _filters = newCollection;
                }
                return _filters;
            }
            set
            {
                if (!ReferenceEquals(_filters, value))
                {
                    var previousValue = _filters as FixupCollection<Filter>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFilters;
                    }
                    _filters = value;
                    var newValue = value as FixupCollection<Filter>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFilters;
                    }
                }
            }
        }
        private ICollection<Filter> _filters;
    
        public virtual Report Report
        {
            get { return _report; }
            set
            {
                if (!ReferenceEquals(_report, value))
                {
                    var previousValue = _report;
                    _report = value;
                    FixupReport(previousValue);
                }
            }
        }
        private Report _report;
    
        public virtual ICollection<ReportChart> ReportCharts
        {
            get
            {
                if (_reportCharts == null)
                {
                    var newCollection = new FixupCollection<ReportChart>();
                    newCollection.CollectionChanged += FixupReportCharts;
                    _reportCharts = newCollection;
                }
                return _reportCharts;
            }
            set
            {
                if (!ReferenceEquals(_reportCharts, value))
                {
                    var previousValue = _reportCharts as FixupCollection<ReportChart>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportCharts;
                    }
                    _reportCharts = value;
                    var newValue = value as FixupCollection<ReportChart>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportCharts;
                    }
                }
            }
        }
        private ICollection<ReportChart> _reportCharts;
    
        public virtual ICollection<ReportChartSery> ReportChartSeries
        {
            get
            {
                if (_reportChartSeries == null)
                {
                    var newCollection = new FixupCollection<ReportChartSery>();
                    newCollection.CollectionChanged += FixupReportChartSeries;
                    _reportChartSeries = newCollection;
                }
                return _reportChartSeries;
            }
            set
            {
                if (!ReferenceEquals(_reportChartSeries, value))
                {
                    var previousValue = _reportChartSeries as FixupCollection<ReportChartSery>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportChartSeries;
                    }
                    _reportChartSeries = value;
                    var newValue = value as FixupCollection<ReportChartSery>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportChartSeries;
                    }
                }
            }
        }
        private ICollection<ReportChartSery> _reportChartSeries;

        #endregion
        #region Association Fixup
    
        private void FixupDataItem(DataItem previousValue)
        {
            if (previousValue != null && previousValue.ReportItems.Contains(this))
            {
                previousValue.ReportItems.Remove(this);
            }
    
            if (DataItem != null)
            {
                if (!DataItem.ReportItems.Contains(this))
                {
                    DataItem.ReportItems.Add(this);
                }
                if (DataItemCode != DataItem.Code)
                {
                    DataItemCode = DataItem.Code;
                }
            }
        }
    
        private void FixupReport(Report previousValue)
        {
            if (previousValue != null && previousValue.ReportItems.Contains(this))
            {
                previousValue.ReportItems.Remove(this);
            }
    
            if (Report != null)
            {
                if (!Report.ReportItems.Contains(this))
                {
                    Report.ReportItems.Add(this);
                }
                if (ReportCode != Report.Code)
                {
                    ReportCode = Report.Code;
                }
            }
        }
    
        private void FixupFilters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Filter item in e.NewItems)
                {
                    item.ReportItem = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Filter item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportItem, this))
                    {
                        item.ReportItem = null;
                    }
                }
            }
        }
    
        private void FixupReportCharts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportChart item in e.NewItems)
                {
                    item.ReportItem = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportChart item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportItem, this))
                    {
                        item.ReportItem = null;
                    }
                }
            }
        }
    
        private void FixupReportChartSeries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportChartSery item in e.NewItems)
                {
                    item.ReportItem = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportChartSery item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportItem, this))
                    {
                        item.ReportItem = null;
                    }
                }
            }
        }

        #endregion
    }
}
