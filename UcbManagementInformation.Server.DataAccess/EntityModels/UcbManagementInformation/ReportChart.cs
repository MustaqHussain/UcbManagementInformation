//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ServiceModel.DomainServices.Server;

namespace UcbManagementInformation.Server.DataAccess
{
    public partial class ReportChart
    {
        #region Primitive Properties
    
        public virtual System.Guid Code
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual System.Guid ReportCode
        {
            get { return _reportCode; }
            set
            {
                if (_reportCode != value)
                {
                    if (Report != null && Report.Code != value)
                    {
                        Report = null;
                    }
                    _reportCode = value;
                }
            }
        }
        private System.Guid _reportCode;
    
        public virtual System.Guid CategoryReportItemCode
        {
            get { return _categoryReportItemCode; }
            set
            {
                if (_categoryReportItemCode != value)
                {
                    if (ReportItem != null && ReportItem.Code != value)
                    {
                        ReportItem = null;
                    }
                    _categoryReportItemCode = value;
                }
            }
        }
        private System.Guid _categoryReportItemCode;
    
        public virtual string ChartStyle
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string ChartType
        {
            get;
            set;
        }
    
        public virtual byte[] RowIdentifier
        {
            get;
            set;
        }
    
        public virtual int SortOrder
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Report Report
        {
            get { return _report; }
            set
            {
                if (!ReferenceEquals(_report, value))
                {
                    var previousValue = _report;
                    _report = value;
                    FixupReport(previousValue);
                }
            }
        }
        private Report _report;
    
        public virtual ReportItem ReportItem
        {
            get { return _reportItem; }
            set
            {
                if (!ReferenceEquals(_reportItem, value))
                {
                    var previousValue = _reportItem;
                    _reportItem = value;
                    FixupReportItem(previousValue);
                }
            }
        }
        private ReportItem _reportItem;
    
        public virtual ICollection<ReportChartSery> ReportChartSeries
        {
            get
            {
                if (_reportChartSeries == null)
                {
                    var newCollection = new FixupCollection<ReportChartSery>();
                    newCollection.CollectionChanged += FixupReportChartSeries;
                    _reportChartSeries = newCollection;
                }
                return _reportChartSeries;
            }
            set
            {
                if (!ReferenceEquals(_reportChartSeries, value))
                {
                    var previousValue = _reportChartSeries as FixupCollection<ReportChartSery>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReportChartSeries;
                    }
                    _reportChartSeries = value;
                    var newValue = value as FixupCollection<ReportChartSery>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReportChartSeries;
                    }
                }
            }
        }
        private ICollection<ReportChartSery> _reportChartSeries;

        #endregion
        #region Association Fixup
    
        private void FixupReport(Report previousValue)
        {
            if (previousValue != null && previousValue.ReportCharts.Contains(this))
            {
                previousValue.ReportCharts.Remove(this);
            }
    
            if (Report != null)
            {
                if (!Report.ReportCharts.Contains(this))
                {
                    Report.ReportCharts.Add(this);
                }
                if (ReportCode != Report.Code)
                {
                    ReportCode = Report.Code;
                }
            }
        }
    
        private void FixupReportItem(ReportItem previousValue)
        {
            if (previousValue != null && previousValue.ReportCharts.Contains(this))
            {
                previousValue.ReportCharts.Remove(this);
            }
    
            if (ReportItem != null)
            {
                if (!ReportItem.ReportCharts.Contains(this))
                {
                    ReportItem.ReportCharts.Add(this);
                }
                if (CategoryReportItemCode != ReportItem.Code)
                {
                    CategoryReportItemCode = ReportItem.Code;
                }
            }
        }
    
        private void FixupReportChartSeries(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ReportChartSery item in e.NewItems)
                {
                    item.ReportChart = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReportChartSery item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReportChart, this))
                    {
                        item.ReportChart = null;
                    }
                }
            }
        }

        #endregion
    }
}
